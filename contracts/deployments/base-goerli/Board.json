{
  "address": "0x7BFED9c6cE5A9c425799f7737fa597F84B9CB18c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        }
      ],
      "name": "AlreadyAttempted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "b",
          "type": "bytes32"
        }
      ],
      "name": "BytesCannotBeEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valuesLength",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC1155MissingApprovalForAll",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        }
      ],
      "name": "InvalidPuzzle",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        }
      ],
      "name": "InvalidPuzzleMove",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredAmount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughEtherSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMathUD60x18__Exp2InputTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMathUD60x18__LogInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        }
      ],
      "name": "PuzzleNotSolved",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        }
      ],
      "name": "StringCannotBeEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fen",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "solutionHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "board",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "metadata",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "PuzzleAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "solutionSubmission",
          "type": "bytes"
        }
      ],
      "name": "PuzzleAttempted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPuzzleRating",
          "type": "uint256"
        }
      ],
      "name": "PuzzleRatingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PuzzleSolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "solver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newUserRating",
          "type": "uint256"
        }
      ],
      "name": "UserRatingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fen",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "solutionHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "board",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct Chess.Move",
          "name": "move",
          "type": "tuple"
        }
      ],
      "name": "addPuzzle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "puzzleCounter",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "puzzlesById",
      "outputs": [
        {
          "internalType": "string",
          "name": "fen",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "solutionHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "solveCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "attemptCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rating",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "board",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct Chess.Move",
          "name": "move",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "solution",
          "type": "bytes"
        }
      ],
      "name": "submitSolution",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToPuzzleId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "puzzleId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userHasSolvedPuzzle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRatings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x19f47ade1cfc9860e816bcad7277d971585e8e622f9c1ee6a104e4532acdcf4c",
  "receipt": {
    "to": null,
    "from": "0x5F5dc98B9A8a61C048133dCa5718CEc577F90b89",
    "contractAddress": "0x7BFED9c6cE5A9c425799f7737fa597F84B9CB18c",
    "transactionIndex": 2,
    "gasUsed": "4428973",
    "logsBloom": "0x
    "blockHash": "0xcb2409efb9b8fddda786f71f962e2599b649516d94bf8b5afa099af5b2969f69",
    "transactionHash": "0x19f47ade1cfc9860e816bcad7277d971585e8e622f9c1ee6a104e4532acdcf4c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 14565528,
        "transactionHash": "0x19f47ade1cfc9860e816bcad7277d971585e8e622f9c1ee6a104e4532acdcf4c",
        "address": "0x7BFED9c6cE5A9c425799f7737fa597F84B9CB18c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005f5dc98b9a8a61c048133dca5718cec577f90b89"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0xcb2409efb9b8fddda786f71f962e2599b649516d94bf8b5afa099af5b2969f69"
      }
    ],
    "blockNumber": 14565528,
    "cumulativeGasUsed": "4872656",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5F5dc98B9A8a61C048133dCa5718CEc577F90b89"
  ],
  "numDeployments": 1,
  "solcInputHash": "613c761a44e59c2e2c5b7040342776c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"}],\"name\":\"AlreadyAttempted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"BytesCannotBeEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"}],\"name\":\"InvalidPuzzle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"}],\"name\":\"InvalidPuzzleMove\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughEtherSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMathUD60x18__Exp2InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMathUD60x18__LogInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"}],\"name\":\"PuzzleNotSolved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"StringCannotBeEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fen\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"solutionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"board\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"PuzzleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"solutionSubmission\",\"type\":\"bytes\"}],\"name\":\"PuzzleAttempted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPuzzleRating\",\"type\":\"uint256\"}],\"name\":\"PuzzleRatingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PuzzleSolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUserRating\",\"type\":\"uint256\"}],\"name\":\"UserRatingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fen\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"solutionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"board\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct Chess.Move\",\"name\":\"move\",\"type\":\"tuple\"}],\"name\":\"addPuzzle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"puzzleCounter\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"puzzlesById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"fen\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"solutionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"solveCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attemptCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rating\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"board\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct Chess.Move\",\"name\":\"move\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"solution\",\"type\":\"bytes\"}],\"name\":\"submitSolution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToPuzzleId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"puzzleId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasSolvedPuzzle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRatings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathUD60x18__Exp2InputTooBig(uint256)\":[{\"notice\":\"Emitted when the input is greater than 192.\"}],\"PRBMathUD60x18__LogInputTooSmall(uint256)\":[{\"notice\":\"Emitted when the input is less than 1.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Board.sol\":\"Board\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Board.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {Elo} from \\\"./library/Elo.sol\\\";\\nimport {fiveoutofnineART, Chess} from \\\"./art/fiveOutOfNineArt.sol\\\";\\nimport {IBoard} from \\\"./interfaces/IBoard.sol\\\";\\n\\ncontract Board is IBoard, ERC1155, Ownable{\\n    uint256 constant TOKEN_PRICE = 0.02 ether; // Token price of minting an NFT for a solved puzzle\\n    uint256 constant CREATOR_SPLIT = 15; // Percent of token price that goes to creator (e.g. 15 = 15%)\\n    uint256 constant K_FACTOR = 25e18; //  How quickly elo is adjusted\\n    uint256 constant RATING_FLOOR = 100e18; // Minimum rating a person or puzzle can have\\n    uint256 constant DEFAULT_RATING = 1000e18; // Minimum rating a person or puzzle can have\\n    uint16 public puzzleCounter;\\n    uint256 public tokenCount; \\n\\n    struct Puzzle {\\n        string fen;\\n        bytes32 solutionHash; // Hash of the solution\\n        uint256 solveCount; \\n        uint256 attemptCount; \\n        mapping(address => bool) userHasSolved;\\n        mapping(address => bool) userHasAttempted;\\n        uint256 rating;\\n        Chess.Move move; // Used to generate nft art\\n        address creator ;\\n    }\\n\\n    mapping(uint16 => Puzzle) public puzzlesById;\\n    mapping(address => uint256 ) public userRatings;\\n    mapping(uint256 => uint16) public tokenIdToPuzzleId;\\n\\n    error StringCannotBeEmpty(string s);\\n    error BytesCannotBeEmpty(bytes32 b);\\n    error InvalidPuzzle(uint16 puzzleId );\\n    error AlreadyAttempted(uint16 puzzleId);\\n    error PuzzleNotSolved(uint16 puzzleId);\\n    error TokenDoesNotExist(uint256 tokenId);\\n    error NotEnoughEtherSent(uint256 amountSent, uint256 requiredAmount);\\n    error InvalidPuzzleMove(uint16 puzzleId);\\n\\n    constructor(address initialOwner) Ownable(initialOwner) ERC1155(\\\"\\\") {}\\n\\n    function userHasSolvedPuzzle(uint16 puzzleId, address user) public view returns (bool) {\\n        return puzzlesById[puzzleId].userHasSolved[user];\\n    }\\n\\n    function uri(uint256 _tokenId) public view override returns (string memory) {\\n        if(_tokenId >= tokenCount){\\n            revert TokenDoesNotExist(_tokenId);\\n        }\\n        uint16 _puzzleId = tokenIdToPuzzleId[_tokenId];\\n        return fiveoutofnineART.getMetadata(_puzzleId, puzzlesById[_puzzleId].move);\\n    }\\n\\n\\n    function mint(uint16 puzzleId) public payable{\\n        if(msg.value < TOKEN_PRICE){\\n            revert NotEnoughEtherSent(msg.value, TOKEN_PRICE);\\n        }\\n        Puzzle storage puzzle =puzzlesById[puzzleId];\\n        if(!puzzle.userHasSolved[_msgSender()]){\\n            revert PuzzleNotSolved(puzzleId);\\n        }\\n\\n        uint256 tokenCount_ = tokenCount; // Cache for gas savings\\n        tokenIdToPuzzleId[tokenCount_] = puzzleId;\\n        tokenCount = tokenCount_ + 1;\\n        _mint(_msgSender(),  puzzleId, 1, \\\"\\\");\\n        emit TokenMinted(puzzleId, _msgSender(), tokenCount_);\\n        payable(puzzle.creator).transfer(msg.value* CREATOR_SPLIT / 100);\\n    }\\n\\n    function addPuzzle(string memory fen, bytes32 solutionHash, Chess.Move memory move) public{\\n        if(bytes(fen).length == 0){\\n            revert StringCannotBeEmpty(fen);\\n        }\\n        if((solutionHash).length ==0){\\n            revert BytesCannotBeEmpty(solutionHash);\\n        } \\n        if(move.board ==0 || move.metadata==0){\\n            revert InvalidPuzzleMove(puzzleCounter);\\n        }\\n\\n        // Call to ensure that getMetadata is valid\\n        fiveoutofnineART.getMetadata(puzzleCounter, move);\\n\\n        uint16 puzzleId = puzzleCounter;\\n        Puzzle storage puzzle = puzzlesById[puzzleId];\\n        puzzle.fen = fen;\\n        puzzle.solutionHash = solutionHash;\\n        puzzle.creator = _msgSender();\\n        puzzle.rating = DEFAULT_RATING;\\n        puzzle.move = move;\\n        puzzleCounter = puzzleCounter + 1;\\n\\n        emit PuzzleAdded(puzzleId, fen, solutionHash, move.board, move.metadata, _msgSender());\\n    }\\n\\n    function submitSolution(uint16 puzzleId, bytes memory solution) public returns (bool) {\\n        if(puzzleId >= puzzleCounter){\\n            revert InvalidPuzzle(puzzleId);\\n        }\\n\\n        Puzzle storage puzzle = puzzlesById[puzzleId];\\n\\n        if(puzzle.userHasAttempted[_msgSender()]){\\n            revert AlreadyAttempted(puzzleId);\\n        }\\n\\n        \\n        emit PuzzleAttempted(puzzleId, _msgSender(), solution);\\n\\n        puzzle.userHasAttempted[_msgSender()] = true;\\n        puzzle.attemptCount += 1;\\n        // cache ratings for gas savings\\n        uint256 userRating  = userRatings[_msgSender()];\\n        userRating = userRating > 0? userRating : DEFAULT_RATING;\\n        uint256 puzzleRating = puzzle.rating; \\n\\n        if (puzzle.solutionHash == keccak256(solution)) {\\n            puzzle.userHasSolved[_msgSender()] = true;\\n            puzzle.solveCount += 1;\\n            (uint256 ratingAdjustment, ) = Elo.calculateEloUpdate(userRating, puzzleRating, 1e18, K_FACTOR);\\n            userRatings[_msgSender()] = userRating + ratingAdjustment;\\n            if(puzzleRating > RATING_FLOOR + ratingAdjustment){\\n                puzzle.rating = puzzleRating - ratingAdjustment;\\n                emit PuzzleRatingChanged(puzzleId, puzzleRating - ratingAdjustment); \\n            }\\n            else{\\n                puzzle.rating = RATING_FLOOR; \\n                emit PuzzleRatingChanged(puzzleId, RATING_FLOOR);\\n            }\\n\\n            emit PuzzleSolved(puzzleId, _msgSender());\\n            emit UserRatingChanged(_msgSender(), puzzleRating + ratingAdjustment);\\n            return true;\\n        } else {\\n            (uint256 ratingAdjustment, ) = Elo.calculateEloUpdate(userRating, puzzleRating, 0, K_FACTOR);\\n            puzzle.rating = puzzleRating + ratingAdjustment;\\n            if(userRating > RATING_FLOOR + ratingAdjustment){\\n                userRatings[_msgSender()] = userRating - ratingAdjustment;\\n                emit UserRatingChanged(_msgSender(), puzzleRating - ratingAdjustment); \\n            }\\n            else{\\n                userRatings[_msgSender()] = RATING_FLOOR;\\n                emit UserRatingChanged(_msgSender(), RATING_FLOOR); \\n            }\\n\\n            emit PuzzleRatingChanged(puzzleId, puzzleRating + ratingAdjustment);\\n            return false;\\n        }\\n    }\\n\\n    function withdraw() public onlyOwner{\\n        uint256 amount = address(this).balance;\\n        payable(_msgSender()).transfer(amount);\\n        emit Withdraw(_msgSender(), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xba70fd6403ecd23c0dba279229cc3b8ceb8b28d52215c8569dcd2a0e99e7fb95\",\"license\":\"UNLICENSED\"},\"contracts/art/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678\\\" \\\"9+/\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n        string memory table = TABLE;\\n        uint256 encodedLength = ((data.length + 2) / 3) << 2;\\n        string memory result = new string(encodedLength + 0x20);\\n\\n        assembly {\\n            mstore(result, encodedLength)\\n            let tablePtr := add(table, 1)\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            let resultPtr := add(result, 0x20)\\n            for {} lt(dataPtr, endPtr) {} {\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(0x12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(0xC, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(0xF0, 0x3D3D)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(0xF8, 0x3D)) }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x25c0847af52f3c5a19de7e092d52a59d129ddcf3e987854e2c1bbe439d55f9d5\",\"license\":\"MIT\"},\"contracts/art/Chess.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Engine} from \\\"./Engine.sol\\\";\\n\\n/// @title Utils library for fiveoutofnine (a 100% on-chain 6x6 chess engine)\\n/// @author fiveoutofnine\\n/// @dev Understand the representations of the chess pieces, board, and moves very carefully before\\n/// using this library:\\n/// ======================================Piece Representation======================================\\n/// Each chess piece is defined with 4 bits as follows:\\n///     * The first bit denotes the color (0 means black; 1 means white).\\n///     * The last 3 bits denote the type:\\n///         | Bits | # | Type   |\\n///         | ---- | - | ------ |\\n///         | 000  | 0 | Empty  |\\n///         | 001  | 1 | Pawn   |\\n///         | 010  | 2 | Bishop |\\n///         | 011  | 3 | Rook   |\\n///         | 100  | 4 | Knight |\\n///         | 101  | 5 | Queen  |\\n///         | 110  | 6 | King   |\\n/// ======================================Board Representation======================================\\n/// The board is an 8x8 representation of a 6x6 chess board. For efficiency, all information is\\n/// bitpacked into a single uint256. Thus, unlike typical implementations, board positions are\\n/// accessed via bit shifts and bit masks, as opposed to array accesses. Since each piece is 4 bits,\\n/// there are 64 ``indices'' to access: # 256bit interger, 4 bits per piece each 4bits represents a slot on the board\\n///                                     63 62 61 60 59 58 57 56\\n///                                     55 54 53 52 51 50 49 48\\n///                                     47 46 45 44 43 42 41 40\\n///                                     39 38 37 36 35 34 33 32\\n///                                     31 30 29 28 27 26 25 24\\n///                                     23 22 21 20 19 18 17 16\\n///                                     15 14 13 12 11 10 09 08\\n///                                     07 06 05 04 03 02 01 00\\n/// All numbers in the figure above are in decimal representation.\\n/// For example, the piece at index 27 is accessed with ``(board >> (27 << 2)) & 0xF''. \\n\\n/// 00... 0110 # Board with black king at index 00\\n/// 00... 0110 >> 0 << 2 & 1111\\n///  00... 0110 >> 0  =  00...0110 \\n//// 00... 0110 << 2  -> 00 ... 01100  \\n//// 00 ... 0000 1100 & (1111) -> 0000 1100\\n/// \\n/// The top/bottom rows and left/right columns are treated as sentinel rows/columns for efficient\\n/// boundary validation (see {Chess-generateMoves} and {Chess-isValid}). i.e., (63, ..., 56),\\n/// (07, ..., 00), (63, ..., 07), and (56, ..., 00) never contain pieces. Every bit in those rows\\n/// and columns should be ignored, except for the last bit. The last bit denotes whose turn it is to\\n/// play (0 means black's turn; 1 means white's turn). e.g. a potential starting position:\\n///                                Black\\n///                       00 00 00 00 00 00 00 00                    Black\\n///                       00 03 02 05 06 02 03 00                 \\u265c \\u265d \\u265b \\u265a \\u265d \\u265c\\n///                       00 01 01 01 01 01 01 00                 \\u265f \\u265f \\u265f \\u265f \\u265f \\u265f\\n///                       00 00 00 00 00 00 00 00     denotes\\n///                       00 00 00 00 00 00 00 00    the board\\n///                       00 09 09 09 09 09 09 00                 \\u2659 \\u2659 \\u2659 \\u2659 \\u2659 \\u2659\\n///                       00 11 12 13 14 12 11 00                 \\u2656 \\u2658 \\u2655 \\u2654 \\u2658 \\u2656\\n///                       00 00 00 00 00 00 00 01                    White\\n///                                White\\n/// All numbers in the example above are in decimal representation.\\n/// ======================================Move Representation=======================================\\n/// Each move is allocated 12 bits. The first 6 bits are the index the piece is moving from, and the\\n/// last 6 bits are the index the piece is moving to. Since the index representing a square is at\\n/// most 54, 6 bits sufficiently represents any index (0b111111 = 63 > 54). e.g. 1243 denotes a move\\n/// from index 19 to 27 (1243 = (19 << 6) | 27).\\n///\\n/// Since the board is represented by a uint256, consider including ``using Chess for uint256''.\\nlibrary Chess {\\n    using Chess for uint256;\\n    using Chess for Chess.MovesArray;\\n\\n    /// The depth, white's move, and black's move are bitpacked in that order as `metadata` for\\n    /// efficiency. As explained above, 12 bits sufficiently describe a move, so both white's and\\n    /// black's moves are allocated 12 bits each.\\n    struct Move {\\n        uint256 board;\\n        uint256 metadata;\\n    }\\n\\n    /// ``moves'' are bitpacked into uint256s for efficiency. Since every move is defined by at most\\n    /// 12 bits, a uint256 can contain up to 21 moves via bitpacking (21 * 12 = 252 < 256).\\n    /// Therefore, `items` can contain up to 21 * 5 = 105 moves. 105 is a safe upper bound for the\\n    /// number of possible moves a given side may have during a real game, but be wary because there\\n    /// is no formal proof of the upper bound being less than or equal to 105.\\n    struct MovesArray {\\n        uint256 index;\\n        uint256[5] items;\\n    }\\n\\n    /// @notice Takes in a board position, and applies the move `_move` to it.\\n    /// @dev After applying the move, the board's perspective is updated (see {rotate}). Thus,\\n    /// engines with symmterical search algorithms -- like negamax search -- probably work best.\\n    /// @param _board The board to apply the move to.\\n    /// @param _move The move to apply.\\n    /// @return The reversed board after applying `_move` to `_board`.\\n    function applyMove(uint256 _board, uint256 _move) internal pure returns (uint256) {\\n        unchecked {\\n            // Get piece at the from index\\n            uint256 piece = (_board >> ((_move >> 6) << 2)) & 0xF;\\n            // Replace 4 bits at the from index with 0000\\n            _board &= type(uint256).max ^ (0xF << ((_move >> 6) << 2));\\n            // Replace 4 bits at the to index with 0000\\n            _board &= type(uint256).max ^ (0xF << ((_move & 0x3F) << 2));\\n            // Place the piece at the to index\\n            _board |= (piece << ((_move & 0x3F) << 2));\\n\\n            return _board.rotate();\\n        }\\n    }\\n\\n    /// @notice Switches the perspective of the board by reversing its 4-bit subdivisions (e.g.\\n    /// 1100-0011 would become 0011-1100).\\n    /// @dev Since the last bit exchanges positions with the 4th bit, the turn identifier is updated\\n    /// as well.\\n    /// @param _board The board to reverse the perspective on.\\n    /// @return `_board` reversed.\\n    function rotate(uint256 _board) internal pure returns (uint256) {\\n        uint256 rotatedBoard;\\n\\n        unchecked {\\n            for (uint256 i; i < 64; ++i) {\\n                rotatedBoard = (rotatedBoard << 4) | (_board & 0xF);\\n                _board >>= 4;\\n            }\\n        }\\n\\n        return rotatedBoard;\\n    }\\n\\n    /// @notice Generates all possible pseudolegal moves for a given position and color.\\n    /// @dev The last bit denotes which color to generate the moves for (see {Chess}). Also, the\\n    /// function errors if more than 105 moves are found (see {Chess-MovesArray}). All moves are\\n    /// expressed in code as shifts respective to the board's 8x8 representation (see {Chess}).\\n    /// @param _board The board position to generate moves for.\\n    /// @return Bitpacked uint256(s) containing moves.\\n    function generateMoves(uint256 _board) internal pure returns (uint256[5] memory) {\\n        Chess.MovesArray memory movesArray;\\n        uint256 move;\\n        uint256 moveTo;\\n\\n        unchecked {\\n            // `0xDB5D33CB1BADB2BAA99A59238A179D71B69959551349138D30B289` is a mapping of indices\\n            // relative to the 6x6 board to indices relative to the 8x8 representation (see\\n            // {Chess-getAdjustedIndex}).\\n            for (uint256 index = 0xDB5D33CB1BADB2BAA99A59238A179D71B69959551349138D30B289; index != 0; index >>= 6) {\\n                uint256 adjustedIndex = index & 0x3F;\\n                uint256 adjustedBoard = _board >> (adjustedIndex << 2);\\n                uint256 piece = adjustedBoard & 0xF;\\n                // Skip if square is empty or not the color of the board the function call is\\n                // analyzing.\\n                if (piece == 0 || piece >> 3 != _board & 1) continue;\\n                // The first bit can be discarded because the if statement above catches all\\n                // redundant squares.\\n                piece &= 7;\\n\\n                if (piece == 1) {\\n                    // Piece is a pawn.\\n                    // 1 square in front of the pawn is empty.\\n                    if ((adjustedBoard >> 0x20) & 0xF == 0) {\\n                        movesArray.append(adjustedIndex, adjustedIndex + 8);\\n                        // The pawn is in its starting row and 2 squares in front is empty. This\\n                        // must be nested because moving 2 squares would not be valid if there was\\n                        // an obstruction 1 square in front (i.e. pawns can not jump over pieces).\\n                        if (adjustedIndex >> 3 == 2 && (adjustedBoard >> 0x40) & 0xF == 0) {\\n                            movesArray.append(adjustedIndex, adjustedIndex + 0x10);\\n                        }\\n                    }\\n                    // Moving to the right diagonal by 1 captures a piece.\\n                    if (_board.isCapture(adjustedBoard >> 0x1C)) {\\n                        movesArray.append(adjustedIndex, adjustedIndex + 7);\\n                    }\\n                    // Moving to the left diagonal by 1 captures a piece.\\n                    if (_board.isCapture(adjustedBoard >> 0x24)) {\\n                        movesArray.append(adjustedIndex, adjustedIndex + 9);\\n                    }\\n                } else if (piece > 3 && piece & 1 == 0) {\\n                    // Piece is a knight or a king.\\n                    // Knights and kings always only have 8 positions to check relative to their\\n                    // current position, and the relative distances are always the same. For\\n                    // knights, positions to check are \\u00b1{6, 10, 15, 17}. This is bitpacked into\\n                    // `0x060A0F11` to reduce code redundancy. Similarly, the positions to check for\\n                    // kings are \\u00b1{1, 7, 8, 9}, which is `0x01070809` when bitpacked.\\n                    for (move = piece == 4 ? 0x060A0F11 : 0x01070809; move != 0; move >>= 8) {\\n                        if (_board.isValid(moveTo = adjustedIndex + (move & 0xFF))) {\\n                            movesArray.append(adjustedIndex, moveTo);\\n                        }\\n                        if (move <= adjustedIndex && _board.isValid(moveTo = adjustedIndex - (move & 0xFF))) {\\n                            movesArray.append(adjustedIndex, moveTo);\\n                        }\\n                    }\\n                } else {\\n                    // This else block generates moves for all sliding pieces. All of the 8 for\\n                    // loops terminate\\n                    //     * before a sliding piece makes an illegal move\\n                    //     * or after a sliding piece captures a piece.\\n                    if (piece != 2) {\\n                        // Ortholinear pieces (i.e. rook and queen)\\n                        for (move = adjustedIndex + 1; _board.isValid(move); move += 1) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex - 1; _board.isValid(move); move -= 1) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex + 8; _board.isValid(move); move += 8) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex - 8; _board.isValid(move); move -= 8) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                    }\\n                    if (piece != 3) {\\n                        // Diagonal pieces (i.e. bishop and queen)\\n                        for (move = adjustedIndex + 7; _board.isValid(move); move += 7) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex - 7; _board.isValid(move); move -= 7) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex + 9; _board.isValid(move); move += 9) {\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                        for (move = adjustedIndex - 9; _board.isValid(move); move -= 9) {\\n                            // Handles the edge case where a white bishop believes it can capture\\n                            // the ``piece'' at index 0, when it is actually the turn identifier It\\n                            // would mistakenly believe it is valid move via capturing a black pawn.\\n                            if (move == 0) break;\\n                            movesArray.append(adjustedIndex, move);\\n                            if (_board.isCapture(_board >> (move << 2))) break;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        return movesArray.items;\\n    }\\n\\n    /// @notice Determines whether a move is a legal move or not (includes checking whether king is\\n    /// checked or not after the move).\\n    /// @param _board The board to analyze.\\n    /// @param _move The move to check.\\n    /// @return Whether the move is legal or not.\\n    function isLegalMove(uint256 _board, uint256 _move) internal pure returns (bool) {\\n        unchecked {\\n            uint256 fromIndex = _move >> 6;\\n            uint256 toIndex = _move & 0x3F;\\n            if ((0x7E7E7E7E7E7E00 >> fromIndex) & 1 == 0) return false;\\n            if ((0x7E7E7E7E7E7E00 >> toIndex) & 1 == 0) return false;\\n\\n            uint256 pieceAtFromIndex = (_board >> (fromIndex << 2)) & 0xF;\\n            if (pieceAtFromIndex == 0) return false;\\n            if (pieceAtFromIndex >> 3 != _board & 1) return false;\\n            pieceAtFromIndex &= 7;\\n\\n            uint256 adjustedBoard = _board >> (toIndex << 2);\\n            uint256 indexChange = toIndex < fromIndex ? fromIndex - toIndex : toIndex - fromIndex;\\n            if (pieceAtFromIndex == 1) {\\n                if (toIndex <= fromIndex) return false;\\n                indexChange = toIndex - fromIndex;\\n                if ((indexChange == 7 || indexChange == 9)) {\\n                    if (!_board.isCapture(adjustedBoard)) return false;\\n                } else if (indexChange == 8) {\\n                    if (!isValid(_board, toIndex)) return false;\\n                } else if (indexChange == 0x10) {\\n                    if (!isValid(_board, toIndex - 8) || !isValid(_board, toIndex)) return false;\\n                } else {\\n                    return false;\\n                }\\n            } else if (pieceAtFromIndex == 4 || pieceAtFromIndex == 6) {\\n                if (((pieceAtFromIndex == 4 ? 0x28440 : 0x382) >> indexChange) & 1 == 0) {\\n                    return false;\\n                }\\n                if (!isValid(_board, toIndex)) return false;\\n            } else {\\n                bool rayFound;\\n                if (pieceAtFromIndex != 2) {\\n                    rayFound = searchRay(_board, fromIndex, toIndex, 1) || searchRay(_board, fromIndex, toIndex, 8);\\n                }\\n                if (pieceAtFromIndex != 3) {\\n                    rayFound =\\n                        rayFound || searchRay(_board, fromIndex, toIndex, 7) || searchRay(_board, fromIndex, toIndex, 9);\\n                }\\n                if (!rayFound) return false;\\n            }\\n\\n            if (Engine.negaMax(_board.applyMove(_move), 1) < -1_260) return false;\\n\\n            return true;\\n        }\\n    }\\n\\n    /// @notice Determines whether there is a clear path along a direction vector from one index to\\n    /// another index on the board.\\n    /// @dev The board's representation essentially flattens it from 2D to 1D, so `_directionVector`\\n    /// should be the change in index that represents the direction vector.\\n    /// @param _board The board to analyze.\\n    /// @param _fromIndex The index of the starting piece.\\n    /// @param _toIndex The index of the ending piece.\\n    /// @param _directionVector The direction vector of the ray.\\n    /// @return Whether there is a clear path between `_fromIndex` and `_toIndex` or not.\\n    function searchRay(uint256 _board, uint256 _fromIndex, uint256 _toIndex, uint256 _directionVector)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        unchecked {\\n            uint256 indexChange;\\n            uint256 rayStart;\\n            uint256 rayEnd;\\n            if (_fromIndex < _toIndex) {\\n                indexChange = _toIndex - _fromIndex;\\n                rayStart = _fromIndex + _directionVector;\\n                rayEnd = _toIndex;\\n            } else {\\n                indexChange = _fromIndex - _toIndex;\\n                rayStart = _toIndex;\\n                rayEnd = _fromIndex - _directionVector;\\n            }\\n            if (indexChange % _directionVector != 0) return false;\\n\\n            for (rayStart = rayStart; rayStart < rayEnd; rayStart += _directionVector) {\\n                if (!isValid(_board, rayStart)) return false;\\n                if (isCapture(_board, _board >> (rayStart << 2))) return false;\\n            }\\n\\n            if (!isValid(_board, rayStart)) return false;\\n\\n            return rayStart == rayEnd;\\n        }\\n    }\\n\\n    /// @notice Determines whether a move results in a capture or not.\\n    /// @param _board The board prior to the potential capture.\\n    /// @param _indexAdjustedBoard The board bitshifted to the to index to consider.\\n    /// @return Whether the move is a capture or not.\\n    function isCapture(uint256 _board, uint256 _indexAdjustedBoard) internal pure returns (bool) {\\n        unchecked {\\n            return (_indexAdjustedBoard & 0xF) != 0 // The square is not empty.\\n                && (_indexAdjustedBoard & 0xF) >> 3 != _board & 1; // The piece is opposite color.\\n        }\\n    }\\n\\n    /// @notice Determines whether a move is valid or not (i.e. within bounds and not capturing\\n    /// same colored piece).\\n    /// @dev As mentioned above, the board representation has 2 sentinel rows and columns for\\n    /// efficient boundary validation as follows:\\n    ///                                           0 0 0 0 0 0 0 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 1 1 1 1 1 1 0\\n    ///                                           0 0 0 0 0 0 0 0,\\n    /// where 1 means a piece is within the board, and 0 means the piece is out of bounds. The bits\\n    /// are bitpacked into a uint256 (i.e. ``0x7E7E7E7E7E7E00 = 0 << 63 | ... | 0 << 0'') for\\n    /// efficiency.\\n    ///\\n    /// Moves that overflow the uint256 are computed correctly because bitshifting more than bits\\n    /// available results in 0. However, moves that underflow the uint256 (i.e. applying the move\\n    /// results in a negative index) must be checked beforehand.\\n    /// @param _board The board on which to consider whether the move is valid.\\n    /// @param _toIndex The to index of the move.\\n    /// @return Whether the move is valid or not.\\n    function isValid(uint256 _board, uint256 _toIndex) internal pure returns (bool) {\\n        unchecked {\\n            return (0x7E7E7E7E7E7E00 >> _toIndex) & 1 == 1 // Move is within bounds.\\n                && (\\n                    (_board >> (_toIndex << 2)) & 0xF == 0 // Square is empty.\\n                        || (((_board >> (_toIndex << 2)) & 0xF) >> 3) != _board & 1\\n                ); // Piece captured.\\n        }\\n    }\\n\\n    /// @notice Maps an index relative to the 6x6 board to the index relative to the 8x8\\n    /// representation.\\n    /// @dev The indices are mapped as follows:\\n    ///                           35 34 33 32 31 30              54 53 52 51 50 49\\n    ///                           29 28 27 26 25 24              46 45 44 43 42 41\\n    ///                           23 22 21 20 19 18    mapped    38 37 36 35 34 33\\n    ///                           17 16 15 14 13 12      to      30 29 28 27 26 25\\n    ///                           11 10 09 08 07 06              22 21 20 19 18 17\\n    ///                           05 04 03 02 01 00              14 13 12 11 10 09\\n    /// All numbers in the figure above are in decimal representation. The bits are bitpacked into a\\n    /// uint256 (i.e. ``0xDB5D33CB1BADB2BAA99A59238A179D71B69959551349138D30B289 = 54 << (6 * 35) |\\n    /// ... | 9 << (6 * 0)'') for efficiency.\\n    /// @param _index Index relative to the 6x6 board.\\n    /// @return Index relative to the 8x8 representation.\\n    function getAdjustedIndex(uint256 _index) internal pure returns (uint256) {\\n        unchecked {\\n            return ((0xDB5D33CB1BADB2BAA99A59238A179D71B69959551349138D30B289 >> (_index * 6)) & 0x3F);\\n        }\\n    }\\n\\n    /// @notice Appends a move to a {Chess-MovesArray} object.\\n    /// @dev Since each uint256 fits at most 21 moves (see {Chess-MovesArray}), {Chess-append}\\n    /// bitpacks 21 moves per uint256 before moving on to the next uint256.\\n    /// @param _movesArray {Chess-MovesArray} object to append the new move to.\\n    /// @param _fromMoveIndex Index the piece moves from.\\n    /// @param _toMoveIndex Index the piece moves to.\\n    function append(MovesArray memory _movesArray, uint256 _fromMoveIndex, uint256 _toMoveIndex) internal pure {\\n        unchecked {\\n            uint256 currentIndex = _movesArray.index;\\n            uint256 currentPartition = _movesArray.items[currentIndex];\\n\\n            if (currentPartition > (1 << 0xF6)) {\\n                _movesArray.items[++_movesArray.index] = (_fromMoveIndex << 6) | _toMoveIndex;\\n            } else {\\n                _movesArray.items[currentIndex] = (currentPartition << 0xC) | (_fromMoveIndex << 6) | _toMoveIndex;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36b6b2b4e1fab20310d7b68904ca6423f6ce748aea583a99b7733648c6b071b2\",\"license\":\"MIT\"},\"contracts/art/Engine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Chess} from \\\"./Chess.sol\\\";\\n\\n/// @title A 6x6 chess engine with negamax search\\n/// @author fiveoutofnine\\n/// @notice Docstrings below are written from the perspective of black (i.e. written as if the\\n/// engine is always black). However, due to negamax's symmetric nature, the engine may be used for\\n/// white as well.\\nlibrary Engine {\\n    using Chess for uint256;\\n    using Engine for uint256;\\n\\n    /// @notice Searches for the ``best'' move.\\n    /// @dev The ply depth must be at least 3 because game ending scenarios are determined lazily.\\n    /// This is because {generateMoves} generates pseudolegal moves. Consider the following:\\n    ///     1. In the case of white checkmates black, depth 2 is necessary:\\n    ///         * Depth 1: This is the move black plays after considering depth 2.\\n    ///         * Depth 2: Check whether white captures black's king within 1 turn for every such\\n    ///           move. If so, white has checkmated black.\\n    ///     2. In the case of black checkmates white, depth 3 is necessary:\\n    ///         * Depth 1: This is the move black plays after considering depths 2 and 3.\\n    ///         * Depth 2: Generate all pseudolegal moves for white in response to black's move.\\n    ///         * Depth 3: Check whether black captures white's king within 1 turn for every such\\n    ///         * move. If so, black has checkmated white.\\n    /// The minimum depth required to cover all the cases above is 3. For simplicity, stalemates\\n    /// are treated as checkmates.\\n    ///\\n    /// The function returns 0 if the game is over after white's move (no collision with any\\n    /// potentially real moves because 0 is not a valid index), and returns true if the game is over\\n    /// after black's move.\\n    /// @param _board The board position to analyze.\\n    /// @param _depth The ply depth to analyze to. Must be at least 3.\\n    /// @return The best move for the player (denoted by the last bit in `_board`).\\n    /// @return Whether white is checkmated or not.\\n    function searchMove(uint256 _board, uint256 _depth) internal pure returns (uint256, bool) {\\n        uint256[5] memory moves = _board.generateMoves();\\n        if (moves[0] == 0) return (0, false);\\n        // See {Engine-negaMax} for explanation on why `bestScore` is set to -4_196.\\n        int256 bestScore = -4_196;\\n        int256 currentScore;\\n        uint256 bestMove;\\n\\n        unchecked {\\n            for (uint256 i; moves[i] != 0; ++i) {\\n                for (uint256 movePartition = moves[i]; movePartition != 0; movePartition >>= 0xC) {\\n                    currentScore = _board.evaluateMove(movePartition & 0xFFF)\\n                        + negaMax(_board.applyMove(movePartition & 0xFFF), _depth - 1);\\n                    if (currentScore > bestScore) {\\n                        bestScore = currentScore;\\n                        bestMove = movePartition & 0xFFF;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // 1_260 is equivalent to 7 queens (7 * 180 = 1260). Since a king's capture is equivalent to\\n        // an evaluation of 4_000, \\u00b11_260 catches all lines that include the capture of a king.\\n        if (bestScore < -1_260) return (0, false);\\n        return (bestMove, bestScore > 1_260);\\n    }\\n\\n    /// @notice Searches and evaluates moves using a variant of the negamax search algorithm.\\n    /// @dev For efficiency, the function evaluates how good moves are and sums them up, rather than\\n    /// evaluating entire board positions. Thus, the only pruning the algorithm performs is when a\\n    /// king is captured. If a king is captured, it always returns -4,000, which is the king's value\\n    /// (see {Chess}) because there is nothing more to consider.\\n    /// @param _board The board position to analyze.\\n    /// @param _depth The ply depth to analyze to.\\n    /// @return The cumulative score searched to a ply depth of `_depth`, assuming each side picks\\n    /// their ``best'' (as decided by {Engine-evaluateMove}) moves.\\n    function negaMax(uint256 _board, uint256 _depth) internal pure returns (int256) {\\n        // Base case for the recursion.\\n        if (_depth == 0) return 0;\\n        uint256[5] memory moves = _board.generateMoves();\\n        // There is no ``best'' score if there are no moves to play.\\n        if (moves[0] == 0) return 0;\\n        // `bestScore` is initially set to -4_196 because no line will result in a cumulative\\n        // evaluation of <-4_195. -4_195 occurs, for example. when the engine's king is captured\\n        // (-4000), and the player captures an engine's queen on index 35 (-181) with knight from\\n        // index 52 (-14).\\n        int256 bestScore = -4_196;\\n        int256 currentScore;\\n        uint256 bestMove;\\n\\n        unchecked {\\n            for (uint256 i; moves[i] != 0; ++i) {\\n                for (uint256 movePartition = moves[i]; movePartition != 0; movePartition >>= 0xC) {\\n                    currentScore = _board.evaluateMove(movePartition & 0xFFF);\\n                    if (currentScore > bestScore) {\\n                        bestScore = currentScore;\\n                        bestMove = movePartition & 0xFFF;\\n                    }\\n                }\\n            }\\n\\n            // If a king is captured, stop the recursive call stack and return a score of -4_000.\\n            // There is nothing more to consider.\\n            if (((_board >> ((bestMove & 0x3F) << 2)) & 7) == 6) return -4_000;\\n            return _board & 1 == 0\\n                ? bestScore + negaMax(_board.applyMove(bestMove), _depth - 1)\\n                : -bestScore + negaMax(_board.applyMove(bestMove), _depth - 1);\\n        }\\n    }\\n\\n    /// @notice Uses piece-square tables (PSTs) to evaluate how ``good'' a move is.\\n    /// @dev The PSTs were selected semi-arbitrarily with chess strategies in mind (e.g. pawns are\\n    /// good in the center). Updating them changes the way the engine ``thinks.'' Each piece's PST\\n    /// is bitpacked into as few uint256s as possible for efficiency (see {Engine-getPst} and\\n    /// {Engine-getPstTwo}):\\n    ///          Pawn                Bishop               Knight                   Rook\\n    ///    20 20 20 20 20 20    62 64 64 64 64 62    54 56 54 54 56 58    100 100 100 100 100 100\\n    ///    30 30 30 30 30 30    64 66 66 66 66 64    56 60 64 64 60 56    101 102 102 102 102 101\\n    ///    20 22 24 24 22 20    64 67 68 68 67 64    58 64 68 68 64 58     99 100 100 100 100  99\\n    ///    21 20 26 26 20 21    64 68 68 68 68 64    58 65 68 68 65 58     99 100 100 100 100  99\\n    ///    21 30 16 16 30 21    64 67 66 66 67 64    56 60 65 65 60 56     99 100 100 100 100  99\\n    ///    20 20 20 20 20 20    62 64 64 64 64 62    54 56 58 58 56 54    100 100 101 101 100 100\\n    ///                            Queen                         King\\n    ///                   176 178 179 179 178 176    3994 3992 3990 3990 3992 3994\\n    ///                   178 180 180 180 180 178    3994 3992 3990 3990 3992 3994\\n    ///                   179 180 181 181 180 179    3996 3994 3992 3992 3994 3995\\n    ///                   179 181 181 181 180 179    3998 3996 3996 3996 3996 3998\\n    ///                   178 180 181 180 180 178    4001 4001 4000 4000 4001 4001\\n    ///                   176 178 179 179 178 176    4004 4006 4002 4002 4006 4004\\n    /// All entries in the figure above are in decimal representation.\\n    ///\\n    /// Each entry in the pawn's, bishop's, knight's, and rook's PSTs uses 7 bits, and each entry in\\n    /// the queen's and king's PSTs uses 12 bits. Additionally, each piece is valued as following:\\n    ///                                      | Type   | Value |\\n    ///                                      | ------ | ----- |\\n    ///                                      | Pawn   | 20    |\\n    ///                                      | Bishop | 66    |\\n    ///                                      | Knight | 64    |\\n    ///                                      | Rook   | 100   |\\n    ///                                      | Queen  | 180   |\\n    ///                                      | King   | 4000  |\\n    /// The king's value just has to be sufficiently larger than 180 * 7 = 1260 (i.e. equivalent to\\n    /// 7 queens) because check/checkmates are detected lazily (see {Engine-generateMoves}).\\n    ///\\n    /// The evaluation of a move is given by\\n    ///                \\u0394(PST value of the moved piece) + (PST value of any captured pieces).\\n    /// @param _board The board to apply the move to.\\n    /// @param _move The move to evaluate.\\n    /// @return The evaluation of the move applied to the given position.\\n    function evaluateMove(uint256 _board, uint256 _move) internal pure returns (int256) {\\n        unchecked {\\n            uint256 fromIndex = 6 * (_move >> 9) + ((_move >> 6) & 7) - 7;\\n            uint256 toIndex = 6 * ((_move & 0x3F) >> 3) + ((_move & 0x3F) & 7) - 7;\\n            uint256 pieceAtFromIndex = (_board >> ((_move >> 6) << 2)) & 7;\\n            uint256 pieceAtToIndex = (_board >> ((_move & 0x3F) << 2)) & 7;\\n            uint256 oldPst;\\n            uint256 newPst;\\n            uint256 captureValue;\\n\\n            if (pieceAtToIndex != 0) {\\n                if (pieceAtToIndex < 5) {\\n                    // Piece is not a queen or king\\n                    captureValue = (getPst(pieceAtToIndex) >> (7 * (0x23 - toIndex))) & 0x7F;\\n                } else if (toIndex < 0x12) {\\n                    // Piece is queen or king and in the closer half\\n                    captureValue = (getPst(pieceAtToIndex) >> (0xC * (0x11 - toIndex))) & 0xFFF;\\n                } else {\\n                    // Piece is queen or king and in the further half\\n                    captureValue = (getPstTwo(pieceAtToIndex) >> (0xC * (0x23 - toIndex))) & 0xFFF;\\n                }\\n            }\\n            if (pieceAtFromIndex < 5) {\\n                // Piece is not a queen or king\\n                oldPst = (getPst(pieceAtFromIndex) >> (7 * fromIndex)) & 0x7F;\\n                newPst = (getPst(pieceAtFromIndex) >> (7 * toIndex)) & 0x7F;\\n            } else if (fromIndex < 0x12) {\\n                // Piece is queen or king and in the closer half\\n                oldPst = (getPstTwo(pieceAtFromIndex) >> (0xC * fromIndex)) & 0xFFF;\\n                newPst = (getPstTwo(pieceAtFromIndex) >> (0xC * toIndex)) & 0xFFF;\\n            } else {\\n                // Piece is queen or king and in the further half\\n                oldPst = (getPst(pieceAtFromIndex) >> (0xC * (fromIndex - 0x12))) & 0xFFF;\\n                newPst = (getPst(pieceAtFromIndex) >> (0xC * (toIndex - 0x12))) & 0xFFF;\\n            }\\n\\n            return int256(captureValue + newPst) - int256(oldPst);\\n        }\\n    }\\n\\n    /// @notice Maps a given piece type to its PST (see {Engine-evaluateMove} for details on the\\n    /// PSTs and {Chess} for piece representation).\\n    /// @dev The queen's and king's PSTs do not fit in 1 uint256, so their PSTs are split into 2\\n    /// uint256s each. {Chess-getPst} contains the first half, and {Chess-getPstTwo} contains the\\n    /// second half.\\n    /// @param _type A piece type defined in {Chess}.\\n    /// @return The PST corresponding to `_type`.\\n    function getPst(uint256 _type) internal pure returns (uint256) {\\n        if (_type == 1) return 0x2850A142850F1E3C78F1E2858C182C50A943468A152A788103C54A142850A14;\\n        if (_type == 2) return 0x7D0204080FA042850A140810E24487020448912240810E1428701F40810203E;\\n        if (_type == 3) return 0xC993264C9932E6CD9B365C793264C98F1E4C993263C793264C98F264CB97264;\\n        if (_type == 4) return 0x6CE1B3670E9C3C8101E38750224480E9D4189120BA70F20C178E1B3874E9C36;\\n        if (_type == 5) return 0xB00B20B30B30B20B00B20B40B40B40B40B20B30B40B50B50B40B3;\\n        return 0xF9AF98F96F96F98F9AF9AF98F96F96F98F9AF9CF9AF98F98F9AF9B;\\n    }\\n\\n    /// @notice Maps a queen or king to the second half of its PST (see {Engine-getPst}).\\n    /// @param _type A piece type defined in {Chess}. Must be a queen or a king (see\\n    /// {Engine-getPst}).\\n    /// @return The PST corresponding to `_type`.\\n    function getPstTwo(uint256 _type) internal pure returns (uint256) {\\n        return _type == 5\\n            ? 0xB30B50B50B50B40B30B20B40B50B40B40B20B00B20B30B30B20B0\\n            : 0xF9EF9CF9CF9CF9CF9EFA1FA1FA0FA0FA1FA1FA4FA6FA2FA2FA6FA4;\\n    }\\n}\\n\",\"keccak256\":\"0x24b6c04e979009764986495c2ae1003c09a1376907e89d1138e9a3b41fdee9ab\",\"license\":\"MIT\"},\"contracts/art/fiveOutOfNineArt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Chess} from \\\"./Chess.sol\\\";\\nimport {Base64} from \\\"./Base64.sol\\\";\\n\\n/// @title A library that generates HTML art for fiveoutofnine (an on-chain 6x6 chess engine)\\n/// @author fiveoutofnine\\n/// @notice Below details how the metadata and art are generated:\\n/// ==============================================Name==============================================\\n/// Expressed as Python3 f-strings below, token names generate as\\n///                     ``f\\\"fiveoutofnine - Game #{game_id}, Move #{move_id}\\\"''.\\n/// ==========================================Description===========================================\\n/// Token descriptions describe white's move in algebraic notation and black's move in algebraic\\n/// notation. If white's move results in checkmating black or a stalemate, the description will say\\n/// black resigned (for simplicity, stalemates are treated as checkmates). Since the engine always\\n/// plays black, and the player always plays white, white is indicated as ``Player'', and black is\\n/// indicated as ``fiveoutofnine''. Additionally, for every non game-ending turn, a string graphic\\n/// is generated after the moves' descriptions. An example:\\n///                             Player plays e4 rook captures e5 queen.\\n///                             6 \\u00b7 \\u00b7 \\u265c \\u00b7 \\u265a \\u265c\\n///                             5 \\u00b7 \\u265f \\u00b7 \\u00b7 \\u2656 \\u265f\\n///                             4 \\u265f \\u2659 \\u265f \\u2659 * \\u2659\\n///                             3 \\u2659 \\u00b7 \\u2659 \\u00b7 \\u00b7 \\u00b7\\n///                             2 \\u00b7 \\u00b7 \\u00b7 \\u00b7 \\u2656 \\u00b7\\n///                             1 \\u00b7 \\u2658 \\u00b7 \\u2654 \\u00b7 \\u00b7\\n///                               a b c d e f\\n///\\n///                             fiveoutofnine resigns.\\n/// * indicates the square the piece moved from.\\n/// ==============================================Art===============================================\\n/// The art is generated as HTML code with in-line CSS (0 JS) according to the following table:\\n///  | Property       | Name      | Value/Description                       | Determination       |\\n///  | ============== | ========= | ======================================= | =================== |\\n///  | Dimension      | 1 \\u00d7 1     | 1 \\u00d7 1 pillars                           | Player moved king   |\\n///  | (6 traits)     | 2 \\u00d7 2     | 2 \\u00d7 2 pillars                           | Player moved rook   |\\n///  |                | 3 \\u00d7 3     | 3 \\u00d7 3 pillars                           | Engine moved bishop |\\n///  |                | 4 \\u00d7 4     | 4 \\u00d7 4 pillars                           | Player moved knight |\\n///  |                | 6 \\u00d7 6     | 6 \\u00d7 6 pillars                           | Player moved pawn   |\\n///  |                | 12 \\u00d7 12   | 12 \\u00d7 12 pillars                         | Player moved queen  |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Height         | Plane     | 8px pillar height                       | 1 / 64 chance[^0]   |\\n///  | (5 traits)     | 1/4       | 98px pillar height                      | 10 / 64 chance[^0]  |\\n///  |                | 1/2       | 197px pillar height                     | 10 / 64 chance[^0]  |\\n///  |                | Cube      | 394px pillar height                     | 40 / 64 chance[^0]  |\\n///  |                | Infinite  | 1000px pillar height                    | 3 / 64 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Gap[^1]        | None      | 0px gap between the pillars             | 4 / 16 chance[^0]   |\\n///  | (4 traits)     | Narrow    | 2px gap between the pillars             | 9 / 16 chance[^0]   |\\n///  |                | Wide      | 12px gap between the pillars            | 2 / 16 chance[^0]   |\\n///  |                | Ultrawide | 24px gap between the pillars            | 1 / 16 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Color          | Uniform   | All faces are the same color            | 7 / 32 chance[^0]   |\\n///  | Generation[^2] | Shades    | Faces get darker anticlockwise          | 7 / 32 chance[^0]   |\\n///  | (6 traits)     | Tints     | Faces get lighter anticlockwise         | 7 / 32 chance[^0]   |\\n///  |                | Eclipse   | Left face is white; black face is black | 3 / 32 chance[^0]   |\\n///  |                | Void      | Left and right face are black           | 1 / 32 chance[^0]   |\\n///  |                | Curated   | One of 8 color themes (see below)       | 7 / 32 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Color          | Nord      | 0x8FBCBBEBCB8BD087705E81ACB48EAD        | 1 / 8 chance[^0]    |\\n///  | Theme[^3]      | B/W       | 0x000000FFFFFFFFFFFFFFFFFF000000        | 1 / 8 chance[^0]    |\\n///  | (8 traits)     | Candycorn | 0x0D3B66F4D35EEE964BFAF0CAF95738        | 1 / 8 chance[^0]    |\\n///  |                | RGB       | 0xFFFF0000FF000000FFFF0000FFFF00        | 1 / 8 chance[^0]    |\\n///  |                | VSCode    | 0x1E1E1E569CD6D2D1A2BA7FB54DC4AC        | 1 / 8 chance[^0]    |\\n///  |                | Neon      | 0x00FFFFFFFF000000FF00FF00FF00FF        | 1 / 8 chance[^0]    |\\n///  |                | Jungle    | 0xBE3400015045020D22EABAACBE3400        | 1 / 8 chance[^0]    |\\n///  |                | Corn      | 0xF9C233705860211A28346830F9C233        | 1 / 8 chance[^0]    |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Bit Border[^4] | True      | The bits have a 1px solid black border  | Any pieces captured |\\n///  | (2 traits)     | False     | The bits don't have any border          | No pieces captuered |\\n///  | ============== | ========= | ======================================= | =================== |\\n///  | [^0]: Determined from `_seed`.                                                             |\\n///  | [^1]: Gap is omitted when dimension is 1 x 1.                                              |\\n///  | [^2]: The first 5 color generation traits are algorithms. A base color is generated from   |\\n///  | `seed`, and the remaining colors are generated according to the selected algorithm. The    |\\n///  | color of the bits is always the complement of the randomly generated base color, and the   |\\n///  | background color depends on the algorithm:                                                 |\\n///  |     * Uniform: same as the base color;                                                     |\\n///  |     * Shades: darkest shade of the base color;                                             |\\n///  |     * Tints: lightest shade of the base color;                                             |\\n///  |     * Eclipse: same as the base color;                                                     |\\n///  |     * Void: complement of the base color.                                                  |\\n///  | If the selected color generation trait is \\\"Curated,\\\" 1 of 8 pre-curated themes is randomly |\\n///  | selected.                                                                                  |\\n///  | [^3]: The entries in the 3rd column are bitpacked integers where                           |\\n///  |     * the first 24 bits represent the background color,                                    |\\n///  |     * the second 24 bits represent the left face's color,                                  |\\n///  |     * the third 24 bits represent the right face's color,                                  |\\n///  |     * the fourth 24 bits represent the top face's color,                                   |\\n///  |     * and the last 24 bits represent the bits' color.                                      |\\n///  | [^4]: Bit border is omitted when dimension is 12 x 12.                                     |\\nlibrary fiveoutofnineART{\\n    using Strings for uint256;\\n    using Chess for uint256;\\n\\n    string internal constant SVG_STYLES = \\\"--n:calc((394px - (var(--b) - 1)*var(--c))/var(--b));--o\\\"\\n        \\\":calc(106px + var(--n));--p:calc(var(--a)/2)}section{height:var(--a);width:var(--a);backgr\\\"\\n        \\\"ound:var(--e);position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden}.c{height:0;\\\"\\n        \\\"width:0;position:absolute;transition:0.25s}.c:hover{transform:translate(0px,-64px);transit\\\"\\n        \\\"ion:0.25s}.c>*{height:var(--n);width:var(--n);border-bottom:4px solid black;border-right:4\\\"\\n        \\\"px solid black;border-left:1px solid black;border-top:1px solid black;transform-origin:0 0\\\"\\n        \\\";position:relative;box-sizing:border-box}.c>*:nth-child(1){width:var(--d);background-color\\\"\\n        \\\":var(--f);transform:rotate(90deg)skewX(-30deg)scaleY(0.864)}.c>*:nth-child(2){height:var(-\\\"\\n        \\\"-d);bottom:var(--n);background-color:var(--g);transform:rotate(-30deg)skewX(-30deg)scaleY(\\\"\\n        \\\"0.864)}#h{background-color:var(--h)}#i{background-color:var(--i)}.c>*:nth-child(3){bottom:\\\"\\n        \\\"calc(var(--d) + var(--n));background-color:var(--h);display:grid;grid-template-columns:rep\\\" \\\"eat(\\\";\\n    bytes32 internal constant HEXADECIMAL_DIGITS = \\\"0123456789ABCDEF\\\";\\n    bytes32 internal constant FILE_NAMES = \\\"abcdef\\\";\\n\\n    /// @notice Takes in data for a given fiveoutofnine NFT and outputs its metadata in JSON form.\\n    /// Refer to {fiveoutofnineART} for details.\\n    /// @dev The output is base 64-encoded.\\n    /// @param _internalId A bitpacked uint256 where the first 128 bits are the game ID, and the\\n    /// last 128 bits are the move ID within the game.\\n    /// @param _move A struct with information about the player's move and engine's response (see\\n    /// {Chess-Move}).\\n    /// @return Base 64-encoded JSON of metadata generated from `_internalId` and `_move`.\\n    function getMetadata(uint256 _internalId, Chess.Move memory _move) internal pure returns (string memory) {\\n        string memory description;\\n        string memory image;\\n        string memory attributes;\\n        uint256 whiteMove;\\n        uint256 blackMove;\\n        uint256 boardAfterWhiteMove;\\n        uint256 boardAfterBlackMove;\\n        bool whiteCaptures;\\n        bool blackCaptures;\\n        uint256 depth;\\n\\n        {\\n            // whiteMove = (_move.metadata >> 0xC) & 0xFFF;\\n            // blackMove = _move.metadata & 0xFFF;\\n\\n            // boardAfterWhiteMove = _move.board.applyMove(whiteMove);\\n            // boardAfterBlackMove = boardAfterWhiteMove.applyMove(blackMove);\\n\\n            // whiteCaptures = _move.board.isCapture(_move.board >> ((whiteMove & 0x3F) << 2));\\n            // blackCaptures = boardAfterWhiteMove.isCapture(boardAfterWhiteMove >> ((blackMove & 0x3F) << 2));\\n\\n            depth = _move.metadata >> 0x18;\\n        }\\n\\n        {\\n            uint256 numSquares;\\n            {\\n                // uint256 whitePieceType = (_move.board >> ((whiteMove >> 6) << 2)) & 7;\\n                // uint256 blackPieceType = (boardAfterWhiteMove >> ((blackMove >> 6) << 2)) & 7;\\n\\n                numSquares = 6;\\n                // if (whitePieceType == 1) numSquares = 6;\\n                // else if (whitePieceType == 3) numSquares = 2;\\n                // else if (whitePieceType == 4) numSquares = 4;\\n                // else if (whitePieceType == 5) numSquares = 12;\\n                // else numSquares = 1;\\n                // if (blackPieceType == 2) numSquares = 3;\\n            }\\n\\n            uint256 seed = uint256(keccak256(abi.encodePacked(_internalId, boardAfterBlackMove, _move.metadata)));\\n\\n            (image, attributes) = getImage(_move.board, numSquares, seed, whiteCaptures || blackCaptures);\\n        }\\n\\n        // Lots of unusual identation and braces to get around the 16 local variable limitation.\\n        {\\n            // description = string(\\n            //     abi.encodePacked(\\n            //         \\\"---\\\\\\\\n\\\\\\\\n**Player** plays **`\\\",\\n            //         indexToPosition(whiteMove >> 6, true),\\n            //         \\\"` \\\",\\n            //         getPieceName((_move.board >> ((whiteMove >> 6) << 2)) & 7),\\n            //         \\\"**\\\",\\n            //         whiteCaptures ? \\\" captures \\\" : \\\" to \\\",\\n            //         \\\"**`\\\",\\n            //         indexToPosition(whiteMove & 0x3F, true)\\n            //     )\\n            // );\\n        }\\n        {\\n            // description = string(\\n            //     abi.encodePacked(\\n            //         description,\\n            //         \\\"`\\\",\\n            //         whiteCaptures ? \\\" \\\" : \\\"\\\",\\n            //         whiteCaptures ? getPieceName((_move.board >> ((whiteMove & 0x3F) << 2)) & 7) : \\\"\\\",\\n            //         \\\"**.\\\\\\\\n\\\\\\\\n\\\",\\n            //         drawMove(boardAfterWhiteMove, whiteMove >> 6),\\n            //         \\\"\\\\\\\\n\\\\\\\\n---\\\\\\\\n\\\\\\\\n**fiveoutofnine** \\\"\\n            //     )\\n            // );\\n        }\\n\\n        {\\n            // if (blackMove == 0) {\\n            //     description = string(abi.encodePacked(description, \\\"**resigns**.\\\"));\\n            // } else {\\n            //     description = string(\\n            //         abi.encodePacked(\\n            //             description,\\n            //             \\\"responds with **`\\\",\\n            //             indexToPosition(blackMove >> 6, false),\\n            //             \\\"` \\\",\\n            //             getPieceName((boardAfterWhiteMove >> ((blackMove >> 6) << 2)) & 7),\\n            //             \\\"**\\\",\\n            //             blackCaptures ? \\\" captures \\\" : \\\" to \\\",\\n            //             \\\"**`\\\",\\n            //             indexToPosition(blackMove & 0x3F, false),\\n            //             \\\"`\\\",\\n            //             blackCaptures ? \\\" \\\" : \\\"\\\",\\n            //             blackCaptures ? getPieceName((boardAfterWhiteMove >> ((blackMove & 0x3F) << 2)) & 7) : \\\"\\\",\\n            //             \\\"**.\\\\\\\\n\\\\\\\\n\\\",\\n            //             drawMove(boardAfterBlackMove, blackMove >> 6)\\n            //         )\\n            //     );\\n            // }\\n        }\\n\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\":\\\"Game #',\\n                        Strings.toString(_internalId >> 0x80),\\n                        \\\", Move #\\\",\\n                        Strings.toString(uint128(_internalId)),\\n                        '\\\",' '\\\"description\\\":\\\"',\\n                        description,\\n                        '\\\",\\\"animation_url\\\":\\\"data:text/html;base64,',\\n                        image,\\n                        '\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Depth\\\",\\\"value\\\":',\\n                        depth.toString(),\\n                        \\\"},\\\",\\n                        attributes,\\n                        \\\"]}\\\"\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Generates the HTML image and its attributes for a given board/seed according to the\\n    /// table described in {fiveoutofnineART}.\\n    /// @dev The output of the image is base 64-encoded.\\n    /// @param _board The board after the player's and engine's move are played.\\n    /// @param _numSquares The dimension of the board.\\n    /// @param _seed A hash of the game ID, move ID, board position, and metadata.\\n    /// @param _pieceCaptured Whether or not any piees were captured.\\n    /// @return Base 64-encoded image (in HTML) and its attributes.\\n    function getImage(uint256 _board, uint256 _numSquares, uint256 _seed, bool _pieceCaptured)\\n        internal\\n        pure\\n        returns (string memory, string memory)\\n    {\\n        string memory attributes = string(\\n            abi.encodePacked(\\n                '{\\\"trait_type\\\":\\\"Dimension\\\",\\\"value\\\":\\\"',\\n                _numSquares.toString(),\\n                unicode\\\" \\u00d7 \\\",\\n                _numSquares.toString(),\\n                '\\\"}'\\n            )\\n        );\\n        string memory styles = string(abi.encodePacked(\\\"<style>:root{--a:1000px;--b:\\\", _numSquares.toString(), \\\";--c:\\\"));\\n\\n        {\\n            string memory tempAttribute;\\n            string memory tempValue = \\\"0\\\";\\n            if (_numSquares != 1) {\\n                if (_seed & 0xF < 4) (tempAttribute, tempValue) = (\\\"None\\\", \\\"0\\\");\\n                else if (_seed & 0xF < 13) (tempAttribute, tempValue) = (\\\"Narrow\\\", \\\"2\\\");\\n                else if (_seed & 0xF < 15) (tempAttribute, tempValue) = (\\\"Wide\\\", \\\"12\\\");\\n                else (tempAttribute, tempValue) = (\\\"Ultrawide\\\", \\\"24\\\");\\n\\n                attributes = string(abi.encodePacked(attributes, ',{\\\"trait_type\\\":\\\"Gap\\\",\\\"value\\\":\\\"', tempAttribute, '\\\"}'));\\n            }\\n            styles = string(abi.encodePacked(styles, tempValue, \\\"px;--d:\\\"));\\n        }\\n        _seed >>= 4;\\n\\n        {\\n            string memory tempAttribute;\\n            string memory tempValue;\\n            if (_seed & 0x3F < 1) (tempAttribute, tempValue) = (\\\"Plane\\\", \\\"8\\\");\\n            else if (_seed & 0x3F < 11) (tempAttribute, tempValue) = (\\\"1/4\\\", \\\"98\\\");\\n            else if (_seed & 0x3F < 21) (tempAttribute, tempValue) = (\\\"1/2\\\", \\\"197\\\");\\n            else if (_seed & 0x3F < 51) (tempAttribute, tempValue) = (\\\"Cube\\\", \\\"394\\\");\\n            else (tempAttribute, tempValue) = (\\\"Infinite\\\", \\\"1000\\\");\\n\\n            attributes = string(abi.encodePacked(attributes, ',{\\\"trait_type\\\":\\\"Height\\\",\\\"value\\\":\\\"', tempAttribute, '\\\"}'));\\n            styles = string(abi.encodePacked(styles, tempValue, \\\"px;\\\"));\\n        }\\n        _seed >>= 6;\\n\\n        {\\n            string memory tempAttribute;\\n            uint256 colorTheme;\\n            if (_seed & 0x1F < 25) {\\n                colorTheme = (_seed >> 5) & 0xFFFFFF;\\n                attributes = string(\\n                    abi.encodePacked(attributes, ',{\\\"trait_type\\\":\\\"Base Color\\\",\\\"value\\\":', colorTheme.toString(), \\\"}\\\")\\n                );\\n                if (_seed & 0x1F < 7) {\\n                    tempAttribute = \\\"Uniform\\\";\\n                    colorTheme = (colorTheme << 0x60) | (colorTheme << 0x48) | (colorTheme << 0x30)\\n                        | (colorTheme << 0x18) | complementColor(colorTheme);\\n                } else if (_seed & 0x1F < 14) {\\n                    tempAttribute = \\\"Shades\\\";\\n                    colorTheme = (darkenColor(colorTheme, 3) << 0x60) | (darkenColor(colorTheme, 1) << 0x48)\\n                        | (darkenColor(colorTheme, 2) << 0x30) | (colorTheme << 0x18) | complementColor(colorTheme);\\n                } else if (_seed & 0x1F < 21) {\\n                    tempAttribute = \\\"Tints\\\";\\n                    colorTheme = (brightenColor(colorTheme, 3) << 0x60) | (brightenColor(colorTheme, 1) << 0x48)\\n                        | (brightenColor(colorTheme, 2) << 0x30) | (colorTheme << 0x18) | complementColor(colorTheme);\\n                } else if (_seed & 0x1F < 24) {\\n                    tempAttribute = \\\"Eclipse\\\";\\n                    colorTheme =\\n                        (colorTheme << 0x60) | (0xFFFFFF << 0x48) | (colorTheme << 0x18) | complementColor(colorTheme);\\n                } else {\\n                    tempAttribute = \\\"Void\\\";\\n                    colorTheme =\\n                        (complementColor(colorTheme) << 0x60) | (colorTheme << 0x18) | complementColor(colorTheme);\\n                }\\n            } else {\\n                tempAttribute = \\\"Curated\\\";\\n                _seed >>= 5;\\n\\n                attributes = string(\\n                    abi.encodePacked(\\n                        attributes,\\n                        ',{\\\"trait_type\\\":\\\"Color Theme\\\",\\\"value\\\":\\\"',\\n                        [\\\"Nord\\\", \\\"B/W\\\", \\\"Candycorn\\\", \\\"RGB\\\", \\\"VSCode\\\", \\\"Neon\\\", \\\"Jungle\\\", \\\"Corn\\\"][_seed & 7],\\n                        '\\\"}'\\n                    )\\n                );\\n\\n                colorTheme = [\\n                    0x8FBCBBEBCB8BD087705E81ACB48EAD000000FFFFFFFFFFFFFFFFFF000000,\\n                    0x0D3B66F4D35EEE964BFAF0CAF95738FFFF0000FF000000FFFF0000FFFF00,\\n                    0x1E1E1E569CD6D2D1A2BA7FB54DC4AC00FFFFFFFF000000FF00FF00FF00FF,\\n                    0xBE3400015045020D22EABAACBE3400F9C233705860211A28346830F9C233\\n                ][(_seed & 7) >> 1];\\n                colorTheme = _seed & 1 == 0 ? colorTheme >> 0x78 : colorTheme & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            }\\n            attributes =\\n                string(abi.encodePacked(attributes, ',{\\\"trait_type\\\":\\\"Color Generation\\\",\\\"value\\\":\\\"', tempAttribute, '\\\"}'));\\n            styles = string(\\n                abi.encodePacked(\\n                    styles,\\n                    \\\"--e:\\\",\\n                    toColorHexString(colorTheme >> 0x60),\\n                    \\\";--f:\\\",\\n                    toColorHexString((colorTheme >> 0x48) & 0xFFFFFF),\\n                    \\\";--g:\\\",\\n                    toColorHexString((colorTheme >> 0x30) & 0xFFFFFF),\\n                    \\\";--h:\\\",\\n                    toColorHexString((colorTheme >> 0x18) & 0xFFFFFF),\\n                    \\\";--i:\\\",\\n                    toColorHexString(colorTheme & 0xFFFFFF),\\n                    \\\";\\\"\\n                )\\n            );\\n        }\\n\\n        {\\n            string memory tempAttribute;\\n            styles = string(\\n                abi.encodePacked(\\n                    styles,\\n                    SVG_STYLES,\\n                    Strings.toString(12 / _numSquares),\\n                    \\\",1fr);grid-template-rows:repeat(\\\",\\n                    Strings.toString(12 / _numSquares),\\n                    \\\",1fr);transform:rotate(210deg)skew(-30deg)scaleY(0.864)}\\\"\\n                )\\n            );\\n            if (_numSquares != 12) {\\n                if (_pieceCaptured) {\\n                    tempAttribute = \\\"True\\\";\\n                    styles = string(abi.encodePacked(styles, \\\".c>*:nth-child(3)>div{border: 1px solid black}\\\"));\\n                } else {\\n                    tempAttribute = \\\"False\\\";\\n                }\\n                attributes =\\n                    string(abi.encodePacked(attributes, ',{\\\"trait_type\\\":\\\"Bit Border\\\",\\\"value\\\":\\\"', tempAttribute, '\\\"}'));\\n            }\\n        }\\n\\n        unchecked {\\n            for (uint256 i; i < 23; ++i) {\\n                styles = string(\\n                    abi.encodePacked(\\n                        styles,\\n                        \\\".r\\\",\\n                        i.toString(),\\n                        \\\"{top:calc(var(--o) + \\\",\\n                        i.toString(),\\n                        \\\"*(var(--n)/2 + var(--c)))}\\\" \\\".c\\\",\\n                        i.toString(),\\n                        \\\"{left:calc(var(--p) \\\",\\n                        i < 11 ? \\\"-\\\" : \\\"+\\\",\\n                        \\\" 0.866*\\\",\\n                        i < 11 ? (11 - i).toString() : (i - 11).toString(),\\n                        \\\"*(var(--n) + var(--c)))}\\\"\\n                    )\\n                );\\n            }\\n\\n            string memory image;\\n            for (uint256 row; row < (_numSquares << 1) - 1; ++row) {\\n                uint256 tempCol = row <= _numSquares - 1 ? 11 - row : 11 - ((_numSquares << 1) - 2 - row);\\n                for (\\n                    uint256 col = tempCol;\\n                    col\\n                        <= (row <= _numSquares - 1 ? tempCol + (row << 1) : tempCol + (((_numSquares << 1) - 2 - row) << 1));\\n                    col = col + 2\\n                ) {\\n                    image = string(abi.encodePacked(image, getPillarHtml(_board, 12 / _numSquares, row, col)));\\n                }\\n            }\\n\\n            return (Base64.encode(abi.encodePacked(styles, \\\"</style><section>\\\", image, \\\"</section>\\\")), attributes);\\n        }\\n    }\\n\\n    /// @notice Returns the HTML for a particular pillar within the image.\\n    /// @param _board The board after the player's and engine's move are played.\\n    /// @param _dim The dimension of the bits within a pillar.\\n    /// @param _row The row index of the pillar.\\n    /// @param _col The column index of the pillar.\\n    /// @return The HTML for the pillar described by the parameters.\\n    function getPillarHtml(uint256 _board, uint256 _dim, uint256 _row, uint256 _col)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        string memory pillar = string(\\n            abi.encodePacked('<div class=\\\"c r', _row.toString(), \\\" c\\\", _col.toString(), '\\\"><div></div><div></div><div>')\\n        );\\n\\n        uint256 x;\\n        uint256 y;\\n        uint256 colOffset;\\n        uint256 rowOffset;\\n        unchecked {\\n            for (uint256 subRow = _row * _dim + ((_dim - 1) << 1); subRow >= _row * _dim + (_dim - 1); --subRow) {\\n                rowOffset = 0;\\n                uint256 tempSubCol =\\n                    _col <= 11 ? 11 - _dim * (11 - _col) + colOffset : 11 + _dim * (_col - 11) + colOffset;\\n                for (uint256 subCol = tempSubCol; subCol >= tempSubCol + 1 - _dim; --subCol) {\\n                    x = 11 - ((11 + subCol - (subRow - rowOffset)) >> 1);\\n                    y = 16 - ((subCol + subRow - rowOffset) >> 1);\\n                    pillar = string(\\n                        abi.encodePacked(\\n                            pillar,\\n                            '<div id=\\\"',\\n                            (\\n                                _board >> (Chess.getAdjustedIndex(6 * (y >> 1) + (x >> 1)) << 2)\\n                                    >> (((0xD8 >> ((x & 1) << 2)) >> ((y & 1) << 1)) & 3)\\n                            ) & 1 == 0 ? \\\"h\\\" : \\\"i\\\",\\n                            '\\\"></div>'\\n                        )\\n                    );\\n                    rowOffset++;\\n                    if (subCol == 0) break;\\n                }\\n                colOffset++;\\n                if (subRow == 0) break;\\n            }\\n        }\\n\\n        return string(abi.encodePacked(pillar, \\\"</div></div>\\\"));\\n    }\\n\\n    /// @notice Draws out a move being played out on a board position as a string with unicode\\n    /// characters to represent pieces. Files and rows are labeled with standard algebraic\\n    /// notation. For example:\\n    /// ```\\n    /// 6 \\u265c \\u265d \\u265b \\u265a \\u265d \\u265c\\n    /// 5 \\u265f \\u265f \\u265f \\u265f \\u265f \\u265f\\n    /// 4 \\u00b7 \\u00b7 \\u00b7 \\u00b7 \\u00b7 \\u00b7\\n    /// 3 \\u00b7 \\u00b7 \\u2659 \\u00b7 \\u00b7 \\u00b7\\n    /// 2 \\u2659 \\u2659 * \\u2659 \\u2659 \\u2659\\n    /// 1 \\u2656 \\u2658 \\u2655 \\u2654 \\u2658 \\u2656\\n    ///  a b c d e f\\n    /// ```\\n    /// * indicates the square the piece moved from.\\n    /// @param _board The board the move is played on.\\n    /// @param _fromIndex The from index of the move.\\n    /// @return The string showing the move played out on the board.\\n    function drawMove(uint256 _board, uint256 _fromIndex) internal pure returns (string memory) {\\n        string memory boardString = \\\"```\\\\\\\\n\\\";\\n\\n        if (_board & 1 == 0) _board = _board.rotate();\\n        else _fromIndex = ((7 - (_fromIndex >> 3)) << 3) + (7 - (_fromIndex & 7));\\n\\n        for (uint256 index = 0x24A2CC34E4524D455665A6DC75E8628E4966A6AAECB6EC72CF4D76; index != 0; index >>= 6) {\\n            uint256 indexToDraw = index & 0x3F;\\n            boardString = string(\\n                abi.encodePacked(\\n                    boardString,\\n                    indexToDraw & 7 == 6 ? string(abi.encodePacked(Strings.toString((indexToDraw >> 3)), \\\" \\\")) : \\\"\\\",\\n                    indexToDraw == _fromIndex ? \\\"*\\\" : getPieceChar((_board >> (indexToDraw << 2)) & 0xF),\\n                    indexToDraw & 7 == 1 && indexToDraw != 9 ? \\\"\\\\\\\\n\\\" : indexToDraw != 9 ? \\\" \\\" : \\\"\\\"\\n                )\\n            );\\n        }\\n\\n        boardString = string(abi.encodePacked(boardString, \\\"\\\\\\\\n  a b c d e f\\\\\\\\n```\\\"));\\n\\n        return boardString;\\n    }\\n\\n    /// @notice Computes the complement of 24-bit colors.\\n    /// @param _color A 24-bit color.\\n    /// @return The complement of `_color`.\\n    function complementColor(uint256 _color) internal pure returns (uint256) {\\n        unchecked {\\n            return 0xFFFFFF - _color;\\n        }\\n    }\\n\\n    /// @notice Darkens 24-bit colors.\\n    /// @param _color A 24-bit color.\\n    /// @param _num The number of shades to darken by.\\n    /// @return `_color` darkened `_num` times.\\n    function darkenColor(uint256 _color, uint256 _num) internal pure returns (uint256) {\\n        return\\n            (((_color >> 0x10) >> _num) << 0x10) | ((((_color >> 8) & 0xFF) >> _num) << 8) | ((_color & 0xFF) >> _num);\\n    }\\n\\n    /// @notice Brightens 24-bit colors.\\n    /// @param _color A 24-bit color.\\n    /// @param _num The number of tints to brighten by.\\n    /// @return `_color` brightened `_num` times.\\n    function brightenColor(uint256 _color, uint256 _num) internal pure returns (uint256) {\\n        unchecked {\\n            return ((0xFF - ((0xFF - (_color >> 0x10)) >> _num)) << 0x10)\\n                | ((0xFF - ((0xFF - ((_color >> 8) & 0xFF)) >> _num)) << 8) | (0xFF - ((0xFF - (_color & 0xFF)) >> _num));\\n        }\\n    }\\n\\n    /// @notice Returns the color hex string of a 24-bit color.\\n    /// @param _integer A 24-bit color.\\n    /// @return The color hex string of `_integer`.\\n    function toColorHexString(uint256 _integer) internal pure returns (string memory) {\\n        return string(\\n            abi.encodePacked(\\n                \\\"#\\\",\\n                HEXADECIMAL_DIGITS[(_integer >> 0x14) & 0xF],\\n                HEXADECIMAL_DIGITS[(_integer >> 0x10) & 0xF],\\n                HEXADECIMAL_DIGITS[(_integer >> 0xC) & 0xF],\\n                HEXADECIMAL_DIGITS[(_integer >> 8) & 0xF],\\n                HEXADECIMAL_DIGITS[(_integer >> 4) & 0xF],\\n                HEXADECIMAL_DIGITS[_integer & 0xF]\\n            )\\n        );\\n    }\\n\\n    /// @notice Maps piece type to its corresponding name.\\n    /// @param _type A piece type defined in {Chess}.\\n    /// @return The name corresponding to `_type`.\\n    function getPieceName(uint256 _type) internal pure returns (string memory) {\\n        if (_type == 1) return \\\"pawn\\\";\\n        else if (_type == 2) return \\\"bishop\\\";\\n        else if (_type == 3) return \\\"rook\\\";\\n        else if (_type == 4) return \\\"knight\\\";\\n        else if (_type == 5) return \\\"queen\\\";\\n        return \\\"king\\\";\\n    }\\n\\n    /// @notice Converts a position's index to algebraic notation.\\n    /// @param _index The index of the position.\\n    /// @param _isWhite Whether the piece is being determined for a white piece or not.\\n    /// @return The algebraic notation of `_index`.\\n    function indexToPosition(uint256 _index, bool _isWhite) internal pure returns (string memory) {\\n        unchecked {\\n            return _isWhite\\n                ? string(abi.encodePacked(FILE_NAMES[6 - (_index & 7)], Strings.toString(_index >> 3)))\\n                : string(abi.encodePacked(FILE_NAMES[(_index & 7) - 1], Strings.toString(7 - (_index >> 3))));\\n        }\\n    }\\n\\n    /// @notice Maps pieces to its corresponding unicode character.\\n    /// @param _piece A piece.\\n    /// @return The unicode character corresponding to `_piece`. It returns ``.'' otherwise.\\n    function getPieceChar(uint256 _piece) internal pure returns (string memory) {\\n        if (_piece == 1) return unicode\\\"\\u265f\\\";\\n        if (_piece == 2) return unicode\\\"\\u265d\\\";\\n        if (_piece == 3) return unicode\\\"\\u265c\\\";\\n        if (_piece == 4) return unicode\\\"\\u265e\\\";\\n        if (_piece == 5) return unicode\\\"\\u265b\\\";\\n        if (_piece == 6) return unicode\\\"\\u265a\\\";\\n        if (_piece == 9) return unicode\\\"\\u2659\\\";\\n        if (_piece == 0xA) return unicode\\\"\\u2657\\\";\\n        if (_piece == 0xB) return unicode\\\"\\u2656\\\";\\n        if (_piece == 0xC) return unicode\\\"\\u2658\\\";\\n        if (_piece == 0xD) return unicode\\\"\\u2655\\\";\\n        if (_piece == 0xE) return unicode\\\"\\u2654\\\";\\n        return unicode\\\"\\u00b7\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xc45ea63fffd4ea11c70de4d5142f4e72d2fb638f3269f4923c8590f09530403c\",\"license\":\"MIT\"},\"contracts/interfaces/IBoard.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Chess} from \\\"../art/Chess.sol\\\";\\n\\ninterface IBoard {\\n    event PuzzleAdded(uint16 puzzleId, string fen, bytes32 solutionHash, uint256 board, uint256 metadata, address creator); \\n    event PuzzleSolved(uint16 puzzleId, address user);\\n    event PuzzleAttempted(uint16 puzzleId, address user, bytes solutionSubmission);\\n    event UserRatingChanged(address user, uint256 newUserRating);\\n    event PuzzleRatingChanged(uint16 puzzleId, uint256 newPuzzleRating);\\n    event TokenMinted(uint16 puzzleId, address solver, uint256 tokenId); \\n    event Withdraw(address owner, uint256 amount);\\n\\n    function userHasSolvedPuzzle(uint16 puzzleId, address user) external view returns (bool);\\n    function mint(uint16 puzzleId) external payable;\\n    function addPuzzle(string memory fen, bytes32 solutionHash, Chess.Move memory move) external;\\n    function submitSolution(uint16 puzzleId, bytes memory solution) external returns (bool);\\n    function withdraw() external;\\n}\\n\",\"keccak256\":\"0x05a921f7d4248a9d4b29d38ca56a8dc69d8e44af8814c18c71133de7c7cd74e5\",\"license\":\"UNLICENSED\"},\"contracts/library/Elo.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\nimport {PRBMathUD60x18} from \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\n/**\\n * @title Elo\\n * @dev Library for calculating Elo ratings. Can be used for any zero-sum.\\n * @dev uses 400 as the rating spread (i.e. every 400 difference in rating between is a factor of 10 difference in  win probability)\\n * @dev All numbers are represented as fixed point numbers with 18 decimals (i.e. D.60.18)\\n */\\n\\nlibrary Elo {\\n\\n    /**\\n     * @dev Calculates how much scores of player A needs to be updated after a batch with player B\\n     * @dev All input and output numbers are represented as fixed point numbers with 18 decimals (i.e. D60.18)\\n     * @dev To get how much B's score needs to be update, take negative of the returned value\\n     * @dev returns the amount that A's elo changes, and a boolean that signifies if it's a negative or positive change\\n     */\\n    function calculateEloUpdate(uint256 ratingA, uint256 ratingB, uint256 scoreA, uint256 k)internal pure returns (uint256 , bool){\\n        uint256 ratingDiff;\\n        bool comparison = ratingA>= ratingB; \\n        if(comparison){\\n            ratingDiff = ratingA - ratingB;\\n        }\\n        else{\\n            ratingDiff =  ratingB - ratingA;\\n        }\\n\\n        uint256 exp = comparison ? \\n            PRBMathUD60x18.div(1e18 , PRBMathUD60x18.pow(10e18, ratingDiff /400)):\\n            PRBMathUD60x18.pow(10e18, ratingDiff /400); \\n\\n        uint256 Ea = PRBMathUD60x18.div(1e18, 1e18 + exp);  // expected value of A at current rating\\n        if(scoreA > Ea){\\n            ratingDiff = PRBMathUD60x18.mul( k, scoreA - Ea);\\n            return (ratingDiff, true);\\n        }\\n        else{\\n            ratingDiff = PRBMathUD60x18.mul( k, Ea - scoreA );\\n            return (ratingDiff, false);\\n        }\\n\\n    }\\n\\n}\",\"keccak256\":\"0xe8db1668874aa967e8a04fe4acfc7829d6864d452bbc9f10e350bd02f123f6d2\",\"license\":\"UNLICENSED\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005138380380620051388339810160408190526200003491620000f7565b6040805160208101909152600081528190620000508162000093565b506001600160a01b0381166200008057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200008b81620000a5565b50506200029a565b6002620000a18282620001ce565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200010a57600080fd5b81516001600160a01b03811681146200012257600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200015457607f821691505b6020821081036200017557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001c957600081815260208120601f850160051c81016020861015620001a45750805b601f850160051c820191505b81811015620001c557828155600101620001b0565b5050505b505050565b81516001600160401b03811115620001ea57620001ea62000129565b6200020281620001fb84546200013f565b846200017b565b602080601f8311600181146200023a5760008415620002215750858301515b600019600386901b1c1916600185901b178555620001c5565b600085815260208120601f198616915b828110156200026b578886015182559484019460019091019084016200024a565b50858210156200028a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b614e8e80620002aa6000396000f3fe6080604052600436106101295760003560e01c80636b750d20116100ab578063a225fa0e1161006f578063a225fa0e14610388578063a22cb465146103aa578063e985e9c5146103ca578063f242432a146103ea578063f2fde38b1461040a578063f70226b11461042a57600080fd5b80636b750d20146102b9578063715018a6146103085780638da5cb5b1461031d578063900f58fc146103455780639f181b5e1461037257600080fd5b80632eb2c2d6116100f25780632eb2c2d6146101f35780633ccfd60b146102135780633f0a32d0146102285780634e1273f41461026c578063654b04681461029957600080fd5b8062fdd58e1461012e57806301ffc9a71461016157806307a79081146101915780630e89341c146101b357806323cf0a22146101e0575b600080fd5b34801561013a57600080fd5b5061014e6101493660046135da565b61045d565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c36600461361a565b610485565b6040519015158152602001610158565b34801561019d57600080fd5b506101b16101ac3660046136d6565b6104d5565b005b3480156101bf57600080fd5b506101d36101ce36600461377f565b61064a565b60405161015891906137e8565b6101b16101ee36600461380d565b6106bc565b3480156101ff57600080fd5b506101b161020e3660046138d7565b610824565b34801561021f57600080fd5b506101b161088b565b34801561023457600080fd5b5061025961024336600461377f565b60076020526000908152604090205461ffff1681565b60405161ffff9091168152602001610158565b34801561027857600080fd5b5061028c610287366004613981565b610909565b6040516101589190613a7c565b3480156102a557600080fd5b506101816102b4366004613a8f565b6109de565b3480156102c557600080fd5b506101816102d4366004613ad3565b61ffff821660009081526005602090815260408083206001600160a01b038516845260040190915290205460ff1692915050565b34801561031457600080fd5b506101b1610e4e565b34801561032957600080fd5b506003546040516001600160a01b039091168152602001610158565b34801561035157600080fd5b5061014e610360366004613b06565b60066020526000908152604090205481565b34801561037e57600080fd5b5061014e60045481565b34801561039457600080fd5b5060035461025990600160a01b900461ffff1681565b3480156103b657600080fd5b506101b16103c5366004613b21565b610e62565b3480156103d657600080fd5b506101816103e5366004613b5d565b610e71565b3480156103f657600080fd5b506101b1610405366004613b79565b610e9f565b34801561041657600080fd5b506101b1610425366004613b06565b610efe565b34801561043657600080fd5b5061044a61044536600461380d565b610f3c565b6040516101589796959493929190613bde565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806104b657506001600160e01b031982166303a24d0760e21b145b8061047f57506301ffc9a760e01b6001600160e01b031983161461047f565b8251600003610502578260405163328f847b60e21b81526004016104f991906137e8565b60405180910390fd5b8051158061051257506020810151155b156105405760035460405163072c061560e41b8152600160a01b90910461ffff1660048201526024016104f9565b60035461055890600160a01b900461ffff1682611020565b50600354600160a01b900461ffff166000818152600560205260409020806105808682613cbd565b506001818101859055600982018054336001600160a01b0319909116179055683635c9adc5dea00000600683015583516007830155602084015160088301556003546105d891600160a01b90910461ffff1690613d93565b600360146101000a81548161ffff021916908361ffff1602179055507f639561b9f5e12f699f692e2c8cc09a327ed8bd5e900ef29772da83ff7e22c888828686866000015187602001516106293390565b60405161063b96959493929190613db5565b60405180910390a15050505050565b606060045482106106715760405163c927e5bf60e01b8152600481018390526024016104f9565b60008281526007602081815260408084205461ffff1680855260058352938190208151808301909252928301548152600890920154908201526106b5908290611020565b9392505050565b66470de4df8200003410156106f35760405163f9309a0960e01b815234600482015266470de4df82000060248201526044016104f9565b61ffff81166000908152600560209081526040808320338452600481019092529091205460ff1661073d57604051632ee8c14360e21b815261ffff831660048201526024016104f9565b6004546000818152600760205260409020805461ffff191661ffff8516179055610768816001613e00565b60045561078b338461ffff1660016040518060200160405280600081525061113b565b6040805161ffff8516815233602082015280820183905290517f929a0234701deda6818d9f2e31098229505c101dc6e0de484a49507c6f309d709181900360600190a160098201546001600160a01b03166108fc60646107ec600f34613e13565b6107f69190613e40565b6040518115909202916000818181858888f1935050505015801561081e573d6000803e3d6000fd5b50505050565b336001600160a01b038616811480159061084557506108438682610e71565b155b156108765760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016104f9565b6108838686868686611198565b505050505050565b6108936111ff565b6040514790339082156108fc029083906000818181858888f193505050501580156108c2573d6000803e3d6000fd5b507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436433604080516001600160a01b039092168252602082018490520160405180910390a150565b6060815183511461093a5781518351604051635b05999160e01b8152600481019290925260248201526044016104f9565b6000835167ffffffffffffffff81111561095657610956613637565b60405190808252806020026020018201604052801561097f578160200160208202803683370190505b50905060005b84518110156109d6576020808202860101516109a99060208084028701015161045d565b8282815181106109bb576109bb613e62565b60209081029190910101526109cf81613e78565b9050610985565b509392505050565b60035460009061ffff600160a01b909104811690841610610a18576040516352648ae360e11b815261ffff841660048201526024016104f9565b61ffff831660009081526005602081815260408084203385529283019091529091205460ff1615610a6257604051631a125fb560e31b815261ffff851660048201526024016104f9565b7f3bc786627964681fbbc2172168162ca45bb5d68e96db44f855a3a6a987798783843385604051610a9593929190613e91565b60405180910390a13360009081526005820160205260408120805460ff1916600190811790915560038301805491929091610ad1908490613e00565b90915550503360009081526006602052604090205480610afa57683635c9adc5dea00000610afc565b805b6006830154855160208701206001850154929350909103610ced573360009081526004840160205260408120805460ff1916600190811790915560028501805491929091610b4b908490613e00565b9091555060009050610b708383670de0b6b3a764000068015af1d78b58c4000061122c565b509050610b7d8184613e00565b33600090815260066020526040902055610ba08168056bc75e2d63100000613e00565b821115610c0457610bb18183613ec8565b60068501557f923f8849d819a2fa106e36b1ee5e33d99a39982cd41e48bbcaf44f069f35e35c87610be28385613ec8565b6040805161ffff909316835260208301919091520160405180910390a1610c54565b68056bc75e2d63100000600685018190556040805161ffff8a16815260208101929092527f923f8849d819a2fa106e36b1ee5e33d99a39982cd41e48bbcaf44f069f35e35c910160405180910390a15b6040805161ffff8916815233602082015281517f7eee44fa2b2cdc0957ce53fe87745683fbde0414d60c0d1dab04a285742c0b91929181900390910190a17f7c9d26a9c3f761e124a1b3f4aaf8fe9deeffa947fbdabd8b085dab884a2a04be33610cbe8385613e00565b604080516001600160a01b03909316835260208301919091520160405180910390a1600194505050505061047f565b6000610d058383600068015af1d78b58c4000061122c565b509050610d128183613e00565b6006850155610d2a8168056bc75e2d63100000613e00565b831115610da157610d3b8184613ec8565b336000818152600660205260409020919091557f7c9d26a9c3f761e124a1b3f4aaf8fe9deeffa947fbdabd8b085dab884a2a04be90610d7a8385613ec8565b604080516001600160a01b03909316835260208301919091520160405180910390a1610df8565b3360008181526006602090815260409182902068056bc75e2d631000009081905582519384529083015280517f7c9d26a9c3f761e124a1b3f4aaf8fe9deeffa947fbdabd8b085dab884a2a04be9281900390910190a15b7f923f8849d819a2fa106e36b1ee5e33d99a39982cd41e48bbcaf44f069f35e35c87610e248385613e00565b6040805161ffff909316835260208301919091520160405180910390a1600094505050505061047f565b610e566111ff565b610e606000611318565b565b610e6d33838361136a565b5050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b0386168114801590610ec05750610ebe8682610e71565b155b15610ef15760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016104f9565b6108838686868686611400565b610f066111ff565b6001600160a01b038116610f3057604051631e4fbdf760e01b8152600060048201526024016104f9565b610f3981611318565b50565b600560205260009081526040902080548190610f5790613c38565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8390613c38565b8015610fd05780601f10610fa557610100808354040283529160200191610fd0565b820191906000526020600020905b815481529060010190602001808311610fb357829003601f168201915b50505060018401546002850154600386015460068701546040805180820190915260078901548152600889015460208201526009909801549697939692955090935091906001600160a01b031687565b606080606080600080600080600080600060188c60200151901c905060006006905060008e868f6020015160405160200161106e939291909283526020830191909152604082015260600190565b6040516020818303038152906040528051906020012060001c90506110a18e600001518383888061109c5750875b61148e565b909b50995061110a91506110ba905060808f901c61204a565b6110d58f6fffffffffffffffffffffffffffffffff1661204a565b8c8c6110e08661204a565b8d6040516020016110f696959493929190613ef7565b6040516020818303038152906040526120dd565b60405160200161111a9190614057565b6040516020818303038152906040529a505050505050505050505092915050565b6001600160a01b03841661116557604051632bfa23e760e11b8152600060048201526024016104f9565b6040805160018082526020820186905281830190815260608201859052608082019092529061088360008784848761223d565b6001600160a01b0384166111c257604051632bfa23e760e11b8152600060048201526024016104f9565b6001600160a01b0385166111eb57604051626a0d4560e21b8152600060048201526024016104f9565b6111f8858585858561223d565b5050505050565b6003546001600160a01b03163314610e605760405163118cdaa760e01b81523360048201526024016104f9565b6000808085871080159061124b576112448789613ec8565b9150611258565b6112558888613ec8565b91505b6000816112815761127c678ac7230489e8000061127761019086613e40565b612290565b6112aa565b6112aa670de0b6b3a76400006112a5678ac7230489e8000061127761019088613e40565b6122d2565b905060006112c4670de0b6b3a76400006112a58482613e00565b9050808811156112f1576112e1876112dc838b613ec8565b6122e7565b95506001945061130f9350505050565b6112ff876112dc8a84613ec8565b95506000945061130f9350505050565b94509492505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166113935760405162ced3e160e81b8152600060048201526024016104f9565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661142a57604051632bfa23e760e11b8152600060048201526024016104f9565b6001600160a01b03851661145357604051626a0d4560e21b8152600060048201526024016104f9565b60408051600180825260208201869052818301908152606082018590526080820190925290611485878784848761223d565b50505050505050565b606080600061149c8661204a565b6114a58761204a565b6040516020016114b692919061409c565b604051602081830303815290604052905060006114d28761204a565b6040516020016114e2919061411f565b60408051601f198184030181528282019091526001808352600360fc1b602084015290925060609190891461164b57600488600f16101561155857505060408051808201825260048152634e6f6e6560e01b602080830191909152825180840190935260018352600360fc1b9083015290611626565b600d88600f1610156115a157505060408051808201825260068152654e6172726f7760d01b602080830191909152825180840190935260018352601960f91b9083015290611626565b600f88600f1610156115e957505060408051808201825260048152635769646560e01b60208083019190915282518084019093526002835261189960f11b9083015290611626565b50506040805180820182526009815268556c7472617769646560b81b602080830191909152825180840190935260028352610c8d60f21b90830152905b8382604051602001611639929190614173565b60405160208183030381529060405293505b828160405160200161165e9291906141da565b60405160208183030381529060405292505050600486901c9550606080600188603f1610156116c35750506040805180820182526005815264506c616e6560d81b602080830191909152825180840190935260018352600760fb1b90830152906117d9565b600b88603f16101561170a57505060408051808201825260038152620c4bcd60ea1b60208083019190915282518084019093526002835261072760f31b90830152906117d9565b601588603f16101561175257505060408051808201825260038082526218979960e91b60208084019190915283518085019094529083526231393760e81b90830152906117d9565b603388603f16101561179b57505060408051808201825260048152634375626560e01b602080830191909152825180840190935260038352620cce4d60ea1b90830152906117d9565b50506040805180820182526008815267496e66696e69746560c01b602080830191909152825180840190935260048352630313030360e41b90830152905b83826040516020016117ec92919061421b565b6040516020818303038152906040529350828160405160200161181092919061428d565b60405160208183030381529060405292505050600686901c955060606000601988601f161015611ad3575062ffffff600588901c168361184f8261204a565b6040516020016118609291906142ca565b6040516020818303038152906040529350600788601f1610156118ca5760405180604001604052806007815260200166556e69666f726d60c81b81525091506118ab8162ffffff0390565b601882901b603083901b604884901b606085901b171717179050611d15565b600e88601f16101561197a576040518060400160405280600681526020016553686164657360d01b81525091506119038162ffffff0390565b601882901b603062010000600160fe1b03600285901c908116613f00821617603f90911617901b604862010000600160ff1b03600186901c908116617f00821617607f90911617901b606062010000600160fd1b03600387901c908116611f00821617601f909116175b901b171717179050611d15565b601588601f161015611a2f576040518060400160405280600581526020016454696e747360d81b81525091506119b28162ffffff0390565b601882901b601083811c60ff908103600281811c8303841b600888811c8516850380841c8603821b92909217858a1686039384901c86031760301b95600185811c8703821b84821c8803841b179085901c87031760481b95606095600390811c820390921b93821c810390921b929092179290911c90031761196d565b601888601f161015611a8a576040518060400160405280600781526020016645636c6970736560c81b8152509150611a698162ffffff0390565b601882901b606083901b6bffffff0000000000000000001717179050611d15565b60405180604001604052806004815260200163159bda5960e21b8152509150611ab58162ffffff0390565b601882901b6060611ac88462ffffff0390565b901b17179050611d15565b60408051808201825260078082526610dd5c985d195960ca1b6020808401919091528351610140810185526004610100820181815263139bdc9960e21b610120840152825285518087018752600380825262422f5760e81b828601528385019190915286518088018852600981526821b0b7323cb1b7b93760b91b818601528388015286518088018852908152622923a160e91b818501526060830152855180870187526006808252655653436f646560d01b82860152608084019190915286518088018852828152632732b7b760e11b8186015260a084015286518088018852908152654a756e676c6560d01b8185015260c0830152855180870190965285526321b7b93760e11b9185019190915260e081019390935260059a909a1c999093508591908a1660088110611c0a57611c0a613e62565b6020020151604051602001611c2092919061433e565b60408051601f198184030181526080830182527d8fbcbbebcb8bd087705e81acb48ead000000ffffffffffffffffff00000083527d0d3b66f4d35eee964bfaf0caf95738ffff0000ff000000ffff0000ffff0060208401527d1e1e1e569cd6d2d1a2ba7fb54dc4ac00ffffffff000000ff00ff00ff00ff918301919091527dbe3400015045020d22eabaacbe3400f9c233705860211a28346830f9c23360608301529450600360018a901c1660048110611cdc57611cdc613e62565b60200201516001600160f01b031690506001881615611d0c57806effffffffffffffffffffffffffffff16611d12565b607881901c5b90505b8382604051602001611d289291906143b5565b604051602081830303815290604052935082611d47606083901c6122f3565b611d59604884901c62ffffff166122f3565b611d6b603085901c62ffffff166122f3565b611d7d601886901c62ffffff166122f3565b611d8b8662ffffff166122f3565b604051602001611da096959493929190614431565b60408051601f198184030181526103e083019091526103c080835290945060609350849250614a996020830139611de0611ddb8b600c613e40565b61204a565b611dee611ddb8c600c613e40565b604051602001611e019493929190614513565b604051602081830303815290604052915087600c14611ea9578515611e6657604051806040016040528060048152602001635472756560e01b815250905081604051602001611e5091906145df565b6040516020818303038152906040529150611e84565b5060408051808201909152600581526446616c736560d81b60208201525b8281604051602001611e97929190614637565b60405160208183030381529060405292505b5060005b6017811015611f685781611ec08261204a565b611ec98361204a565b611ed28461204a565b600b8510611ef957604051806040016040528060018152602001602b60f81b815250611f14565b604051806040016040528060018152602001602d60f81b8152505b600b8610611f2d57611f28600b870361204a565b611f39565b611f3986600b0361204a565b604051602001611f4e969594939291906146ad565b60408051601f198184030181529190529150600101611ead565b50606060005b6001808a901b0381101561202457600060018a03821115611f9b5781600260018c901b0303600b03611fa0565b81600b035b9050805b60018b03831115611fc457600183600260018e901b0303901b8201611fcc565b600183901b82015b811161201a5783611fef8d8d600c81611fe757611fe7613e2a565b048685612470565b6040516020016120009291906147d5565b60408051601f198184030181529190529350600201611fa4565b5050600101611f6e565b5061203b82826040516020016110f6929190614804565b99929850919650505050505050565b606060006120578361264e565b600101905060008167ffffffffffffffff81111561207757612077613637565b6040519080825280601f01601f1916602001820160405280156120a1576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120ab57509392505050565b606081516000036120fc57505060408051602081019091526000815290565b6000604051806060016040528060408152602001614a596040913990506000600260038551600261212d9190613e00565b6121379190613e40565b901b90506000612148826020613e00565b67ffffffffffffffff81111561216057612160613637565b6040519080825280601f01601f19166020018201604052801561218a576020820181803683370190505b509050818152600183018586518101602084015b818310156121f85760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161219e565b60038951066001811461221257600281146122235761222f565b613d3d60f01b60011983015261222f565b603d60f81b6000198301525b509398975050505050505050565b61224985858585612726565b6001600160a01b038416156111f85782513390600103612282576020848101519084015161227b838989858589612943565b5050610883565b610883818787878787612a67565b6000826000036122b85781156122a75760006122b1565b670de0b6b3a76400005b905061047f565b6106b56122cd6122c785612b50565b846122e7565b612c06565b60006106b583670de0b6b3a764000084612c4c565b60006106b58383612d18565b60606f181899199a1a9b1b9c1ca0a121a222a360811b601483901c600f166020811061232157612321613e62565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b601084901c600f166020811061235157612351613e62565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b600c85901c600f166020811061238157612381613e62565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b600886901c600f16602081106123b1576123b1613e62565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b600487901c600f16602081106123e1576123e1613e62565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b87600f166020811061240d5761240d613e62565b604051602360f81b60208201526001600160f81b0319978816602182015295871660228701529386166023860152918516602485015284166025840152901a60f81b90911660268201526027016040516020818303038152906040529050919050565b6060600061247d8461204a565b6124868461204a565b604051602001612497929190614867565b60408051601f19818403018152919052905060008080808789026000198a0160011b015b60018a038a8a0201811061261e57600091506000600b8911156124e85783600b8a038c02600b01016124f4565b8389600b038c02600b03015b9050805b8b826001010381106125fe57600184840382600b0103901c600b03965060018484830103901c601003955087600187600116901b600289600116901b60d8901c901c600316600261257b60018b901c60018b901c60060201603f7adb5d33cb1badb2baa99a59238a179d71b69959551349138d30b28960069092029190911c1690565b901b8f901c901c6001166000146125ab57604051806040016040528060018152602001606960f81b8152506125c6565b604051806040016040528060018152602001600d60fb1b8152505b6040516020016125d79291906148ea565b60408051601f19818403018152919052975060019093019280156125fe57600019016124f8565b506001909301926000829003612614575061261e565b50600019016124bb565b50846040516020016126309190614943565b60405160208183030381529060405295505050505050949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061268d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106126b9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106126d757662386f26fc10000830492506010015b6305f5e10083106126ef576305f5e100830492506008015b612710831061270357612710830492506004015b60648310612715576064830492506002015b600a831061047f5760010192915050565b80518251146127555781518151604051635b05999160e01b8152600481019290925260248201526044016104f9565b3360005b8351811015612864576020818102858101820151908501909101516001600160a01b0388161561280c576000828152602081815260408083206001600160a01b038c168452909152902054818110156127e5576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016104f9565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615612851576000828152602081815260408083206001600160a01b038b1684529091528120805483929061284b908490613e00565b90915550505b50508061285d90613e78565b9050612759565b5082516001036128e55760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516128d6929190918252602082015260400190565b60405180910390a450506111f8565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612934929190614973565b60405180910390a45050505050565b6001600160a01b0384163b156108835760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906129879089908990889088908890600401614998565b6020604051808303816000875af19250505080156129c2575060408051601f3d908101601f191682019092526129bf918101906149dd565b60015b612a2b573d8080156129f0576040519150601f19603f3d011682016040523d82523d6000602084013e6129f5565b606091505b508051600003612a2357604051632bfa23e760e11b81526001600160a01b03861660048201526024016104f9565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b1461148557604051632bfa23e760e11b81526001600160a01b03861660048201526024016104f9565b6001600160a01b0384163b156108835760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612aab90899089908890889088906004016149fa565b6020604051808303816000875af1925050508015612ae6575060408051601f3d908101601f19168201909252612ae3918101906149dd565b60015b612b14573d8080156129f0576040519150601f19603f3d011682016040523d82523d6000602084013e6129f5565b6001600160e01b0319811663bc197c8160e01b1461148557604051632bfa23e760e11b81526001600160a01b03861660048201526024016104f9565b6000670de0b6b3a7640000821015612b7e57604051633621413760e21b8152600481018390526024016104f9565b6000612b93670de0b6b3a76400008404612dde565b670de0b6b3a764000081029250905082811c670de0b6b3a763ffff198101612bbc575050919050565b6706f05b59d3b200005b8015612bfe57670de0b6b3a7640000828002049150671bc16d674ec800008210612bf6579283019260019190911c905b60011c612bc6565b505050919050565b6000680a688906bd8b0000008210612c3457604051634a4f26f160e01b8152600481018390526024016104f9565b670de0b6b3a7640000604083901b046106b581612ec7565b6000808060001985870985870292508281108382030391505080600003612c8657838281612c7c57612c7c613e2a565b04925050506106b5565b838110612cb057604051631dcf306360e21b815260048101829052602481018590526044016104f9565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110612d5c5760405163698d9a0160e11b8152600481018290526024016104f9565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff8211905082600003612d9a5780670de0b6b3a764000085040194505050505061047f565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000600160801b8210612dfe57608091821c91612dfb9082613e00565b90505b680100000000000000008210612e2157604091821c91612e1e9082613e00565b90505b6401000000008210612e4057602091821c91612e3d9082613e00565b90505b620100008210612e5d57601091821c91612e5a9082613e00565b90505b6101008210612e7957600891821c91612e769082613e00565b90505b60108210612e9457600491821c91612e919082613e00565b90505b60048210612eaf57600291821c91612eac9082613e00565b90505b60028210612ec25761047f600182613e00565b919050565b600160bf1b678000000000000000821615612eeb5768016a09e667f3bcc9090260401c5b674000000000000000821615612f0a576801306fe0a31b7152df0260401c5b672000000000000000821615612f29576801172b83c7d517adce0260401c5b671000000000000000821615612f485768010b5586cf9890f62a0260401c5b670800000000000000821615612f67576801059b0d31585743ae0260401c5b670400000000000000821615612f8657680102c9a3e778060ee70260401c5b670200000000000000821615612fa55768010163da9fb33356d80260401c5b670100000000000000821615612fc457680100b1afa5abcbed610260401c5b6680000000000000821615612fe25768010058c86da1c09ea20260401c5b6640000000000000821615613000576801002c605e2e8cec500260401c5b662000000000000082161561301e57680100162f3904051fa10260401c5b661000000000000082161561303c576801000b175effdc76ba0260401c5b660800000000000082161561305a57680100058ba01fb9f96d0260401c5b66040000000000008216156130785768010002c5cc37da94920260401c5b6602000000000000821615613096576801000162e525ee05470260401c5b66010000000000008216156130b45768010000b17255775c040260401c5b658000000000008216156130d1576801000058b91b5bc9ae0260401c5b654000000000008216156130ee57680100002c5c89d5ec6d0260401c5b6520000000000082161561310b5768010000162e43f4f8310260401c5b6510000000000082161561312857680100000b1721bcfc9a0260401c5b650800000000008216156131455768010000058b90cf1e6e0260401c5b65040000000000821615613162576801000002c5c863b73f0260401c5b6502000000000082161561317f57680100000162e430e5a20260401c5b6501000000000082161561319c576801000000b1721835510260401c5b6480000000008216156131b857680100000058b90c0b490260401c5b6440000000008216156131d45768010000002c5c8601cc0260401c5b6420000000008216156131f0576801000000162e42fff00260401c5b64100000000082161561320c5768010000000b17217fbb0260401c5b640800000000821615613228576801000000058b90bfce0260401c5b64040000000082161561324457680100000002c5c85fe30260401c5b6402000000008216156132605768010000000162e42ff10260401c5b64010000000082161561327c57680100000000b17217f80260401c5b63800000008216156132975768010000000058b90bfc0260401c5b63400000008216156132b2576801000000002c5c85fe0260401c5b63200000008216156132cd57680100000000162e42ff0260401c5b63100000008216156132e8576801000000000b17217f0260401c5b630800000082161561330357680100000000058b90c00260401c5b630400000082161561331e5768010000000002c5c8600260401c5b6302000000821615613339576801000000000162e4300260401c5b63010000008216156133545768010000000000b172180260401c5b6280000082161561336e576801000000000058b90c0260401c5b6240000082161561338857680100000000002c5c860260401c5b622000008216156133a25768010000000000162e430260401c5b621000008216156133bc57680100000000000b17210260401c5b620800008216156133d65768010000000000058b910260401c5b620400008216156133f0576801000000000002c5c80260401c5b6202000082161561340a57680100000000000162e40260401c5b62010000821615613424576801000000000000b1720260401c5b61800082161561343d57680100000000000058b90260401c5b6140008216156134565768010000000000002c5d0260401c5b61200082161561346f576801000000000000162e0260401c5b6110008216156134885768010000000000000b170260401c5b6108008216156134a1576801000000000000058c0260401c5b6104008216156134ba57680100000000000002c60260401c5b6102008216156134d357680100000000000001630260401c5b6101008216156134ec57680100000000000000b10260401c5b608082161561350457680100000000000000590260401c5b604082161561351c576801000000000000002c0260401c5b602082161561353457680100000000000000160260401c5b601082161561354c576801000000000000000b0260401c5b600882161561356457680100000000000000060260401c5b600482161561357c57680100000000000000030260401c5b600282161561359457680100000000000000010260401c5b60018216156135ac57680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b80356001600160a01b0381168114612ec257600080fd5b600080604083850312156135ed57600080fd5b6135f6836135c3565b946020939093013593505050565b6001600160e01b031981168114610f3957600080fd5b60006020828403121561362c57600080fd5b81356106b581613604565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561367657613676613637565b604052919050565b600067ffffffffffffffff83111561369857613698613637565b6136ab601f8401601f191660200161364d565b90508281528383830111156136bf57600080fd5b828260208301376000602084830101529392505050565b600080600083850360808112156136ec57600080fd5b843567ffffffffffffffff8082111561370457600080fd5b818701915087601f83011261371857600080fd5b6137278883356020850161367e565b9550602087013594506040603f198401121561374257600080fd5b6040519250604083019150828210818311171561376157613761613637565b50604090815285013581526060909401356020850152509093909250565b60006020828403121561379157600080fd5b5035919050565b60005b838110156137b357818101518382015260200161379b565b50506000910152565b600081518084526137d4816020860160208601613798565b601f01601f19169290920160200192915050565b6020815260006106b560208301846137bc565b803561ffff81168114612ec257600080fd5b60006020828403121561381f57600080fd5b6106b5826137fb565b600067ffffffffffffffff82111561384257613842613637565b5060051b60200190565b600082601f83011261385d57600080fd5b8135602061387261386d83613828565b61364d565b82815260059290921b8401810191818101908684111561389157600080fd5b8286015b848110156138ac5780358352918301918301613895565b509695505050505050565b600082601f8301126138c857600080fd5b6106b58383356020850161367e565b600080600080600060a086880312156138ef57600080fd5b6138f8866135c3565b9450613906602087016135c3565b9350604086013567ffffffffffffffff8082111561392357600080fd5b61392f89838a0161384c565b9450606088013591508082111561394557600080fd5b61395189838a0161384c565b9350608088013591508082111561396757600080fd5b50613974888289016138b7565b9150509295509295909350565b6000806040838503121561399457600080fd5b823567ffffffffffffffff808211156139ac57600080fd5b818501915085601f8301126139c057600080fd5b813560206139d061386d83613828565b82815260059290921b840181019181810190898411156139ef57600080fd5b948201945b83861015613a1457613a05866135c3565b825294820194908201906139f4565b96505086013592505080821115613a2a57600080fd5b50613a378582860161384c565b9150509250929050565b600081518084526020808501945080840160005b83811015613a7157815187529582019590820190600101613a55565b509495945050505050565b6020815260006106b56020830184613a41565b60008060408385031215613aa257600080fd5b613aab836137fb565b9150602083013567ffffffffffffffff811115613ac757600080fd5b613a37858286016138b7565b60008060408385031215613ae657600080fd5b613aef836137fb565b9150613afd602084016135c3565b90509250929050565b600060208284031215613b1857600080fd5b6106b5826135c3565b60008060408385031215613b3457600080fd5b613b3d836135c3565b915060208301358015158114613b5257600080fd5b809150509250929050565b60008060408385031215613b7057600080fd5b613aef836135c3565b600080600080600060a08688031215613b9157600080fd5b613b9a866135c3565b9450613ba8602087016135c3565b93506040860135925060608601359150608086013567ffffffffffffffff811115613bd257600080fd5b613974888289016138b7565b6000610100808352613bf28184018b6137bc565b915050876020830152866040830152856060830152846080830152835160a0830152602084015160c083015260018060a01b03831660e083015298975050505050505050565b600181811c90821680613c4c57607f821691505b602082108103613c6c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115613cb857600081815260208120601f850160051c81016020861015613c995750805b601f850160051c820191505b8181101561088357828155600101613ca5565b505050565b815167ffffffffffffffff811115613cd757613cd7613637565b613ceb81613ce58454613c38565b84613c72565b602080601f831160018114613d205760008415613d085750858301515b600019600386901b1c1916600185901b178555610883565b600085815260208120601f198616915b82811015613d4f57888601518255948401946001909101908401613d30565b5085821015613d6d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115613dae57613dae613d7d565b5092915050565b61ffff8716815260c060208201526000613dd260c08301886137bc565b604083019690965250606081019390935260808301919091526001600160a01b031660a09091015292915050565b8082018082111561047f5761047f613d7d565b808202811582820484141761047f5761047f613d7d565b634e487b7160e01b600052601260045260246000fd5b600082613e5d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201613e8a57613e8a613d7d565b5060010190565b61ffff841681526001600160a01b0383166020820152606060408201819052600090613ebf908301846137bc565b95945050505050565b8181038181111561047f5761047f613d7d565b60008151613eed818560208601613798565b9290920192915050565b6e7b226e616d65223a2247616d65202360881b81528651600090613f2281600f850160208c01613798565b672c204d6f7665202360c01b600f918401918201528751613f4a816017840160208c01613798565b701116113232b9b1b934b83a34b7b7111d1160791b601792909101918201528651613f7c816028840160208b01613798565b7f222c22616e696d6174696f6e5f75726c223a22646174613a746578742f68746d60289290910191820152681b0ed8985cd94d8d0b60ba1b60488201528551613fcc816051840160208a01613798565b61404961403b6140356140276140216051868801017f222c2261747472696275746573223a5b7b2274726169745f74797065223a224481526d32b83a341116113b30b63ab2911d60911b6020820152602e0190565b8a613edb565b611f4b60f21b815260020190565b87613edb565b615d7d60f01b815260020190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161408f81601d850160208701613798565b91909101601d0192915050565b7f7b2274726169745f74797065223a2244696d656e73696f6e222c2276616c7565815262111d1160e91b6020820152600083516140e0816023850160208801613798565b6301061cb960e51b6023918401918201528351614104816027840160208801613798565b61227d60f01b60279290910191820152602901949350505050565b7f3c7374796c653e3a726f6f747b2d2d613a3130303070783b2d2d623a0000000081526000825161415781601c850160208701613798565b641d9696b19d60d91b601c939091019283015250602101919050565b60008351614185818460208801613798565b7f2c7b2274726169745f74797065223a22476170222c2276616c7565223a22000090830190815283516141bf81601e840160208801613798565b61227d60f01b601e9290910191820152602001949350505050565b600083516141ec818460208801613798565b835190830190614200818360208801613798565b66383c1d9696b21d60c91b9101908152600701949350505050565b6000835161422d818460208801613798565b80830190507f2c7b2274726169745f74797065223a22486569676874222c2276616c7565223a8152601160f91b60208201528351614272816021840160208801613798565b61227d60f01b60219290910191820152602301949350505050565b6000835161429f818460208801613798565b8351908301906142b3818360208801613798565b6270783b60e81b9101908152600301949350505050565b600083516142dc818460208801613798565b80830190507f2c7b2274726169745f74797065223a224261736520436f6c6f72222c2276616c8152633ab2911d60e11b60208201528351614324816024840160208801613798565b607d60f81b60249290910191820152602501949350505050565b60008351614350818460208801613798565b80830190507f2c7b2274726169745f74797065223a22436f6c6f72205468656d65222c227661815265363ab2911d1160d11b6020820152835161439a816026840160208801613798565b61227d60f01b60269290910191820152602801949350505050565b600083516143c7818460208801613798565b80830190507f2c7b2274726169745f74797065223a22436f6c6f722047656e65726174696f6e81526a1116113b30b63ab2911d1160a91b6020820152835161441681602b840160208801613798565b61227d60f01b602b9290910191820152602d01949350505050565b60008751614443818460208c01613798565b631696b29d60e11b9083019081528751614464816004840160208c01613798565b641d9696b31d60d91b60049290910191820152865161448a816009840160208b01613798565b641d9696b39d60d91b6009929091019182015285516144b081600e840160208a01613798565b641d9696b41d60d91b600e929091019182015284516144d6816013840160208901613798565b641d9696b49d60d91b601392909101918201526145066144f96018830186613edb565b603b60f81b815260010190565b9998505050505050505050565b6000855160206145268285838b01613798565b8651918401916145398184848b01613798565b865192019161454b8184848a01613798565b7f2c316672293b677269642d74656d706c6174652d726f77733a726570656174289201918252845161458281838501848901613798565b7f2c316672293b7472616e73666f726d3a726f746174652832313064656729736b9201908101919091527f6577282d3330646567297363616c655928302e383634297d000000000000000060408201526058019695505050505050565b600082516145f1818460208701613798565b7f2e633e2a3a6e74682d6368696c642833293e6469767b626f726465723a2031709201918252506d7820736f6c696420626c61636b7d60901b6020820152602e01919050565b60008351614649818460208801613798565b80830190507f2c7b2274726169745f74797065223a2242697420426f72646572222c2276616c8152643ab2911d1160d91b60208201528351614692816025840160208801613798565b61227d60f01b60259290910191820152602701949350505050565b600087516146bf818460208c01613798565b61173960f11b90830190815287516146de816002840160208c01613798565b7403dba37b81d31b0b631943b30b9141696b79490159605d1b600292909101918201528651614714816017840160208b01613798565b7f2a28766172282d2d6e292f32202b20766172282d2d632929297d2e6300000000601792909101918201528551614752816033840160208a01613798565b7303db632b33a1d31b0b631943b30b9141696b814960651b603392909101918201528451614787816047840160208901613798565b661018171c1b1b1560c91b604792909101918201526145066147ac604e830186613edb565b7f2a28766172282d2d6e29202b20766172282d2d632929297d0000000000000000815260180190565b600083516147e7818460208801613798565b8351908301906147fb818360208801613798565b01949350505050565b60008351614816818460208801613798565b701e17b9ba3cb6329f1e39b2b1ba34b7b71f60791b9083019081528351614844816011840160208801613798565b691e17b9b2b1ba34b7b71f60b11b60119290910191820152601b01949350505050565b6e1e3234bb1031b630b9b99e9131903960891b8152825160009061489281600f850160208801613798565b61206360f01b600f9184019182015283516148b4816011840160208801613798565b7f223e3c6469763e3c2f6469763e3c6469763e3c2f6469763e3c6469763e00000060119290910191820152602e01949350505050565b600083516148fc818460208801613798565b681e3234bb1034b21e9160b91b9083019081528351614922816009840160208801613798565b67111f1e17b234bb1f60c11b60099290910191820152601101949350505050565b60008251614955818460208701613798565b6b1e17b234bb1f1e17b234bb1f60a11b920191825250600c01919050565b6040815260006149866040830185613a41565b8281036020840152613ebf8185613a41565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906149d2908301846137bc565b979650505050505050565b6000602082840312156149ef57600080fd5b81516106b581613604565b6001600160a01b0386811682528516602082015260a060408201819052600090614a2690830186613a41565b8281036060840152614a388186613a41565b90508281036080840152614a4c81856137bc565b9897505050505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f2d2d6e3a63616c6328283339347078202d2028766172282d2d6229202d2031292a766172282d2d6329292f766172282d2d6229293b2d2d6f3a63616c63283130367078202b20766172282d2d6e29293b2d2d703a63616c6328766172282d2d61292f32297d73656374696f6e7b6865696768743a766172282d2d61293b77696474683a766172282d2d61293b6261636b67726f756e643a766172282d2d65293b706f736974696f6e3a6162736f6c7574653b6c6566743a303b746f703a303b72696768743a303b626f74746f6d3a303b6f766572666c6f773a68696464656e7d2e637b6865696768743a303b77696474683a303b706f736974696f6e3a6162736f6c7574653b7472616e736974696f6e3a302e3235737d2e633a686f7665727b7472616e73666f726d3a7472616e736c617465283070782c2d36347078293b7472616e736974696f6e3a302e3235737d2e633e2a7b6865696768743a766172282d2d6e293b77696474683a766172282d2d6e293b626f726465722d626f74746f6d3a34707820736f6c696420626c61636b3b626f726465722d72696768743a34707820736f6c696420626c61636b3b626f726465722d6c6566743a31707820736f6c696420626c61636b3b626f726465722d746f703a31707820736f6c696420626c61636b3b7472616e73666f726d2d6f726967696e3a3020303b706f736974696f6e3a72656c61746976653b626f782d73697a696e673a626f726465722d626f787d2e633e2a3a6e74682d6368696c642831297b77696474683a766172282d2d64293b6261636b67726f756e642d636f6c6f723a766172282d2d66293b7472616e73666f726d3a726f7461746528393064656729736b657758282d3330646567297363616c655928302e383634297d2e633e2a3a6e74682d6368696c642832297b6865696768743a766172282d2d64293b626f74746f6d3a766172282d2d6e293b6261636b67726f756e642d636f6c6f723a766172282d2d67293b7472616e73666f726d3a726f74617465282d333064656729736b657758282d3330646567297363616c655928302e383634297d23687b6261636b67726f756e642d636f6c6f723a766172282d2d68297d23697b6261636b67726f756e642d636f6c6f723a766172282d2d69297d2e633e2a3a6e74682d6368696c642833297b626f74746f6d3a63616c6328766172282d2d6429202b20766172282d2d6e29293b6261636b67726f756e642d636f6c6f723a766172282d2d68293b646973706c61793a677269643b677269642d74656d706c6174652d636f6c756d6e733a72657065617428a26469706673582212203c704b297f8d593d14b355e50318e0f05e83a65208a236670faf9adad6439f7564736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101295760003560e01c80636b750d20116100ab578063a225fa0e1161006f578063a225fa0e14610388578063a22cb465146103aa578063e985e9c5146103ca578063f242432a146103ea578063f2fde38b1461040a578063f70226b11461042a57600080fd5b80636b750d20146102b9578063715018a6146103085780638da5cb5b1461031d578063900f58fc146103455780639f181b5e1461037257600080fd5b80632eb2c2d6116100f25780632eb2c2d6146101f35780633ccfd60b146102135780633f0a32d0146102285780634e1273f41461026c578063654b04681461029957600080fd5b8062fdd58e1461012e57806301ffc9a71461016157806307a79081146101915780630e89341c146101b357806323cf0a22146101e0575b600080fd5b34801561013a57600080fd5b5061014e6101493660046135da565b61045d565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c36600461361a565b610485565b6040519015158152602001610158565b34801561019d57600080fd5b506101b16101ac3660046136d6565b6104d5565b005b3480156101bf57600080fd5b506101d36101ce36600461377f565b61064a565b60405161015891906137e8565b6101b16101ee36600461380d565b6106bc565b3480156101ff57600080fd5b506101b161020e3660046138d7565b610824565b34801561021f57600080fd5b506101b161088b565b34801561023457600080fd5b5061025961024336600461377f565b60076020526000908152604090205461ffff1681565b60405161ffff9091168152602001610158565b34801561027857600080fd5b5061028c610287366004613981565b610909565b6040516101589190613a7c565b3480156102a557600080fd5b506101816102b4366004613a8f565b6109de565b3480156102c557600080fd5b506101816102d4366004613ad3565b61ffff821660009081526005602090815260408083206001600160a01b038516845260040190915290205460ff1692915050565b34801561031457600080fd5b506101b1610e4e565b34801561032957600080fd5b506003546040516001600160a01b039091168152602001610158565b34801561035157600080fd5b5061014e610360366004613b06565b60066020526000908152604090205481565b34801561037e57600080fd5b5061014e60045481565b34801561039457600080fd5b5060035461025990600160a01b900461ffff1681565b3480156103b657600080fd5b506101b16103c5366004613b21565b610e62565b3480156103d657600080fd5b506101816103e5366004613b5d565b610e71565b3480156103f657600080fd5b506101b1610405366004613b79565b610e9f565b34801561041657600080fd5b506101b1610425366004613b06565b610efe565b34801561043657600080fd5b5061044a61044536600461380d565b610f3c565b6040516101589796959493929190613bde565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806104b657506001600160e01b031982166303a24d0760e21b145b8061047f57506301ffc9a760e01b6001600160e01b031983161461047f565b8251600003610502578260405163328f847b60e21b81526004016104f991906137e8565b60405180910390fd5b8051158061051257506020810151155b156105405760035460405163072c061560e41b8152600160a01b90910461ffff1660048201526024016104f9565b60035461055890600160a01b900461ffff1682611020565b50600354600160a01b900461ffff166000818152600560205260409020806105808682613cbd565b506001818101859055600982018054336001600160a01b0319909116179055683635c9adc5dea00000600683015583516007830155602084015160088301556003546105d891600160a01b90910461ffff1690613d93565b600360146101000a81548161ffff021916908361ffff1602179055507f639561b9f5e12f699f692e2c8cc09a327ed8bd5e900ef29772da83ff7e22c888828686866000015187602001516106293390565b60405161063b96959493929190613db5565b60405180910390a15050505050565b606060045482106106715760405163c927e5bf60e01b8152600481018390526024016104f9565b60008281526007602081815260408084205461ffff1680855260058352938190208151808301909252928301548152600890920154908201526106b5908290611020565b9392505050565b66470de4df8200003410156106f35760405163f9309a0960e01b815234600482015266470de4df82000060248201526044016104f9565b61ffff81166000908152600560209081526040808320338452600481019092529091205460ff1661073d57604051632ee8c14360e21b815261ffff831660048201526024016104f9565b6004546000818152600760205260409020805461ffff191661ffff8516179055610768816001613e00565b60045561078b338461ffff1660016040518060200160405280600081525061113b565b6040805161ffff8516815233602082015280820183905290517f929a0234701deda6818d9f2e31098229505c101dc6e0de484a49507c6f309d709181900360600190a160098201546001600160a01b03166108fc60646107ec600f34613e13565b6107f69190613e40565b6040518115909202916000818181858888f1935050505015801561081e573d6000803e3d6000fd5b50505050565b336001600160a01b038616811480159061084557506108438682610e71565b155b156108765760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016104f9565b6108838686868686611198565b505050505050565b6108936111ff565b6040514790339082156108fc029083906000818181858888f193505050501580156108c2573d6000803e3d6000fd5b507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436433604080516001600160a01b039092168252602082018490520160405180910390a150565b6060815183511461093a5781518351604051635b05999160e01b8152600481019290925260248201526044016104f9565b6000835167ffffffffffffffff81111561095657610956613637565b60405190808252806020026020018201604052801561097f578160200160208202803683370190505b50905060005b84518110156109d6576020808202860101516109a99060208084028701015161045d565b8282815181106109bb576109bb613e62565b60209081029190910101526109cf81613e78565b9050610985565b509392505050565b60035460009061ffff600160a01b909104811690841610610a18576040516352648ae360e11b815261ffff841660048201526024016104f9565b61ffff831660009081526005602081815260408084203385529283019091529091205460ff1615610a6257604051631a125fb560e31b815261ffff851660048201526024016104f9565b7f3bc786627964681fbbc2172168162ca45bb5d68e96db44f855a3a6a987798783843385604051610a9593929190613e91565b60405180910390a13360009081526005820160205260408120805460ff1916600190811790915560038301805491929091610ad1908490613e00565b90915550503360009081526006602052604090205480610afa57683635c9adc5dea00000610afc565b805b6006830154855160208701206001850154929350909103610ced573360009081526004840160205260408120805460ff1916600190811790915560028501805491929091610b4b908490613e00565b9091555060009050610b708383670de0b6b3a764000068015af1d78b58c4000061122c565b509050610b7d8184613e00565b33600090815260066020526040902055610ba08168056bc75e2d63100000613e00565b821115610c0457610bb18183613ec8565b60068501557f923f8849d819a2fa106e36b1ee5e33d99a39982cd41e48bbcaf44f069f35e35c87610be28385613ec8565b6040805161ffff909316835260208301919091520160405180910390a1610c54565b68056bc75e2d63100000600685018190556040805161ffff8a16815260208101929092527f923f8849d819a2fa106e36b1ee5e33d99a39982cd41e48bbcaf44f069f35e35c910160405180910390a15b6040805161ffff8916815233602082015281517f7eee44fa2b2cdc0957ce53fe87745683fbde0414d60c0d1dab04a285742c0b91929181900390910190a17f7c9d26a9c3f761e124a1b3f4aaf8fe9deeffa947fbdabd8b085dab884a2a04be33610cbe8385613e00565b604080516001600160a01b03909316835260208301919091520160405180910390a1600194505050505061047f565b6000610d058383600068015af1d78b58c4000061122c565b509050610d128183613e00565b6006850155610d2a8168056bc75e2d63100000613e00565b831115610da157610d3b8184613ec8565b336000818152600660205260409020919091557f7c9d26a9c3f761e124a1b3f4aaf8fe9deeffa947fbdabd8b085dab884a2a04be90610d7a8385613ec8565b604080516001600160a01b03909316835260208301919091520160405180910390a1610df8565b3360008181526006602090815260409182902068056bc75e2d631000009081905582519384529083015280517f7c9d26a9c3f761e124a1b3f4aaf8fe9deeffa947fbdabd8b085dab884a2a04be9281900390910190a15b7f923f8849d819a2fa106e36b1ee5e33d99a39982cd41e48bbcaf44f069f35e35c87610e248385613e00565b6040805161ffff909316835260208301919091520160405180910390a1600094505050505061047f565b610e566111ff565b610e606000611318565b565b610e6d33838361136a565b5050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b0386168114801590610ec05750610ebe8682610e71565b155b15610ef15760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016104f9565b6108838686868686611400565b610f066111ff565b6001600160a01b038116610f3057604051631e4fbdf760e01b8152600060048201526024016104f9565b610f3981611318565b50565b600560205260009081526040902080548190610f5790613c38565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8390613c38565b8015610fd05780601f10610fa557610100808354040283529160200191610fd0565b820191906000526020600020905b815481529060010190602001808311610fb357829003601f168201915b50505060018401546002850154600386015460068701546040805180820190915260078901548152600889015460208201526009909801549697939692955090935091906001600160a01b031687565b606080606080600080600080600080600060188c60200151901c905060006006905060008e868f6020015160405160200161106e939291909283526020830191909152604082015260600190565b6040516020818303038152906040528051906020012060001c90506110a18e600001518383888061109c5750875b61148e565b909b50995061110a91506110ba905060808f901c61204a565b6110d58f6fffffffffffffffffffffffffffffffff1661204a565b8c8c6110e08661204a565b8d6040516020016110f696959493929190613ef7565b6040516020818303038152906040526120dd565b60405160200161111a9190614057565b6040516020818303038152906040529a505050505050505050505092915050565b6001600160a01b03841661116557604051632bfa23e760e11b8152600060048201526024016104f9565b6040805160018082526020820186905281830190815260608201859052608082019092529061088360008784848761223d565b6001600160a01b0384166111c257604051632bfa23e760e11b8152600060048201526024016104f9565b6001600160a01b0385166111eb57604051626a0d4560e21b8152600060048201526024016104f9565b6111f8858585858561223d565b5050505050565b6003546001600160a01b03163314610e605760405163118cdaa760e01b81523360048201526024016104f9565b6000808085871080159061124b576112448789613ec8565b9150611258565b6112558888613ec8565b91505b6000816112815761127c678ac7230489e8000061127761019086613e40565b612290565b6112aa565b6112aa670de0b6b3a76400006112a5678ac7230489e8000061127761019088613e40565b6122d2565b905060006112c4670de0b6b3a76400006112a58482613e00565b9050808811156112f1576112e1876112dc838b613ec8565b6122e7565b95506001945061130f9350505050565b6112ff876112dc8a84613ec8565b95506000945061130f9350505050565b94509492505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166113935760405162ced3e160e81b8152600060048201526024016104f9565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661142a57604051632bfa23e760e11b8152600060048201526024016104f9565b6001600160a01b03851661145357604051626a0d4560e21b8152600060048201526024016104f9565b60408051600180825260208201869052818301908152606082018590526080820190925290611485878784848761223d565b50505050505050565b606080600061149c8661204a565b6114a58761204a565b6040516020016114b692919061409c565b604051602081830303815290604052905060006114d28761204a565b6040516020016114e2919061411f565b60408051601f198184030181528282019091526001808352600360fc1b602084015290925060609190891461164b57600488600f16101561155857505060408051808201825260048152634e6f6e6560e01b602080830191909152825180840190935260018352600360fc1b9083015290611626565b600d88600f1610156115a157505060408051808201825260068152654e6172726f7760d01b602080830191909152825180840190935260018352601960f91b9083015290611626565b600f88600f1610156115e957505060408051808201825260048152635769646560e01b60208083019190915282518084019093526002835261189960f11b9083015290611626565b50506040805180820182526009815268556c7472617769646560b81b602080830191909152825180840190935260028352610c8d60f21b90830152905b8382604051602001611639929190614173565b60405160208183030381529060405293505b828160405160200161165e9291906141da565b60405160208183030381529060405292505050600486901c9550606080600188603f1610156116c35750506040805180820182526005815264506c616e6560d81b602080830191909152825180840190935260018352600760fb1b90830152906117d9565b600b88603f16101561170a57505060408051808201825260038152620c4bcd60ea1b60208083019190915282518084019093526002835261072760f31b90830152906117d9565b601588603f16101561175257505060408051808201825260038082526218979960e91b60208084019190915283518085019094529083526231393760e81b90830152906117d9565b603388603f16101561179b57505060408051808201825260048152634375626560e01b602080830191909152825180840190935260038352620cce4d60ea1b90830152906117d9565b50506040805180820182526008815267496e66696e69746560c01b602080830191909152825180840190935260048352630313030360e41b90830152905b83826040516020016117ec92919061421b565b6040516020818303038152906040529350828160405160200161181092919061428d565b60405160208183030381529060405292505050600686901c955060606000601988601f161015611ad3575062ffffff600588901c168361184f8261204a565b6040516020016118609291906142ca565b6040516020818303038152906040529350600788601f1610156118ca5760405180604001604052806007815260200166556e69666f726d60c81b81525091506118ab8162ffffff0390565b601882901b603083901b604884901b606085901b171717179050611d15565b600e88601f16101561197a576040518060400160405280600681526020016553686164657360d01b81525091506119038162ffffff0390565b601882901b603062010000600160fe1b03600285901c908116613f00821617603f90911617901b604862010000600160ff1b03600186901c908116617f00821617607f90911617901b606062010000600160fd1b03600387901c908116611f00821617601f909116175b901b171717179050611d15565b601588601f161015611a2f576040518060400160405280600581526020016454696e747360d81b81525091506119b28162ffffff0390565b601882901b601083811c60ff908103600281811c8303841b600888811c8516850380841c8603821b92909217858a1686039384901c86031760301b95600185811c8703821b84821c8803841b179085901c87031760481b95606095600390811c820390921b93821c810390921b929092179290911c90031761196d565b601888601f161015611a8a576040518060400160405280600781526020016645636c6970736560c81b8152509150611a698162ffffff0390565b601882901b606083901b6bffffff0000000000000000001717179050611d15565b60405180604001604052806004815260200163159bda5960e21b8152509150611ab58162ffffff0390565b601882901b6060611ac88462ffffff0390565b901b17179050611d15565b60408051808201825260078082526610dd5c985d195960ca1b6020808401919091528351610140810185526004610100820181815263139bdc9960e21b610120840152825285518087018752600380825262422f5760e81b828601528385019190915286518088018852600981526821b0b7323cb1b7b93760b91b818601528388015286518088018852908152622923a160e91b818501526060830152855180870187526006808252655653436f646560d01b82860152608084019190915286518088018852828152632732b7b760e11b8186015260a084015286518088018852908152654a756e676c6560d01b8185015260c0830152855180870190965285526321b7b93760e11b9185019190915260e081019390935260059a909a1c999093508591908a1660088110611c0a57611c0a613e62565b6020020151604051602001611c2092919061433e565b60408051601f198184030181526080830182527d8fbcbbebcb8bd087705e81acb48ead000000ffffffffffffffffff00000083527d0d3b66f4d35eee964bfaf0caf95738ffff0000ff000000ffff0000ffff0060208401527d1e1e1e569cd6d2d1a2ba7fb54dc4ac00ffffffff000000ff00ff00ff00ff918301919091527dbe3400015045020d22eabaacbe3400f9c233705860211a28346830f9c23360608301529450600360018a901c1660048110611cdc57611cdc613e62565b60200201516001600160f01b031690506001881615611d0c57806effffffffffffffffffffffffffffff16611d12565b607881901c5b90505b8382604051602001611d289291906143b5565b604051602081830303815290604052935082611d47606083901c6122f3565b611d59604884901c62ffffff166122f3565b611d6b603085901c62ffffff166122f3565b611d7d601886901c62ffffff166122f3565b611d8b8662ffffff166122f3565b604051602001611da096959493929190614431565b60408051601f198184030181526103e083019091526103c080835290945060609350849250614a996020830139611de0611ddb8b600c613e40565b61204a565b611dee611ddb8c600c613e40565b604051602001611e019493929190614513565b604051602081830303815290604052915087600c14611ea9578515611e6657604051806040016040528060048152602001635472756560e01b815250905081604051602001611e5091906145df565b6040516020818303038152906040529150611e84565b5060408051808201909152600581526446616c736560d81b60208201525b8281604051602001611e97929190614637565b60405160208183030381529060405292505b5060005b6017811015611f685781611ec08261204a565b611ec98361204a565b611ed28461204a565b600b8510611ef957604051806040016040528060018152602001602b60f81b815250611f14565b604051806040016040528060018152602001602d60f81b8152505b600b8610611f2d57611f28600b870361204a565b611f39565b611f3986600b0361204a565b604051602001611f4e969594939291906146ad565b60408051601f198184030181529190529150600101611ead565b50606060005b6001808a901b0381101561202457600060018a03821115611f9b5781600260018c901b0303600b03611fa0565b81600b035b9050805b60018b03831115611fc457600183600260018e901b0303901b8201611fcc565b600183901b82015b811161201a5783611fef8d8d600c81611fe757611fe7613e2a565b048685612470565b6040516020016120009291906147d5565b60408051601f198184030181529190529350600201611fa4565b5050600101611f6e565b5061203b82826040516020016110f6929190614804565b99929850919650505050505050565b606060006120578361264e565b600101905060008167ffffffffffffffff81111561207757612077613637565b6040519080825280601f01601f1916602001820160405280156120a1576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120ab57509392505050565b606081516000036120fc57505060408051602081019091526000815290565b6000604051806060016040528060408152602001614a596040913990506000600260038551600261212d9190613e00565b6121379190613e40565b901b90506000612148826020613e00565b67ffffffffffffffff81111561216057612160613637565b6040519080825280601f01601f19166020018201604052801561218a576020820181803683370190505b509050818152600183018586518101602084015b818310156121f85760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b9382019390935260040161219e565b60038951066001811461221257600281146122235761222f565b613d3d60f01b60011983015261222f565b603d60f81b6000198301525b509398975050505050505050565b61224985858585612726565b6001600160a01b038416156111f85782513390600103612282576020848101519084015161227b838989858589612943565b5050610883565b610883818787878787612a67565b6000826000036122b85781156122a75760006122b1565b670de0b6b3a76400005b905061047f565b6106b56122cd6122c785612b50565b846122e7565b612c06565b60006106b583670de0b6b3a764000084612c4c565b60006106b58383612d18565b60606f181899199a1a9b1b9c1ca0a121a222a360811b601483901c600f166020811061232157612321613e62565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b601084901c600f166020811061235157612351613e62565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b600c85901c600f166020811061238157612381613e62565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b600886901c600f16602081106123b1576123b1613e62565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b600487901c600f16602081106123e1576123e1613e62565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b87600f166020811061240d5761240d613e62565b604051602360f81b60208201526001600160f81b0319978816602182015295871660228701529386166023860152918516602485015284166025840152901a60f81b90911660268201526027016040516020818303038152906040529050919050565b6060600061247d8461204a565b6124868461204a565b604051602001612497929190614867565b60408051601f19818403018152919052905060008080808789026000198a0160011b015b60018a038a8a0201811061261e57600091506000600b8911156124e85783600b8a038c02600b01016124f4565b8389600b038c02600b03015b9050805b8b826001010381106125fe57600184840382600b0103901c600b03965060018484830103901c601003955087600187600116901b600289600116901b60d8901c901c600316600261257b60018b901c60018b901c60060201603f7adb5d33cb1badb2baa99a59238a179d71b69959551349138d30b28960069092029190911c1690565b901b8f901c901c6001166000146125ab57604051806040016040528060018152602001606960f81b8152506125c6565b604051806040016040528060018152602001600d60fb1b8152505b6040516020016125d79291906148ea565b60408051601f19818403018152919052975060019093019280156125fe57600019016124f8565b506001909301926000829003612614575061261e565b50600019016124bb565b50846040516020016126309190614943565b60405160208183030381529060405295505050505050949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061268d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106126b9576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106126d757662386f26fc10000830492506010015b6305f5e10083106126ef576305f5e100830492506008015b612710831061270357612710830492506004015b60648310612715576064830492506002015b600a831061047f5760010192915050565b80518251146127555781518151604051635b05999160e01b8152600481019290925260248201526044016104f9565b3360005b8351811015612864576020818102858101820151908501909101516001600160a01b0388161561280c576000828152602081815260408083206001600160a01b038c168452909152902054818110156127e5576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016104f9565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615612851576000828152602081815260408083206001600160a01b038b1684529091528120805483929061284b908490613e00565b90915550505b50508061285d90613e78565b9050612759565b5082516001036128e55760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516128d6929190918252602082015260400190565b60405180910390a450506111f8565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612934929190614973565b60405180910390a45050505050565b6001600160a01b0384163b156108835760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906129879089908990889088908890600401614998565b6020604051808303816000875af19250505080156129c2575060408051601f3d908101601f191682019092526129bf918101906149dd565b60015b612a2b573d8080156129f0576040519150601f19603f3d011682016040523d82523d6000602084013e6129f5565b606091505b508051600003612a2357604051632bfa23e760e11b81526001600160a01b03861660048201526024016104f9565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b1461148557604051632bfa23e760e11b81526001600160a01b03861660048201526024016104f9565b6001600160a01b0384163b156108835760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612aab90899089908890889088906004016149fa565b6020604051808303816000875af1925050508015612ae6575060408051601f3d908101601f19168201909252612ae3918101906149dd565b60015b612b14573d8080156129f0576040519150601f19603f3d011682016040523d82523d6000602084013e6129f5565b6001600160e01b0319811663bc197c8160e01b1461148557604051632bfa23e760e11b81526001600160a01b03861660048201526024016104f9565b6000670de0b6b3a7640000821015612b7e57604051633621413760e21b8152600481018390526024016104f9565b6000612b93670de0b6b3a76400008404612dde565b670de0b6b3a764000081029250905082811c670de0b6b3a763ffff198101612bbc575050919050565b6706f05b59d3b200005b8015612bfe57670de0b6b3a7640000828002049150671bc16d674ec800008210612bf6579283019260019190911c905b60011c612bc6565b505050919050565b6000680a688906bd8b0000008210612c3457604051634a4f26f160e01b8152600481018390526024016104f9565b670de0b6b3a7640000604083901b046106b581612ec7565b6000808060001985870985870292508281108382030391505080600003612c8657838281612c7c57612c7c613e2a565b04925050506106b5565b838110612cb057604051631dcf306360e21b815260048101829052602481018590526044016104f9565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110612d5c5760405163698d9a0160e11b8152600481018290526024016104f9565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff8211905082600003612d9a5780670de0b6b3a764000085040194505050505061047f565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000600160801b8210612dfe57608091821c91612dfb9082613e00565b90505b680100000000000000008210612e2157604091821c91612e1e9082613e00565b90505b6401000000008210612e4057602091821c91612e3d9082613e00565b90505b620100008210612e5d57601091821c91612e5a9082613e00565b90505b6101008210612e7957600891821c91612e769082613e00565b90505b60108210612e9457600491821c91612e919082613e00565b90505b60048210612eaf57600291821c91612eac9082613e00565b90505b60028210612ec25761047f600182613e00565b919050565b600160bf1b678000000000000000821615612eeb5768016a09e667f3bcc9090260401c5b674000000000000000821615612f0a576801306fe0a31b7152df0260401c5b672000000000000000821615612f29576801172b83c7d517adce0260401c5b671000000000000000821615612f485768010b5586cf9890f62a0260401c5b670800000000000000821615612f67576801059b0d31585743ae0260401c5b670400000000000000821615612f8657680102c9a3e778060ee70260401c5b670200000000000000821615612fa55768010163da9fb33356d80260401c5b670100000000000000821615612fc457680100b1afa5abcbed610260401c5b6680000000000000821615612fe25768010058c86da1c09ea20260401c5b6640000000000000821615613000576801002c605e2e8cec500260401c5b662000000000000082161561301e57680100162f3904051fa10260401c5b661000000000000082161561303c576801000b175effdc76ba0260401c5b660800000000000082161561305a57680100058ba01fb9f96d0260401c5b66040000000000008216156130785768010002c5cc37da94920260401c5b6602000000000000821615613096576801000162e525ee05470260401c5b66010000000000008216156130b45768010000b17255775c040260401c5b658000000000008216156130d1576801000058b91b5bc9ae0260401c5b654000000000008216156130ee57680100002c5c89d5ec6d0260401c5b6520000000000082161561310b5768010000162e43f4f8310260401c5b6510000000000082161561312857680100000b1721bcfc9a0260401c5b650800000000008216156131455768010000058b90cf1e6e0260401c5b65040000000000821615613162576801000002c5c863b73f0260401c5b6502000000000082161561317f57680100000162e430e5a20260401c5b6501000000000082161561319c576801000000b1721835510260401c5b6480000000008216156131b857680100000058b90c0b490260401c5b6440000000008216156131d45768010000002c5c8601cc0260401c5b6420000000008216156131f0576801000000162e42fff00260401c5b64100000000082161561320c5768010000000b17217fbb0260401c5b640800000000821615613228576801000000058b90bfce0260401c5b64040000000082161561324457680100000002c5c85fe30260401c5b6402000000008216156132605768010000000162e42ff10260401c5b64010000000082161561327c57680100000000b17217f80260401c5b63800000008216156132975768010000000058b90bfc0260401c5b63400000008216156132b2576801000000002c5c85fe0260401c5b63200000008216156132cd57680100000000162e42ff0260401c5b63100000008216156132e8576801000000000b17217f0260401c5b630800000082161561330357680100000000058b90c00260401c5b630400000082161561331e5768010000000002c5c8600260401c5b6302000000821615613339576801000000000162e4300260401c5b63010000008216156133545768010000000000b172180260401c5b6280000082161561336e576801000000000058b90c0260401c5b6240000082161561338857680100000000002c5c860260401c5b622000008216156133a25768010000000000162e430260401c5b621000008216156133bc57680100000000000b17210260401c5b620800008216156133d65768010000000000058b910260401c5b620400008216156133f0576801000000000002c5c80260401c5b6202000082161561340a57680100000000000162e40260401c5b62010000821615613424576801000000000000b1720260401c5b61800082161561343d57680100000000000058b90260401c5b6140008216156134565768010000000000002c5d0260401c5b61200082161561346f576801000000000000162e0260401c5b6110008216156134885768010000000000000b170260401c5b6108008216156134a1576801000000000000058c0260401c5b6104008216156134ba57680100000000000002c60260401c5b6102008216156134d357680100000000000001630260401c5b6101008216156134ec57680100000000000000b10260401c5b608082161561350457680100000000000000590260401c5b604082161561351c576801000000000000002c0260401c5b602082161561353457680100000000000000160260401c5b601082161561354c576801000000000000000b0260401c5b600882161561356457680100000000000000060260401c5b600482161561357c57680100000000000000030260401c5b600282161561359457680100000000000000010260401c5b60018216156135ac57680100000000000000010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b80356001600160a01b0381168114612ec257600080fd5b600080604083850312156135ed57600080fd5b6135f6836135c3565b946020939093013593505050565b6001600160e01b031981168114610f3957600080fd5b60006020828403121561362c57600080fd5b81356106b581613604565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561367657613676613637565b604052919050565b600067ffffffffffffffff83111561369857613698613637565b6136ab601f8401601f191660200161364d565b90508281528383830111156136bf57600080fd5b828260208301376000602084830101529392505050565b600080600083850360808112156136ec57600080fd5b843567ffffffffffffffff8082111561370457600080fd5b818701915087601f83011261371857600080fd5b6137278883356020850161367e565b9550602087013594506040603f198401121561374257600080fd5b6040519250604083019150828210818311171561376157613761613637565b50604090815285013581526060909401356020850152509093909250565b60006020828403121561379157600080fd5b5035919050565b60005b838110156137b357818101518382015260200161379b565b50506000910152565b600081518084526137d4816020860160208601613798565b601f01601f19169290920160200192915050565b6020815260006106b560208301846137bc565b803561ffff81168114612ec257600080fd5b60006020828403121561381f57600080fd5b6106b5826137fb565b600067ffffffffffffffff82111561384257613842613637565b5060051b60200190565b600082601f83011261385d57600080fd5b8135602061387261386d83613828565b61364d565b82815260059290921b8401810191818101908684111561389157600080fd5b8286015b848110156138ac5780358352918301918301613895565b509695505050505050565b600082601f8301126138c857600080fd5b6106b58383356020850161367e565b600080600080600060a086880312156138ef57600080fd5b6138f8866135c3565b9450613906602087016135c3565b9350604086013567ffffffffffffffff8082111561392357600080fd5b61392f89838a0161384c565b9450606088013591508082111561394557600080fd5b61395189838a0161384c565b9350608088013591508082111561396757600080fd5b50613974888289016138b7565b9150509295509295909350565b6000806040838503121561399457600080fd5b823567ffffffffffffffff808211156139ac57600080fd5b818501915085601f8301126139c057600080fd5b813560206139d061386d83613828565b82815260059290921b840181019181810190898411156139ef57600080fd5b948201945b83861015613a1457613a05866135c3565b825294820194908201906139f4565b96505086013592505080821115613a2a57600080fd5b50613a378582860161384c565b9150509250929050565b600081518084526020808501945080840160005b83811015613a7157815187529582019590820190600101613a55565b509495945050505050565b6020815260006106b56020830184613a41565b60008060408385031215613aa257600080fd5b613aab836137fb565b9150602083013567ffffffffffffffff811115613ac757600080fd5b613a37858286016138b7565b60008060408385031215613ae657600080fd5b613aef836137fb565b9150613afd602084016135c3565b90509250929050565b600060208284031215613b1857600080fd5b6106b5826135c3565b60008060408385031215613b3457600080fd5b613b3d836135c3565b915060208301358015158114613b5257600080fd5b809150509250929050565b60008060408385031215613b7057600080fd5b613aef836135c3565b600080600080600060a08688031215613b9157600080fd5b613b9a866135c3565b9450613ba8602087016135c3565b93506040860135925060608601359150608086013567ffffffffffffffff811115613bd257600080fd5b613974888289016138b7565b6000610100808352613bf28184018b6137bc565b915050876020830152866040830152856060830152846080830152835160a0830152602084015160c083015260018060a01b03831660e083015298975050505050505050565b600181811c90821680613c4c57607f821691505b602082108103613c6c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115613cb857600081815260208120601f850160051c81016020861015613c995750805b601f850160051c820191505b8181101561088357828155600101613ca5565b505050565b815167ffffffffffffffff811115613cd757613cd7613637565b613ceb81613ce58454613c38565b84613c72565b602080601f831160018114613d205760008415613d085750858301515b600019600386901b1c1916600185901b178555610883565b600085815260208120601f198616915b82811015613d4f57888601518255948401946001909101908401613d30565b5085821015613d6d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b61ffff818116838216019080821115613dae57613dae613d7d565b5092915050565b61ffff8716815260c060208201526000613dd260c08301886137bc565b604083019690965250606081019390935260808301919091526001600160a01b031660a09091015292915050565b8082018082111561047f5761047f613d7d565b808202811582820484141761047f5761047f613d7d565b634e487b7160e01b600052601260045260246000fd5b600082613e5d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201613e8a57613e8a613d7d565b5060010190565b61ffff841681526001600160a01b0383166020820152606060408201819052600090613ebf908301846137bc565b95945050505050565b8181038181111561047f5761047f613d7d565b60008151613eed818560208601613798565b9290920192915050565b6e7b226e616d65223a2247616d65202360881b81528651600090613f2281600f850160208c01613798565b672c204d6f7665202360c01b600f918401918201528751613f4a816017840160208c01613798565b701116113232b9b1b934b83a34b7b7111d1160791b601792909101918201528651613f7c816028840160208b01613798565b7f222c22616e696d6174696f6e5f75726c223a22646174613a746578742f68746d60289290910191820152681b0ed8985cd94d8d0b60ba1b60488201528551613fcc816051840160208a01613798565b61404961403b6140356140276140216051868801017f222c2261747472696275746573223a5b7b2274726169745f74797065223a224481526d32b83a341116113b30b63ab2911d60911b6020820152602e0190565b8a613edb565b611f4b60f21b815260020190565b87613edb565b615d7d60f01b815260020190565b9a9950505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161408f81601d850160208701613798565b91909101601d0192915050565b7f7b2274726169745f74797065223a2244696d656e73696f6e222c2276616c7565815262111d1160e91b6020820152600083516140e0816023850160208801613798565b6301061cb960e51b6023918401918201528351614104816027840160208801613798565b61227d60f01b60279290910191820152602901949350505050565b7f3c7374796c653e3a726f6f747b2d2d613a3130303070783b2d2d623a0000000081526000825161415781601c850160208701613798565b641d9696b19d60d91b601c939091019283015250602101919050565b60008351614185818460208801613798565b7f2c7b2274726169745f74797065223a22476170222c2276616c7565223a22000090830190815283516141bf81601e840160208801613798565b61227d60f01b601e9290910191820152602001949350505050565b600083516141ec818460208801613798565b835190830190614200818360208801613798565b66383c1d9696b21d60c91b9101908152600701949350505050565b6000835161422d818460208801613798565b80830190507f2c7b2274726169745f74797065223a22486569676874222c2276616c7565223a8152601160f91b60208201528351614272816021840160208801613798565b61227d60f01b60219290910191820152602301949350505050565b6000835161429f818460208801613798565b8351908301906142b3818360208801613798565b6270783b60e81b9101908152600301949350505050565b600083516142dc818460208801613798565b80830190507f2c7b2274726169745f74797065223a224261736520436f6c6f72222c2276616c8152633ab2911d60e11b60208201528351614324816024840160208801613798565b607d60f81b60249290910191820152602501949350505050565b60008351614350818460208801613798565b80830190507f2c7b2274726169745f74797065223a22436f6c6f72205468656d65222c227661815265363ab2911d1160d11b6020820152835161439a816026840160208801613798565b61227d60f01b60269290910191820152602801949350505050565b600083516143c7818460208801613798565b80830190507f2c7b2274726169745f74797065223a22436f6c6f722047656e65726174696f6e81526a1116113b30b63ab2911d1160a91b6020820152835161441681602b840160208801613798565b61227d60f01b602b9290910191820152602d01949350505050565b60008751614443818460208c01613798565b631696b29d60e11b9083019081528751614464816004840160208c01613798565b641d9696b31d60d91b60049290910191820152865161448a816009840160208b01613798565b641d9696b39d60d91b6009929091019182015285516144b081600e840160208a01613798565b641d9696b41d60d91b600e929091019182015284516144d6816013840160208901613798565b641d9696b49d60d91b601392909101918201526145066144f96018830186613edb565b603b60f81b815260010190565b9998505050505050505050565b6000855160206145268285838b01613798565b8651918401916145398184848b01613798565b865192019161454b8184848a01613798565b7f2c316672293b677269642d74656d706c6174652d726f77733a726570656174289201918252845161458281838501848901613798565b7f2c316672293b7472616e73666f726d3a726f746174652832313064656729736b9201908101919091527f6577282d3330646567297363616c655928302e383634297d000000000000000060408201526058019695505050505050565b600082516145f1818460208701613798565b7f2e633e2a3a6e74682d6368696c642833293e6469767b626f726465723a2031709201918252506d7820736f6c696420626c61636b7d60901b6020820152602e01919050565b60008351614649818460208801613798565b80830190507f2c7b2274726169745f74797065223a2242697420426f72646572222c2276616c8152643ab2911d1160d91b60208201528351614692816025840160208801613798565b61227d60f01b60259290910191820152602701949350505050565b600087516146bf818460208c01613798565b61173960f11b90830190815287516146de816002840160208c01613798565b7403dba37b81d31b0b631943b30b9141696b79490159605d1b600292909101918201528651614714816017840160208b01613798565b7f2a28766172282d2d6e292f32202b20766172282d2d632929297d2e6300000000601792909101918201528551614752816033840160208a01613798565b7303db632b33a1d31b0b631943b30b9141696b814960651b603392909101918201528451614787816047840160208901613798565b661018171c1b1b1560c91b604792909101918201526145066147ac604e830186613edb565b7f2a28766172282d2d6e29202b20766172282d2d632929297d0000000000000000815260180190565b600083516147e7818460208801613798565b8351908301906147fb818360208801613798565b01949350505050565b60008351614816818460208801613798565b701e17b9ba3cb6329f1e39b2b1ba34b7b71f60791b9083019081528351614844816011840160208801613798565b691e17b9b2b1ba34b7b71f60b11b60119290910191820152601b01949350505050565b6e1e3234bb1031b630b9b99e9131903960891b8152825160009061489281600f850160208801613798565b61206360f01b600f9184019182015283516148b4816011840160208801613798565b7f223e3c6469763e3c2f6469763e3c6469763e3c2f6469763e3c6469763e00000060119290910191820152602e01949350505050565b600083516148fc818460208801613798565b681e3234bb1034b21e9160b91b9083019081528351614922816009840160208801613798565b67111f1e17b234bb1f60c11b60099290910191820152601101949350505050565b60008251614955818460208701613798565b6b1e17b234bb1f1e17b234bb1f60a11b920191825250600c01919050565b6040815260006149866040830185613a41565b8281036020840152613ebf8185613a41565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906149d2908301846137bc565b979650505050505050565b6000602082840312156149ef57600080fd5b81516106b581613604565b6001600160a01b0386811682528516602082015260a060408201819052600090614a2690830186613a41565b8281036060840152614a388186613a41565b90508281036080840152614a4c81856137bc565b9897505050505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f2d2d6e3a63616c6328283339347078202d2028766172282d2d6229202d2031292a766172282d2d6329292f766172282d2d6229293b2d2d6f3a63616c63283130367078202b20766172282d2d6e29293b2d2d703a63616c6328766172282d2d61292f32297d73656374696f6e7b6865696768743a766172282d2d61293b77696474683a766172282d2d61293b6261636b67726f756e643a766172282d2d65293b706f736974696f6e3a6162736f6c7574653b6c6566743a303b746f703a303b72696768743a303b626f74746f6d3a303b6f766572666c6f773a68696464656e7d2e637b6865696768743a303b77696474683a303b706f736974696f6e3a6162736f6c7574653b7472616e736974696f6e3a302e3235737d2e633a686f7665727b7472616e73666f726d3a7472616e736c617465283070782c2d36347078293b7472616e736974696f6e3a302e3235737d2e633e2a7b6865696768743a766172282d2d6e293b77696474683a766172282d2d6e293b626f726465722d626f74746f6d3a34707820736f6c696420626c61636b3b626f726465722d72696768743a34707820736f6c696420626c61636b3b626f726465722d6c6566743a31707820736f6c696420626c61636b3b626f726465722d746f703a31707820736f6c696420626c61636b3b7472616e73666f726d2d6f726967696e3a3020303b706f736974696f6e3a72656c61746976653b626f782d73697a696e673a626f726465722d626f787d2e633e2a3a6e74682d6368696c642831297b77696474683a766172282d2d64293b6261636b67726f756e642d636f6c6f723a766172282d2d66293b7472616e73666f726d3a726f7461746528393064656729736b657758282d3330646567297363616c655928302e383634297d2e633e2a3a6e74682d6368696c642832297b6865696768743a766172282d2d64293b626f74746f6d3a766172282d2d6e293b6261636b67726f756e642d636f6c6f723a766172282d2d67293b7472616e73666f726d3a726f74617465282d333064656729736b657758282d3330646567297363616c655928302e383634297d23687b6261636b67726f756e642d636f6c6f723a766172282d2d68297d23697b6261636b67726f756e642d636f6c6f723a766172282d2d69297d2e633e2a3a6e74682d6368696c642833297b626f74746f6d3a63616c6328766172282d2d6429202b20766172282d2d6e29293b6261636b67726f756e642d636f6c6f723a766172282d2d68293b646973706c61793a677269643b677269642d74656d706c6174652d636f6c756d6e733a72657065617428a26469706673582212203c704b297f8d593d14b355e50318e0f05e83a65208a236670faf9adad6439f7564736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC1155InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC1155InvalidArrayLength(uint256,uint256)": [
        {
          "details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
          "params": {
            "idsLength": "Length of the array of token identifiers",
            "valuesLength": "Length of the array of token amounts"
          }
        }
      ],
      "ERC1155InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC1155InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC1155InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC1155MissingApprovalForAll(address,address)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathUD60x18__Exp2InputTooBig(uint256)": [
        {
          "notice": "Emitted when the input is greater than 192."
        }
      ],
      "PRBMathUD60x18__LogInputTooSmall(uint256)": [
        {
          "notice": "Emitted when the input is less than 1."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 326,
        "contract": "contracts/Board.sol:Board",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 332,
        "contract": "contracts/Board.sol:Board",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 334,
        "contract": "contracts/Board.sol:Board",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/Board.sol:Board",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3325,
        "contract": "contracts/Board.sol:Board",
        "label": "puzzleCounter",
        "offset": 20,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 3327,
        "contract": "contracts/Board.sol:Board",
        "label": "tokenCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3356,
        "contract": "contracts/Board.sol:Board",
        "label": "puzzlesById",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_struct(Puzzle)3351_storage)"
      },
      {
        "astId": 3360,
        "contract": "contracts/Board.sol:Board",
        "label": "userRatings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3364,
        "contract": "contracts/Board.sol:Board",
        "label": "tokenIdToPuzzleId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint16)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_struct(Puzzle)3351_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct Board.Puzzle)",
        "numberOfBytes": "32",
        "value": "t_struct(Puzzle)3351_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Move)3996_storage": {
        "encoding": "inplace",
        "label": "struct Chess.Move",
        "members": [
          {
            "astId": 3993,
            "contract": "contracts/Board.sol:Board",
            "label": "board",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3995,
            "contract": "contracts/Board.sol:Board",
            "label": "metadata",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Puzzle)3351_storage": {
        "encoding": "inplace",
        "label": "struct Board.Puzzle",
        "members": [
          {
            "astId": 3329,
            "contract": "contracts/Board.sol:Board",
            "label": "fen",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3331,
            "contract": "contracts/Board.sol:Board",
            "label": "solutionHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 3333,
            "contract": "contracts/Board.sol:Board",
            "label": "solveCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3335,
            "contract": "contracts/Board.sol:Board",
            "label": "attemptCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3339,
            "contract": "contracts/Board.sol:Board",
            "label": "userHasSolved",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3343,
            "contract": "contracts/Board.sol:Board",
            "label": "userHasAttempted",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3345,
            "contract": "contracts/Board.sol:Board",
            "label": "rating",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3348,
            "contract": "contracts/Board.sol:Board",
            "label": "move",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(Move)3996_storage"
          },
          {
            "astId": 3350,
            "contract": "contracts/Board.sol:Board",
            "label": "creator",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}