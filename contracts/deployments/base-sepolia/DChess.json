{
  "address": "0x491AAe62C2995768bB9a7cAaD3F3B3A768DA3AF4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        }
      ],
      "name": "AlreadyAttempted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valuesLength",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC1155MissingApprovalForAll",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        }
      ],
      "name": "FENCannotBeEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadata",
          "type": "uint256"
        }
      ],
      "name": "InvalidMetadata",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        }
      ],
      "name": "InvalidPuzzle",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredAmount",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughEtherSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        }
      ],
      "name": "PuzzleNotSolved",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "b",
          "type": "bytes32"
        }
      ],
      "name": "SolutionCannotBeEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "UserNotAuthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "fen",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "solutionHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "board",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "PuzzleAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "solutionSubmission",
          "type": "bytes"
        }
      ],
      "name": "PuzzleAttempted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPuzzleRating",
          "type": "uint256"
        }
      ],
      "name": "PuzzleRatingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PuzzleSolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "solver",
          "type": "address"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newUserRating",
          "type": "uint256"
        }
      ],
      "name": "UserRatingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fen",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "solution",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "metadata",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "addPuzzle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "internalTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "puzzlesById",
      "outputs": [
        {
          "internalType": "string",
          "name": "fen",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "solution",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "rating",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadata",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_kFactor",
          "type": "uint256"
        }
      ],
      "name": "setKFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setPlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setTokenMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "solution",
          "type": "bytes"
        }
      ],
      "name": "submitSolution",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userHasAttemptedPuzzle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "internalTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userHasSolvedPuzzle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRatings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66d4ab455e6d6b123a207230223f33cb495ea8bc4816a60ac243be1b1935fb66",
  "receipt": {
    "to": null,
    "from": "0x4489C7836eBE6aBf8a95Ad87877E8123e5F20A25",
    "contractAddress": "0x491AAe62C2995768bB9a7cAaD3F3B3A768DA3AF4",
    "transactionIndex": 1,
    "gasUsed": "4252597",
    "logsBloom": "0x
    "blockHash": "0x0cc8730629db51e84d7962c9f7236df65891e4af10179346ef405cd061f9d36a",
    "transactionHash": "0x66d4ab455e6d6b123a207230223f33cb495ea8bc4816a60ac243be1b1935fb66",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5221006,
        "transactionHash": "0x66d4ab455e6d6b123a207230223f33cb495ea8bc4816a60ac243be1b1935fb66",
        "address": "0x491AAe62C2995768bB9a7cAaD3F3B3A768DA3AF4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004489c7836ebe6abf8a95ad87877e8123e5f20a25"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0cc8730629db51e84d7962c9f7236df65891e4af10179346ef405cd061f9d36a"
      }
    ],
    "blockNumber": 5221006,
    "cumulativeGasUsed": "4316610",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4489C7836eBE6aBf8a95Ad87877E8123e5F20A25"
  ],
  "numDeployments": 1,
  "solcInputHash": "654b112c2657dcf5f3c7bb4c9efde911",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadyAttempted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"FENCannotBeEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"name\":\"InvalidMetadata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidPuzzle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughEtherSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"}],\"name\":\"PuzzleNotSolved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"SolutionCannotBeEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserNotAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fen\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"solutionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"board\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"PuzzleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"solutionSubmission\",\"type\":\"bytes\"}],\"name\":\"PuzzleAttempted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPuzzleRating\",\"type\":\"uint256\"}],\"name\":\"PuzzleRatingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PuzzleSolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUserRating\",\"type\":\"uint256\"}],\"name\":\"UserRatingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fen\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"solution\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"addPuzzle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"puzzlesById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"fen\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"solution\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"rating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kFactor\",\"type\":\"uint256\"}],\"name\":\"setKFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"solution\",\"type\":\"bytes\"}],\"name\":\"submitSolution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasAttemptedPuzzle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"internalTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHasSolvedPuzzle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRatings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DChess.sol\":\"DChess\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/DChess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Elo} from \\\"./lib/Elo.sol\\\";\\nimport {threeoutofnineART} from \\\"./lib/threeoutofnineART.sol\\\";\\n\\nimport {IDChess} from \\\"./interfaces/IDChess.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract DChess is IDChess, ERC1155, Ownable {\\n    using MerkleProof for bytes32[];\\n\\n    uint256 constant DEFAULT_RATING = 1000;\\n\\n    uint256 public internalTokenCounter;\\n    uint256 public tokenMintPrice; // Token price of minting an NFT for a solved puzzle\\n    uint256 public kFactor;\\n    uint256 public platformFee; // Percent of token price that goes to the platform (the rest goes to creator)\\n    bytes32 public merkleRoot; // used for checking if a user is a creator\\n\\n    struct Puzzle {\\n        string fen;\\n        bytes32 solution; // Hash of the solution\\n        mapping(address => bool) userHasSolved;\\n        mapping(address => bool) userHasAttempted;\\n        uint256 rating;\\n        uint256 metadata; // Used to generate nft art\\n        address creator;\\n        string description; // description of the puzzle\\n    }\\n\\n    mapping(uint256 => Puzzle) public puzzlesById;\\n    mapping(address => uint256) public userRatings;\\n\\n    constructor(address initialOwner) Ownable(initialOwner) ERC1155(\\\"\\\") {\\n        tokenMintPrice = 0.002 ether;\\n        kFactor = 50;\\n        platformFee = 40;\\n        merkleRoot = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    }\\n\\n    function setTokenMintPrice(uint256 _price) public onlyOwner {\\n        tokenMintPrice = _price;\\n    }\\n\\n    function setKFactor(uint256 _kFactor) public onlyOwner {\\n        kFactor = _kFactor;\\n    }\\n\\n    function setPlatformFee(uint256 _fee) public onlyOwner {\\n        platformFee = _fee;\\n    }\\n\\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\\n        merkleRoot = _merkleRoot;\\n    }\\n\\n    function userHasSolvedPuzzle(\\n        uint256 internalTokenId,\\n        address user\\n    ) public view returns (bool) {\\n        return puzzlesById[internalTokenId].userHasSolved[user];\\n    }\\n\\n    function userHasAttemptedPuzzle(\\n        uint256 internalTokenId,\\n        address user\\n    ) public view returns (bool) {\\n        return puzzlesById[internalTokenId].userHasAttempted[user];\\n    }\\n\\n    function uri(\\n        uint256 internalTokenId\\n    ) public view override returns (string memory) {\\n        return\\n            threeoutofnineART.getMetadata(\\n                internalTokenId,\\n                puzzlesById[internalTokenId].metadata\\n            );\\n    }\\n\\n    function addPuzzle(\\n        string calldata fen,\\n        bytes32 solution,\\n        uint256 metadata,\\n        string calldata description,\\n        bytes32[] calldata proof\\n    ) public {\\n        if (!isWhitelisted(_msgSender(), proof)) {\\n            revert UserNotAuthorized(_msgSender());\\n        }\\n        if (bytes(fen).length == 0) {\\n            revert FENCannotBeEmpty(fen);\\n        }\\n        if ((solution).length == 0) {\\n            revert SolutionCannotBeEmpty(solution);\\n        }\\n        if (metadata == 0) {\\n            revert InvalidMetadata(internalTokenCounter, metadata);\\n        }\\n\\n        // Call to ensure that getMetadata is valid\\n        threeoutofnineART.getMetadata(internalTokenCounter, metadata);\\n\\n        uint256 internalTokenId = internalTokenCounter;\\n        Puzzle storage puzzle = puzzlesById[internalTokenId];\\n        puzzle.fen = fen;\\n        puzzle.solution = solution;\\n        puzzle.creator = _msgSender();\\n        puzzle.rating = DEFAULT_RATING;\\n        puzzle.description = description;\\n        puzzle.metadata = metadata;\\n        internalTokenCounter = internalTokenCounter + 1;\\n\\n        emit PuzzleAdded(\\n            internalTokenId,\\n            fen,\\n            solution,\\n            metadata,\\n            _msgSender()\\n        );\\n    }\\n\\n    function submitSolution(\\n        uint256 internalTokenId,\\n        bytes memory solution\\n    ) public returns (bool) {\\n        if (internalTokenId >= internalTokenCounter) {\\n            revert InvalidPuzzle(internalTokenId);\\n        }\\n\\n        Puzzle storage puzzle = puzzlesById[internalTokenId];\\n\\n        if (puzzle.userHasAttempted[_msgSender()]) {\\n            revert AlreadyAttempted(internalTokenId);\\n        }\\n\\n        puzzle.userHasAttempted[_msgSender()] = true;\\n        emit PuzzleAttempted(internalTokenId, _msgSender(), solution);\\n\\n        if (puzzle.solution == keccak256(solution)) {\\n            puzzle.userHasSolved[_msgSender()] = true;\\n            adjustRatings(internalTokenId, true);\\n            emit PuzzleSolved(internalTokenId, _msgSender());\\n            return true;\\n        } else {\\n            adjustRatings(internalTokenId, false);\\n            return false;\\n        }\\n    }\\n\\n    function mint(uint256 internalTokenId) public payable {\\n        if (msg.value < tokenMintPrice) {\\n            revert NotEnoughEtherSent(msg.value, tokenMintPrice);\\n        }\\n        Puzzle storage puzzle = puzzlesById[internalTokenId];\\n        if (!puzzle.userHasSolved[_msgSender()]) {\\n            revert PuzzleNotSolved(internalTokenId);\\n        }\\n\\n        _mint(_msgSender(), internalTokenId, 1, \\\"\\\");\\n        emit TokenMinted(internalTokenId, _msgSender());\\n        payable(puzzle.creator).transfer(\\n            (msg.value * (100 - platformFee)) / 100\\n        );\\n    }\\n\\n    function isWhitelisted(\\n        address user,\\n        bytes32[] calldata proof\\n    ) public view returns (bool) {\\n        return proof.verify(merkleRoot, keccak256(abi.encodePacked(user)));\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 amount = address(this).balance;\\n        payable(_msgSender()).transfer(amount);\\n        emit Withdraw(_msgSender(), amount);\\n    }\\n\\n    function adjustRatings(uint256 internalTokenId, bool success) private {\\n        Puzzle storage puzzle = puzzlesById[internalTokenId];\\n        uint256 puzzleRating = puzzle.rating;\\n        uint256 userRating = userRatings[_msgSender()];\\n        if (userRating == 0) {\\n            // initialize to DEFAULT if no rating found\\n            userRating = DEFAULT_RATING;\\n            userRatings[_msgSender()] = DEFAULT_RATING;\\n        }\\n        (uint256 change, bool negative) = Elo.ratingChange(\\n            userRating,\\n            puzzleRating,\\n            success ? 100 : 0,\\n            kFactor\\n        );\\n        change = change / 100; // change is 2 decimal places (1501 = 15.01 ELO change)\\n\\n        if (negative) {\\n            userRatings[_msgSender()] -= change;\\n            puzzle.rating += change;\\n        } else {\\n            userRatings[_msgSender()] += change;\\n            puzzle.rating -= change;\\n        }\\n        emit PuzzleRatingChanged(internalTokenId, puzzleRating);\\n        emit UserRatingChanged(_msgSender(), userRatings[_msgSender()]);\\n    }\\n}\\n\",\"keccak256\":\"0x5a7223371ea1b9e8378e3dd307baf73d17f1258727ee785f626185ef9806e10e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IDChess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IDChess {\\n    event PuzzleAdded(\\n        uint256 internalTokenId,\\n        string fen,\\n        bytes32 solutionHash,\\n        uint256 board,\\n        address creator\\n    );\\n    event PuzzleSolved(uint256 internalTokenId, address user);\\n    event PuzzleAttempted(\\n        uint256 internalTokenId,\\n        address user,\\n        bytes solutionSubmission\\n    );\\n    event UserRatingChanged(address user, uint256 newUserRating);\\n    event PuzzleRatingChanged(uint256 internalTokenId, uint256 newPuzzleRating);\\n    event TokenMinted(uint256 internalTokenId, address solver);\\n    event Withdraw(address owner, uint256 amount);\\n\\n    error FENCannotBeEmpty(string s);\\n    error SolutionCannotBeEmpty(bytes32 b);\\n    error InvalidPuzzle(uint256 internalTokenId);\\n    error AlreadyAttempted(uint256 internalTokenId);\\n    error PuzzleNotSolved(uint256 internalTokenId);\\n    error TokenDoesNotExist(uint256 tokenId);\\n    error NotEnoughEtherSent(uint256 amountSent, uint256 requiredAmount);\\n    error InvalidMetadata(uint256 internalTokenId, uint256 metadata);\\n    error UserNotAuthorized(address user);\\n\\n    function userHasSolvedPuzzle(\\n        uint256 internalTokenId,\\n        address user\\n    ) external view returns (bool);\\n\\n    function mint(uint256 internalTokenId) external payable;\\n\\n    function addPuzzle(\\n        string calldata fen,\\n        bytes32 solutionHash,\\n        uint256 position,\\n        string calldata description,\\n        bytes32[] calldata proof\\n    ) external;\\n\\n    function submitSolution(\\n        uint256 internalTokenId,\\n        bytes memory solution\\n    ) external returns (bool);\\n\\n    function withdraw() external;\\n\\n    function isWhitelisted(\\n        address user,\\n        bytes32[] calldata proof\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x796870d9274b277d73519ef94813511cd163b3818dd8ecdfcd6a11356bb4db85\",\"license\":\"UNLICENSED\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678\\\" \\\"9+/\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n        string memory table = TABLE;\\n        uint256 encodedLength = ((data.length + 2) / 3) << 2;\\n        string memory result = new string(encodedLength + 0x20);\\n\\n        assembly {\\n            mstore(result, encodedLength)\\n            let tablePtr := add(table, 1)\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            let resultPtr := add(result, 0x20)\\n            for {} lt(dataPtr, endPtr) {} {\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(0x12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(0xC, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(0xF0, 0x3D3D)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(0xF8, 0x3D)) }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x25c0847af52f3c5a19de7e092d52a59d129ddcf3e987854e2c1bbe439d55f9d5\",\"license\":\"MIT\"},\"contracts/lib/Elo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {FixedPointMathLib as fp} from \\\"./FixedPointMathLib.sol\\\";\\n\\nlibrary Elo {\\n\\t/// @notice Get the 16th root of a number, used in ELO calculations\\n\\t/// @dev Elo calculations require the 400th root (10 ^ (x / 400)), however this can be simplified to the 16th root (10 ^ ((x / 25) / 16))\\n\\tfunction sixteenthRoot(uint256 x) internal pure returns (uint256) {\\n\\t\\treturn fp.sqrt(fp.sqrt(fp.sqrt(fp.sqrt(x))));\\n\\t}\\n\\n\\t/// @notice Calculates the change in ELO rating, after a given outcome.\\n\\t/// @param ratingA the ELO rating of the player A\\n\\t/// @param ratingB the ELO rating of the player B\\n\\t/// @param score the score of the player A, scaled by 100. 100 = win, 50 = draw, 0 = loss\\n\\t/// @param kFactor the k-factor or development multiplier used to calculate the change in ELO rating. 20 is the typical value\\n\\t/// @return change the change in ELO rating of player A, with 2 decimals of precision. 1501 = 15.01 ELO change\\n\\t/// @return negative the directional change of player A's ELO. Opposite sign for player B\\n\\tfunction ratingChange(\\n\\t\\tuint256 ratingA,\\n\\t\\tuint256 ratingB,\\n\\t\\tuint256 score,\\n\\t\\tuint256 kFactor\\n\\t) internal pure returns (uint256 change, bool negative) {\\n\\t\\tuint256 _kFactor; // scaled up `kFactor` by 100\\n\\t\\tbool _negative = ratingB < ratingA;\\n\\t\\tuint256 ratingDiff; // absolute value difference between `ratingA` and `ratingB`\\n\\n\\t\\tunchecked {\\n\\t\\t\\t// scale up the inputs by a factor of 100\\n\\t\\t\\t// since our elo math is scaled up by 100 (to avoid low precision integer division)\\n\\t\\t\\t_kFactor = kFactor * 10_000;\\n\\t\\t\\tratingDiff = _negative ? ratingA - ratingB : ratingB - ratingA;\\n\\t\\t}\\n\\n\\t\\t// checks against overflow/underflow, discovered via fuzzing\\n\\t\\t// large rating diffs leads to 10^ratingDiff being too large to fit in a uint256\\n\\t\\trequire(ratingDiff < 1126, \\\"Rating difference too large\\\");\\n\\t\\t// large rating diffs when applying the scale factor leads to underflow (800 - ratingDiff)\\n\\t\\tif (_negative) require(ratingDiff < 800, \\\"Rating difference too large\\\");\\n\\n\\t\\t// ----------------------------------------------------------------------\\n\\t\\t// Below, we'll be running simplified versions of the following formulas:\\n\\t\\t// expected score = 1 / (1 + 10 ^ (ratingDiff / 400))\\n\\t\\t// elo change = kFactor * (score - expectedScore)\\n\\n\\t\\tuint256 n; // numerator of the power, with scaling, (numerator of `ratingDiff / 400`)\\n\\t\\tuint256 _powered; // the value of 10 ^ numerator\\n\\t\\tuint256 powered; // the value of 16th root of 10 ^ numerator (fully resolved 10 ^ (ratingDiff / 400))\\n\\t\\tuint256 kExpectedScore; // the expected score with K factor distributed\\n\\t\\tuint256 kScore; // the actual score with K factor distributed\\n\\n\\t\\tunchecked {\\n\\t\\t\\t// apply offset of 800 to scale the result by 100\\n\\t\\t\\tn = _negative ? 800 - ratingDiff : 800 + ratingDiff;\\n\\n\\t\\t\\t// (x / 400) is the same as ((x / 25) / 16))\\n\\t\\t\\t_powered = fp.rpow(10, n / 25, 1); // divide by 25 to avoid reach uint256 max\\n\\t\\t\\tpowered = sixteenthRoot(_powered); // x ^ (1 / 16) is the same as 16th root of x\\n\\n\\t\\t\\t// given `change = kFactor * (score - expectedScore)` we can distribute kFactor to both terms\\n\\t\\t\\tkExpectedScore = _kFactor / (100 + powered); // both numerator and denominator scaled up by 100\\n\\t\\t\\tkScore = kFactor * score; // input score is already scaled up by 100\\n\\n\\t\\t\\t// determines the sign of the ELO change\\n\\t\\t\\tnegative = kScore < kExpectedScore;\\n\\t\\t\\tchange = negative ? kExpectedScore - kScore : kScore - kExpectedScore;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x3617ea5774e72b8638ed5291af1f91dcec8eb2a7b2d34158cae1c629181e7315\",\"license\":\"MIT\"},\"contracts/lib/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.20;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n\\t/*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tuint256 internal constant MAX_UINT256 = 2 ** 256 - 1;\\n\\n\\tuint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n\\tfunction mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n\\t}\\n\\n\\tfunction mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n\\t}\\n\\n\\tfunction divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n\\t}\\n\\n\\tfunction divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction mulDivDown(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint256 denominator\\n\\t) internal pure returns (uint256 z) {\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n\\t\\t\\tif iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Divide x * y by the denominator.\\n\\t\\t\\tz := div(mul(x, y), denominator)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction mulDivUp(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint256 denominator\\n\\t) internal pure returns (uint256 z) {\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n\\t\\t\\tif iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If x * y modulo the denominator is strictly greater than 0,\\n\\t\\t\\t// 1 is added to round up the division of x * y by the denominator.\\n\\t\\t\\tz := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction rpow(\\n\\t\\tuint256 x,\\n\\t\\tuint256 n,\\n\\t\\tuint256 scalar\\n\\t) internal pure returns (uint256 z) {\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tswitch x\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\tswitch n\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\t// 0 ** 0 = 1\\n\\t\\t\\t\\t\\tz := scalar\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\t// 0 ** n = 0\\n\\t\\t\\t\\t\\tz := 0\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\tswitch mod(n, 2)\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\t// If n is even, store scalar in z for now.\\n\\t\\t\\t\\t\\tz := scalar\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\t// If n is odd, store x in z for now.\\n\\t\\t\\t\\t\\tz := x\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Shifting right by 1 is like dividing by 2.\\n\\t\\t\\t\\tlet half := shr(1, scalar)\\n\\n\\t\\t\\t\\tfor {\\n\\t\\t\\t\\t\\t// Shift n right by 1 before looping to halve it.\\n\\t\\t\\t\\t\\tn := shr(1, n)\\n\\t\\t\\t\\t} n {\\n\\t\\t\\t\\t\\t// Shift n right by 1 each iteration to halve it.\\n\\t\\t\\t\\t\\tn := shr(1, n)\\n\\t\\t\\t\\t} {\\n\\t\\t\\t\\t\\t// Revert immediately if x ** 2 would overflow.\\n\\t\\t\\t\\t\\t// Equivalent to iszero(eq(div(xx, x), x)) here.\\n\\t\\t\\t\\t\\tif shr(128, x) {\\n\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Store x squared.\\n\\t\\t\\t\\t\\tlet xx := mul(x, x)\\n\\n\\t\\t\\t\\t\\t// Round to the nearest number.\\n\\t\\t\\t\\t\\tlet xxRound := add(xx, half)\\n\\n\\t\\t\\t\\t\\t// Revert if xx + half overflowed.\\n\\t\\t\\t\\t\\tif lt(xxRound, xx) {\\n\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Set x to scaled xxRound.\\n\\t\\t\\t\\t\\tx := div(xxRound, scalar)\\n\\n\\t\\t\\t\\t\\t// If n is even:\\n\\t\\t\\t\\t\\tif mod(n, 2) {\\n\\t\\t\\t\\t\\t\\t// Compute z * x.\\n\\t\\t\\t\\t\\t\\tlet zx := mul(z, x)\\n\\n\\t\\t\\t\\t\\t\\t// If z * x overflowed:\\n\\t\\t\\t\\t\\t\\tif iszero(eq(div(zx, x), z)) {\\n\\t\\t\\t\\t\\t\\t\\t// Revert if x is non-zero.\\n\\t\\t\\t\\t\\t\\t\\tif iszero(iszero(x)) {\\n\\t\\t\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Round to the nearest number.\\n\\t\\t\\t\\t\\t\\tlet zxRound := add(zx, half)\\n\\n\\t\\t\\t\\t\\t\\t// Revert if zx + half overflowed.\\n\\t\\t\\t\\t\\t\\tif lt(zxRound, zx) {\\n\\t\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Return properly scaled zxRound.\\n\\t\\t\\t\\t\\t\\tz := div(zxRound, scalar)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256 z) {\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tlet y := x // We start y at x, which will help us make our initial estimate.\\n\\n\\t\\t\\tz := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n\\t\\t\\t// This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n\\t\\t\\t// start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n\\t\\t\\t// We check y >= 2^(k + 8) but shift right by k bits\\n\\t\\t\\t// each branch to ensure that if x >= 256, then y >= 256.\\n\\t\\t\\tif iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n\\t\\t\\t\\ty := shr(128, y)\\n\\t\\t\\t\\tz := shl(64, z)\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x1000000000000000000)) {\\n\\t\\t\\t\\ty := shr(64, y)\\n\\t\\t\\t\\tz := shl(32, z)\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x10000000000)) {\\n\\t\\t\\t\\ty := shr(32, y)\\n\\t\\t\\t\\tz := shl(16, z)\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x1000000)) {\\n\\t\\t\\t\\ty := shr(16, y)\\n\\t\\t\\t\\tz := shl(8, z)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Goal was to get z*z*y within a small factor of x. More iterations could\\n\\t\\t\\t// get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n\\t\\t\\t// We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n\\t\\t\\t// That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n\\t\\t\\t// Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n\\t\\t\\t// Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n\\t\\t\\t// Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n\\t\\t\\t// For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n\\t\\t\\t// (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n\\t\\t\\t// Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n\\t\\t\\t// sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n\\t\\t\\t// There is no overflow risk here since y < 2^136 after the first branch above.\\n\\t\\t\\tz := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n\\t\\t\\t// Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\n\\t\\t\\t// If x+1 is a perfect square, the Babylonian method cycles between\\n\\t\\t\\t// floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n\\t\\t\\t// See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n\\t\\t\\t// Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n\\t\\t\\t// If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n\\t\\t\\tz := sub(z, lt(div(x, z), z))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Mod x by y. Note this will return\\n\\t\\t\\t// 0 instead of reverting if y is zero.\\n\\t\\t\\tz := mod(x, y)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Divide x by y. Note this will return\\n\\t\\t\\t// 0 instead of reverting if y is zero.\\n\\t\\t\\tr := div(x, y)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// Add 1 to x * y if x % y > 0. Note this will\\n\\t\\t\\t// return 0 instead of reverting if y is zero.\\n\\t\\t\\tz := add(gt(mod(x, y), 0), div(x, y))\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x5e1887e2b73cdde5bfbb0f3c0c00b5463f1295566b7a73ca24bd43116812dc1d\",\"license\":\"AGPL-3.0-only\"},\"contracts/lib/threeoutofnineART.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Base64} from \\\"./Base64.sol\\\";\\n\\n/// @title A library that generates HTML art based on a modified version of fiveoutofnine\\n/// @author RnkSngh / 0xasdf / fiveoutofnine\\n/// @dev Understand the representations of the chess pieces, board, and moves very carefully before\\n/// using this library:\\n/// ======================================Piece Representation======================================\\n/// Each chess piece is defined with 4 bits as follows:\\n///     * The first bit denotes the color (0 means black; 1 means white).\\n///     * The last 3 bits denote the type:\\n///         | Bits | # | Type   |\\n///         | ---- | - | ------ |\\n///         | 000  | 0 | Empty  |\\n///         | 001  | 1 | Pawn   |\\n///         | 010  | 2 | Bishop |\\n///         | 011  | 3 | Rook   |\\n///         | 100  | 4 | Knight |\\n///         | 101  | 5 | Queen  |\\n///         | 110  | 6 | King   |\\n/// ======================================Board Representation======================================\\n/// The board is an 8x8 representation of a 6x6 chess board. For efficiency, all information is\\n/// bitpacked into a single uint256. Thus, unlike typical implementations, board positions are\\n/// accessed via bit shifts and bit masks, as opposed to array accesses. Since each piece is 4 bits,\\n/// there are 64 ``indices'' to access: # 256bit interger, 4 bits per piece each 4bits represents a slot on the board\\n///                                     63 62 61 60 59 58 57 56\\n///                                     55 54 53 52 51 50 49 48\\n///                                     47 46 45 44 43 42 41 40\\n///                                     39 38 37 36 35 34 33 32\\n///                                     31 30 29 28 27 26 25 24\\n///                                     23 22 21 20 19 18 17 16\\n///                                     15 14 13 12 11 10 09 08\\n///                                     07 06 05 04 03 02 01 00\\n/// All numbers in the figure above are in decimal representation.\\n/// For example, the piece at index 27 is accessed with ``(board >> (27 << 2)) & 0xF''.\\n\\n/// 00... 0110 # Board with black king at index 00\\n/// 00... 0110 >> 0 << 2 & 1111\\n///  00... 0110 >> 0  =  00...0110\\n//// 00... 0110 << 2  -> 00 ... 01100\\n//// 00 ... 0000 1100 & (1111) -> 0000 1100\\n///\\n/// The top/bottom rows and left/right columns are treated as sentinel rows/columns for efficient\\n/// boundary validation (see {Chess-generateMoves} and {Chess-isValid}). i.e., (63, ..., 56),\\n/// (07, ..., 00), (63, ..., 07), and (56, ..., 00) never contain pieces. Every bit in those rows\\n/// and columns should be ignored, except for the last bit. The last bit denotes whose turn it is to\\n/// play (0 means black's turn; 1 means white's turn). e.g. a potential starting position:\\n///                                Black\\n///                       00 00 00 00 00 00 00 00                    Black\\n///                       00 03 02 05 06 02 03 00                 \\u265c \\u265d \\u265b \\u265a \\u265d \\u265c\\n///                       00 01 01 01 01 01 01 00                 \\u265f \\u265f \\u265f \\u265f \\u265f \\u265f\\n///                       00 00 00 00 00 00 00 00     denotes\\n///                       00 00 00 00 00 00 00 00    the board\\n///                       00 09 09 09 09 09 09 00                 \\u2659 \\u2659 \\u2659 \\u2659 \\u2659 \\u2659\\n///                       00 11 12 13 14 12 11 00                 \\u2656 \\u2658 \\u2655 \\u2654 \\u2658 \\u2656\\n///                       00 00 00 00 00 00 00 01                    White\\n///                                White\\n/// All numbers in the example above are in decimal representation.\\n/// ======================================Move Representation=======================================\\n/// Each move is allocated 12 bits. The first 6 bits are the index the piece is moving from, and the\\n/// last 6 bits are the index the piece is moving to. Since the index representing a square is at\\n/// most 54, 6 bits sufficiently represents any index (0b111111 = 63 > 54). e.g. 1243 denotes a move\\n/// from index 19 to 27 (1243 = (19 << 6) | 27).\\n///\\n/// Since the board is represented by a uint256, consider including ``using Chess for uint256''.\\n///\\n/// @notice Below details how the metadata and art are generated:\\n/// ==========================================Description===========================================\\n/// Token descriptions describe white's move in algebraic notation and black's move in algebraic\\n/// notation. If white's move results in checkmating black or a stalemate, the description will say\\n/// black resigned (for simplicity, stalemates are treated as checkmates). Since the engine always\\n/// plays black, and the player always plays white, white is indicated as ``Player'', and black is\\n/// indicated as ``fiveoutofnine''. Additionally, for every non game-ending turn, a string graphic\\n/// is generated after the moves' descriptions. An example:\\n///                             Player plays e4 rook captures e5 queen.\\n///                             6 \\u00b7 \\u00b7 \\u265c \\u00b7 \\u265a \\u265c\\n///                             5 \\u00b7 \\u265f \\u00b7 \\u00b7 \\u2656 \\u265f\\n///                             4 \\u265f \\u2659 \\u265f \\u2659 * \\u2659\\n///                             3 \\u2659 \\u00b7 \\u2659 \\u00b7 \\u00b7 \\u00b7\\n///                             2 \\u00b7 \\u00b7 \\u00b7 \\u00b7 \\u2656 \\u00b7\\n///                             1 \\u00b7 \\u2658 \\u00b7 \\u2654 \\u00b7 \\u00b7\\n///                               a b c d e f\\n///\\n///                             fiveoutofnine resigns.\\n/// * indicates the square the piece moved from.\\n/// ==============================================Art===============================================\\n/// The art is generated as HTML code with in-line CSS (0 JS) according to the following table:\\n///  | Property       | Name      | Value/Description                       | Determination       |\\n///  | ============== | ========= | ======================================= | =================== |\\n///  | Dimension      | 1 \\u00d7 1     | 1 \\u00d7 1 pillars                           | Player moved king   |\\n///  | (6 traits)     | 2 \\u00d7 2     | 2 \\u00d7 2 pillars                           | Player moved rook   |\\n///  |                | 3 \\u00d7 3     | 3 \\u00d7 3 pillars                           | Engine moved bishop |\\n///  |                | 4 \\u00d7 4     | 4 \\u00d7 4 pillars                           | Player moved knight |\\n///  |                | 6 \\u00d7 6     | 6 \\u00d7 6 pillars                           | Player moved pawn   |\\n///  |                | 12 \\u00d7 12   | 12 \\u00d7 12 pillars                         | Player moved queen  |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Height         | Plane     | 8px pillar height                       | 1 / 64 chance[^0]   |\\n///  | (5 traits)     | 1/4       | 98px pillar height                      | 10 / 64 chance[^0]  |\\n///  |                | 1/2       | 197px pillar height                     | 10 / 64 chance[^0]  |\\n///  |                | Cube      | 394px pillar height                     | 40 / 64 chance[^0]  |\\n///  |                | Infinite  | 1000px pillar height                    | 3 / 64 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Gap[^1]        | None      | 0px gap between the pillars             | 4 / 16 chance[^0]   |\\n///  | (4 traits)     | Narrow    | 2px gap between the pillars             | 9 / 16 chance[^0]   |\\n///  |                | Wide      | 12px gap between the pillars            | 2 / 16 chance[^0]   |\\n///  |                | Ultrawide | 24px gap between the pillars            | 1 / 16 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Color          | Uniform   | All faces are the same color            | 7 / 32 chance[^0]   |\\n///  | Generation[^2] | Shades    | Faces get darker anticlockwise          | 7 / 32 chance[^0]   |\\n///  | (6 traits)     | Tints     | Faces get lighter anticlockwise         | 7 / 32 chance[^0]   |\\n///  |                | Eclipse   | Left face is white; black face is black | 3 / 32 chance[^0]   |\\n///  |                | Void      | Left and right face are black           | 1 / 32 chance[^0]   |\\n///  |                | Curated   | One of 8 color themes (see below)       | 7 / 32 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Color          | Nord      | 0x8FBCBBEBCB8BD087705E81ACB48EAD        | 1 / 8 chance[^0]    |\\n///  | Theme[^3]      | B/W       | 0x000000FFFFFFFFFFFFFFFFFF000000        | 1 / 8 chance[^0]    |\\n///  | (8 traits)     | Candycorn | 0x0D3B66F4D35EEE964BFAF0CAF95738        | 1 / 8 chance[^0]    |\\n///  |                | RGB       | 0xFFFF0000FF000000FFFF0000FFFF00        | 1 / 8 chance[^0]    |\\n///  |                | VSCode    | 0x1E1E1E569CD6D2D1A2BA7FB54DC4AC        | 1 / 8 chance[^0]    |\\n///  |                | Neon      | 0x00FFFFFFFF000000FF00FF00FF00FF        | 1 / 8 chance[^0]    |\\n///  |                | Jungle    | 0xBE3400015045020D22EABAACBE3400        | 1 / 8 chance[^0]    |\\n///  |                | Corn      | 0xF9C233705860211A28346830F9C233        | 1 / 8 chance[^0]    |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Bit Border[^4] | True      | The bits have a 1px solid black border  | Any pieces captured |\\n///  | (2 traits)     | False     | The bits don't have any border          | No pieces captuered |\\n///  | ============== | ========= | ======================================= | =================== |\\n///  | [^0]: Determined from `_seed`.                                                             |\\n///  | [^1]: Gap is omitted when dimension is 1 x 1.                                              |\\n///  | [^2]: The first 5 color generation traits are algorithms. A base color is generated from   |\\n///  | `seed`, and the remaining colors are generated according to the selected algorithm. The    |\\n///  | color of the bits is always the complement of the randomly generated base color, and the   |\\n///  | background color depends on the algorithm:                                                 |\\n///  |     * Uniform: same as the base color;                                                     |\\n///  |     * Shades: darkest shade of the base color;                                             |\\n///  |     * Tints: lightest shade of the base color;                                             |\\n///  |     * Eclipse: same as the base color;                                                     |\\n///  |     * Void: complement of the base color.                                                  |\\n///  | If the selected color generation trait is \\\"Curated,\\\" 1 of 8 pre-curated themes is randomly |\\n///  | selected.                                                                                  |\\n///  | [^3]: The entries in the 3rd column are bitpacked integers where                           |\\n///  |     * the first 24 bits represent the background color,                                    |\\n///  |     * the second 24 bits represent the left face's color,                                  |\\n///  |     * the third 24 bits represent the right face's color,                                  |\\n///  |     * the fourth 24 bits represent the top face's color,                                   |\\n///  |     * and the last 24 bits represent the bits' color.                                      |\\n///  | [^4]: Bit border is omitted when dimension is 12 x 12.                                     |\\nlibrary threeoutofnineART {\\n\\tusing Strings for uint256;\\n\\n\\tstring internal constant SVG_STYLES =\\n\\t\\t\\\"--n:calc((394px - (var(--b) - 1)*var(--c))/var(--b));--o\\\"\\n\\t\\t\\\":calc(106px + var(--n));--p:calc(var(--a)/2)}section{height:var(--a);width:var(--a);backgr\\\"\\n\\t\\t\\\"ound:var(--e);position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden}.c{height:0;\\\"\\n\\t\\t\\\"width:0;position:absolute;transition:0.25s}.c:hover{transform:translate(0px,-64px);transit\\\"\\n\\t\\t\\\"ion:0.25s}.c>*{height:var(--n);width:var(--n);border-bottom:4px solid black;border-right:4\\\"\\n\\t\\t\\\"px solid black;border-left:1px solid black;border-top:1px solid black;transform-origin:0 0\\\"\\n\\t\\t\\\";position:relative;box-sizing:border-box}.c>*:nth-child(1){width:var(--d);background-color\\\"\\n\\t\\t\\\":var(--f);transform:rotate(90deg)skewX(-30deg)scaleY(0.864)}.c>*:nth-child(2){height:var(-\\\"\\n\\t\\t\\\"-d);bottom:var(--n);background-color:var(--g);transform:rotate(-30deg)skewX(-30deg)scaleY(\\\"\\n\\t\\t\\\"0.864)}#h{background-color:var(--h)}#i{background-color:var(--i)}.c>*:nth-child(3){bottom:\\\"\\n\\t\\t\\\"calc(var(--d) + var(--n));background-color:var(--h);display:grid;grid-template-columns:rep\\\"\\n\\t\\t\\\"eat(\\\";\\n\\tbytes32 internal constant HEXADECIMAL_DIGITS = \\\"0123456789ABCDEF\\\";\\n\\tbytes32 internal constant FILE_NAMES = \\\"abcdef\\\";\\n\\n\\t/// @notice Takes in data for a given fiveoutofnine NFT and outputs its metadata in JSON form.\\n\\t/// Refer to {fiveoutofnineART} for details.\\n\\t/// @dev The output is base 64-encoded.\\n\\t/// @param _internalId A bitpacked uint256 where the first 128 bits are the game ID, and the\\n\\t/// last 128 bits are the move ID within the game.\\n\\t/// @param _board Information about the board.\\n\\t/// @return Base 64-encoded JSON of metadata generated from `_internalId` and `_move`.\\n\\tfunction getMetadata(\\n\\t\\tuint256 _internalId,\\n\\t\\tuint256 _board\\n\\t) internal pure returns (string memory) {\\n\\t\\tstring memory description;\\n\\t\\tstring memory image;\\n\\t\\tstring memory attributes;\\n\\n\\t\\t{\\n\\t\\t\\tuint256 numSquares = 8;\\n\\n\\t\\t\\tuint256 seed = uint256(keccak256(abi.encodePacked(_internalId)));\\n\\n\\t\\t\\t(image, attributes) = getImage(_board, numSquares, seed);\\n\\t\\t}\\n\\n\\t\\tdescription = string(abi.encodePacked(\\\"---\\\\\\\\n\\\\\\\\n\\\", drawMove(_board)));\\n\\n\\t\\treturn\\n\\t\\t\\tstring(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\t\\t\\tBase64.encode(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\t'{\\\"name\\\":\\\"Game #',\\n\\t\\t\\t\\t\\t\\t\\tStrings.toString(_internalId >> 0x80),\\n\\t\\t\\t\\t\\t\\t\\t\\\", Move #\\\",\\n\\t\\t\\t\\t\\t\\t\\tStrings.toString(uint128(_internalId)),\\n\\t\\t\\t\\t\\t\\t\\t'\\\",'\\n\\t\\t\\t\\t\\t\\t\\t'\\\"description\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t\\tdescription,\\n\\t\\t\\t\\t\\t\\t\\t'\\\",\\\"animation_url\\\":\\\"data:text/html;base64,',\\n\\t\\t\\t\\t\\t\\t\\timage,\\n\\t\\t\\t\\t\\t\\t\\t'\\\",\\\"attributes\\\":[',\\n\\t\\t\\t\\t\\t\\t\\tattributes,\\n\\t\\t\\t\\t\\t\\t\\t\\\"]}\\\"\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @notice Generates the HTML image and its attributes for a given board/seed according to the\\n\\t/// table described in {fiveoutofnineART}.\\n\\t/// @dev The output of the image is base 64-encoded.\\n\\t/// @param _board The board after the player's and engine's move are played.\\n\\t/// @param _numSquares The dimension of the board.\\n\\t/// @param _seed A hash of the game ID.\\n\\t/// @return Base 64-encoded image (in HTML) and its attributes.\\n\\tfunction getImage(\\n\\t\\tuint256 _board,\\n\\t\\tuint256 _numSquares,\\n\\t\\tuint256 _seed\\n\\t) internal pure returns (string memory, string memory) {\\n\\t\\tstring memory attributes = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'{\\\"trait_type\\\":\\\"Dimension\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t_numSquares.toString(),\\n\\t\\t\\t\\tunicode\\\" \\u00d7 \\\",\\n\\t\\t\\t\\t_numSquares.toString(),\\n\\t\\t\\t\\t'\\\"}'\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tstring memory styles = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"<style>:root{--a:1000px;--b:\\\",\\n\\t\\t\\t\\t_numSquares.toString(),\\n\\t\\t\\t\\t\\\";--c:\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\t{\\n\\t\\t\\tstring memory gapAttribute;\\n\\t\\t\\tstring memory gapValue = \\\"0\\\";\\n\\t\\t\\tif (_numSquares != 1) {\\n\\t\\t\\t\\tif (_seed & 0xF < 4) (gapAttribute, gapValue) = (\\\"None\\\", \\\"0\\\");\\n\\t\\t\\t\\telse if (_seed & 0xF < 13) (gapAttribute, gapValue) = (\\\"Narrow\\\", \\\"2\\\");\\n\\t\\t\\t\\telse if (_seed & 0xF < 15) (gapAttribute, gapValue) = (\\\"Wide\\\", \\\"12\\\");\\n\\t\\t\\t\\telse (gapAttribute, gapValue) = (\\\"Ultrawide\\\", \\\"24\\\");\\n\\n\\t\\t\\t\\tattributes = string(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\tattributes,\\n\\t\\t\\t\\t\\t\\t',{\\\"trait_type\\\":\\\"Gap\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\tgapAttribute,\\n\\t\\t\\t\\t\\t\\t'\\\"}'\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tstyles = string(abi.encodePacked(styles, gapValue, \\\"px;--d:\\\"));\\n\\t\\t}\\n\\t\\t_seed >>= 4;\\n\\n\\t\\t{\\n\\t\\t\\tstring memory heightAttribute;\\n\\t\\t\\tstring memory heightValue;\\n\\t\\t\\tif (_seed & 0x3F < 1) (heightAttribute, heightValue) = (\\\"Plane\\\", \\\"8\\\");\\n\\t\\t\\telse if (_seed & 0x3F < 11)\\n\\t\\t\\t\\t(heightAttribute, heightValue) = (\\\"1/4\\\", \\\"98\\\");\\n\\t\\t\\telse if (_seed & 0x3F < 21)\\n\\t\\t\\t\\t(heightAttribute, heightValue) = (\\\"1/2\\\", \\\"197\\\");\\n\\t\\t\\telse if (_seed & 0x3F < 51)\\n\\t\\t\\t\\t(heightAttribute, heightValue) = (\\\"Cube\\\", \\\"394\\\");\\n\\t\\t\\telse (heightAttribute, heightValue) = (\\\"Infinite\\\", \\\"1000\\\");\\n\\n\\t\\t\\tattributes = string(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tattributes,\\n\\t\\t\\t\\t\\t',{\\\"trait_type\\\":\\\"Height\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\theightAttribute,\\n\\t\\t\\t\\t\\t'\\\"}'\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t\\tstyles = string(abi.encodePacked(styles, heightValue, \\\"px;\\\"));\\n\\t\\t}\\n\\t\\t_seed >>= 6;\\n\\n\\t\\t{\\n\\t\\t\\tstring memory tempAttribute;\\n\\t\\t\\tuint256 colorTheme;\\n\\t\\t\\tif (_seed & 0x1F < 25) {\\n\\t\\t\\t\\tcolorTheme = (_seed >> 5) & 0xFFFFFF;\\n\\t\\t\\t\\tattributes = string(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\tattributes,\\n\\t\\t\\t\\t\\t\\t',{\\\"trait_type\\\":\\\"Base Color\\\",\\\"value\\\":',\\n\\t\\t\\t\\t\\t\\tcolorTheme.toString(),\\n\\t\\t\\t\\t\\t\\t\\\"}\\\"\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tif (_seed & 0x1F < 7) {\\n\\t\\t\\t\\t\\ttempAttribute = \\\"Uniform\\\";\\n\\t\\t\\t\\t\\tcolorTheme =\\n\\t\\t\\t\\t\\t\\t(colorTheme << 0x60) |\\n\\t\\t\\t\\t\\t\\t(colorTheme << 0x48) |\\n\\t\\t\\t\\t\\t\\t(colorTheme << 0x30) |\\n\\t\\t\\t\\t\\t\\t(colorTheme << 0x18) |\\n\\t\\t\\t\\t\\t\\tcomplementColor(colorTheme);\\n\\t\\t\\t\\t} else if (_seed & 0x1F < 14) {\\n\\t\\t\\t\\t\\ttempAttribute = \\\"Shades\\\";\\n\\t\\t\\t\\t\\tcolorTheme =\\n\\t\\t\\t\\t\\t\\t(darkenColor(colorTheme, 3) << 0x60) |\\n\\t\\t\\t\\t\\t\\t(darkenColor(colorTheme, 1) << 0x48) |\\n\\t\\t\\t\\t\\t\\t(darkenColor(colorTheme, 2) << 0x30) |\\n\\t\\t\\t\\t\\t\\t(colorTheme << 0x18) |\\n\\t\\t\\t\\t\\t\\tcomplementColor(colorTheme);\\n\\t\\t\\t\\t} else if (_seed & 0x1F < 21) {\\n\\t\\t\\t\\t\\ttempAttribute = \\\"Tints\\\";\\n\\t\\t\\t\\t\\tcolorTheme =\\n\\t\\t\\t\\t\\t\\t(brightenColor(colorTheme, 3) << 0x60) |\\n\\t\\t\\t\\t\\t\\t(brightenColor(colorTheme, 1) << 0x48) |\\n\\t\\t\\t\\t\\t\\t(brightenColor(colorTheme, 2) << 0x30) |\\n\\t\\t\\t\\t\\t\\t(colorTheme << 0x18) |\\n\\t\\t\\t\\t\\t\\tcomplementColor(colorTheme);\\n\\t\\t\\t\\t} else if (_seed & 0x1F < 24) {\\n\\t\\t\\t\\t\\ttempAttribute = \\\"Eclipse\\\";\\n\\t\\t\\t\\t\\tcolorTheme =\\n\\t\\t\\t\\t\\t\\t(colorTheme << 0x60) |\\n\\t\\t\\t\\t\\t\\t(0xFFFFFF << 0x48) |\\n\\t\\t\\t\\t\\t\\t(colorTheme << 0x18) |\\n\\t\\t\\t\\t\\t\\tcomplementColor(colorTheme);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttempAttribute = \\\"Void\\\";\\n\\t\\t\\t\\t\\tcolorTheme =\\n\\t\\t\\t\\t\\t\\t(complementColor(colorTheme) << 0x60) |\\n\\t\\t\\t\\t\\t\\t(colorTheme << 0x18) |\\n\\t\\t\\t\\t\\t\\tcomplementColor(colorTheme);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttempAttribute = \\\"Curated\\\";\\n\\t\\t\\t\\t_seed >>= 5;\\n\\n\\t\\t\\t\\tattributes = string(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\tattributes,\\n\\t\\t\\t\\t\\t\\t',{\\\"trait_type\\\":\\\"Color Theme\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\t\\t\\\"Nord\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\\"B/W\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\\"Candycorn\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\\"RGB\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\\"VSCode\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\\"Neon\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\\"Jungle\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\\"Corn\\\"\\n\\t\\t\\t\\t\\t\\t][_seed & 7],\\n\\t\\t\\t\\t\\t\\t'\\\"}'\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tcolorTheme = [\\n\\t\\t\\t\\t\\t0x8FBCBBEBCB8BD087705E81ACB48EAD000000FFFFFFFFFFFFFFFFFF000000,\\n\\t\\t\\t\\t\\t0x0D3B66F4D35EEE964BFAF0CAF95738FFFF0000FF000000FFFF0000FFFF00,\\n\\t\\t\\t\\t\\t0x1E1E1E569CD6D2D1A2BA7FB54DC4AC00FFFFFFFF000000FF00FF00FF00FF,\\n\\t\\t\\t\\t\\t0xBE3400015045020D22EABAACBE3400F9C233705860211A28346830F9C233\\n\\t\\t\\t\\t][(_seed & 7) >> 1];\\n\\t\\t\\t\\tcolorTheme = _seed & 1 == 0\\n\\t\\t\\t\\t\\t? colorTheme >> 0x78\\n\\t\\t\\t\\t\\t: colorTheme & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\t\\t\\t}\\n\\t\\t\\tattributes = string(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tattributes,\\n\\t\\t\\t\\t\\t',{\\\"trait_type\\\":\\\"Color Generation\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\ttempAttribute,\\n\\t\\t\\t\\t\\t'\\\"}'\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t\\tstyles = string(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tstyles,\\n\\t\\t\\t\\t\\t\\\"--e:\\\",\\n\\t\\t\\t\\t\\ttoColorHexString(colorTheme >> 0x60),\\n\\t\\t\\t\\t\\t\\\";--f:\\\",\\n\\t\\t\\t\\t\\ttoColorHexString((colorTheme >> 0x48) & 0xFFFFFF),\\n\\t\\t\\t\\t\\t\\\";--g:\\\",\\n\\t\\t\\t\\t\\ttoColorHexString((colorTheme >> 0x30) & 0xFFFFFF),\\n\\t\\t\\t\\t\\t\\\";--h:\\\",\\n\\t\\t\\t\\t\\ttoColorHexString((colorTheme >> 0x18) & 0xFFFFFF),\\n\\t\\t\\t\\t\\t\\\";--i:\\\",\\n\\t\\t\\t\\t\\ttoColorHexString(colorTheme & 0xFFFFFF),\\n\\t\\t\\t\\t\\t\\\";\\\"\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t{\\n\\t\\t\\tstring memory tempAttribute;\\n\\t\\t\\tstyles = string(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tstyles,\\n\\t\\t\\t\\t\\tSVG_STYLES,\\n\\t\\t\\t\\t\\tStrings.toString(16 / _numSquares),\\n\\t\\t\\t\\t\\t\\\",1fr);grid-template-rows:repeat(\\\",\\n\\t\\t\\t\\t\\tStrings.toString(16 / _numSquares),\\n\\t\\t\\t\\t\\t\\\",1fr);transform:rotate(210deg)skew(-30deg)scaleY(0.864)}\\\"\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t\\tif (_numSquares != 16) {\\n\\t\\t\\t\\ttempAttribute = \\\"False\\\";\\n\\t\\t\\t\\tattributes = string(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\tattributes,\\n\\t\\t\\t\\t\\t\\t',{\\\"trait_type\\\":\\\"Bit Border\\\",\\\"value\\\":\\\"',\\n\\t\\t\\t\\t\\t\\ttempAttribute,\\n\\t\\t\\t\\t\\t\\t'\\\"}'\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tunchecked {\\n\\t\\t\\tfor (uint256 i; i < 31; ++i) {\\n\\t\\t\\t\\tstyles = string(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\tstyles,\\n\\t\\t\\t\\t\\t\\t\\\".r\\\",\\n\\t\\t\\t\\t\\t\\ti.toString(),\\n\\t\\t\\t\\t\\t\\t\\\"{top:calc(var(--o) + \\\",\\n\\t\\t\\t\\t\\t\\ti.toString(),\\n\\t\\t\\t\\t\\t\\t\\\"*(var(--n)/2 + var(--c)))}\\\"\\n\\t\\t\\t\\t\\t\\t\\\".c\\\",\\n\\t\\t\\t\\t\\t\\ti.toString(),\\n\\t\\t\\t\\t\\t\\t\\\"{left:calc(var(--p) \\\",\\n\\t\\t\\t\\t\\t\\ti < 15 ? \\\"-\\\" : \\\"+\\\",\\n\\t\\t\\t\\t\\t\\t\\\" 0.866*\\\",\\n\\t\\t\\t\\t\\t\\ti < 15 ? (15 - i).toString() : (i - 15).toString(),\\n\\t\\t\\t\\t\\t\\t\\\"*(var(--n) + var(--c)))}\\\"\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// iterates diagonally starting from the back\\n\\t\\t\\tstring memory image;\\n\\t\\t\\tfor (uint256 row; row < (_numSquares << 1) - 1; ++row) {\\n\\t\\t\\t\\tuint256 tempCol = row <= _numSquares - 1\\n\\t\\t\\t\\t\\t? 15 - row\\n\\t\\t\\t\\t\\t: 15 - ((_numSquares << 1) - 2 - row);\\n\\t\\t\\t\\tfor (\\n\\t\\t\\t\\t\\tuint256 col = tempCol;\\n\\t\\t\\t\\t\\tcol <=\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\trow <= _numSquares - 1\\n\\t\\t\\t\\t\\t\\t\\t? tempCol + (row << 1)\\n\\t\\t\\t\\t\\t\\t\\t: tempCol + (((_numSquares << 1) - 2 - row) << 1)\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\tcol = col + 2\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\timage = string(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\timage,\\n\\t\\t\\t\\t\\t\\t\\tgetPillarHtml(_board, 16 / _numSquares, row, col)\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tBase64.encode(\\n\\t\\t\\t\\t\\tabi.encodePacked(styles, \\\"</style><section>\\\", image, \\\"</section>\\\")\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tattributes\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Returns the HTML for a particular pillar within the image.\\n\\t/// @param _board The board after the player's and engine's move are played.\\n\\t/// @param _dim The dimension of the bits within a pillar.\\n\\t/// @param _row The row index of the pillar.\\n\\t/// @param _col The column index of the pillar.\\n\\t/// @return The HTML for the pillar described by the parameters.\\n\\tfunction getPillarHtml(\\n\\t\\tuint256 _board,\\n\\t\\tuint256 _dim,\\n\\t\\tuint256 _row,\\n\\t\\tuint256 _col\\n\\t) internal pure returns (string memory) {\\n\\t\\tstring memory pillar = string(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'<div class=\\\"c r',\\n\\t\\t\\t\\t_row.toString(),\\n\\t\\t\\t\\t\\\" c\\\",\\n\\t\\t\\t\\t_col.toString(),\\n\\t\\t\\t\\t'\\\"><div></div><div></div><div>'\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tuint256 x;\\n\\t\\tuint256 y;\\n\\t\\tuint256 colOffset;\\n\\t\\tuint256 rowOffset;\\n\\t\\tunchecked {\\n\\t\\t\\tfor (\\n\\t\\t\\t\\tuint256 subRow = _row * _dim + ((_dim - 1) << 1);\\n\\t\\t\\t\\tsubRow >= _row * _dim + (_dim - 1);\\n\\t\\t\\t\\t--subRow\\n\\t\\t\\t) {\\n\\t\\t\\t\\trowOffset = 0;\\n\\t\\t\\t\\tuint256 tempSubCol = _col <= 15\\n\\t\\t\\t\\t\\t? 15 - _dim * (15 - _col) + colOffset\\n\\t\\t\\t\\t\\t: 15 + _dim * (_col - 15) + colOffset;\\n\\t\\t\\t\\tfor (\\n\\t\\t\\t\\t\\tuint256 subCol = tempSubCol;\\n\\t\\t\\t\\t\\tsubCol >= tempSubCol + 1 - _dim;\\n\\t\\t\\t\\t\\t--subCol\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tx = 15 - ((15 + subCol - (subRow - rowOffset)) >> 1);\\n\\t\\t\\t\\t\\ty = 22 - ((subCol + subRow - rowOffset) >> 1);\\n\\n\\t\\t\\t\\t\\t// (board >> (transformedPosition * 4)) >> [1,3,0,2]\\n\\t\\t\\t\\t\\tpillar = string(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\tpillar,\\n\\t\\t\\t\\t\\t\\t\\t'<div id=\\\"',\\n\\t\\t\\t\\t\\t\\t\\t((_board >> ((8 * (y >> 1) + (x >> 1)) << 2)) >>\\n\\t\\t\\t\\t\\t\\t\\t\\t(((0xD8 >> ((x & 1) << 2)) >> ((y & 1) << 1)) & 3)) &\\n\\t\\t\\t\\t\\t\\t\\t\\t1 ==\\n\\t\\t\\t\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\t\\t\\t\\t\\t? \\\"h\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t: \\\"i\\\",\\n\\t\\t\\t\\t\\t\\t\\t'\\\"></div>'\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\trowOffset++;\\n\\t\\t\\t\\t\\tif (subCol == 0) break;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcolOffset++;\\n\\t\\t\\t\\tif (subRow == 0) break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn string(abi.encodePacked(pillar, \\\"</div></div>\\\"));\\n\\t}\\n\\n\\t/// @notice Computes the complement of 24-bit colors.\\n\\t/// @param _color A 24-bit color.\\n\\t/// @return The complement of `_color`.\\n\\tfunction complementColor(uint256 _color) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn 0xFFFFFF - _color;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Darkens 24-bit colors.\\n\\t/// @param _color A 24-bit color.\\n\\t/// @param _num The number of shades to darken by.\\n\\t/// @return `_color` darkened `_num` times.\\n\\tfunction darkenColor(\\n\\t\\tuint256 _color,\\n\\t\\tuint256 _num\\n\\t) internal pure returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(((_color >> 0x10) >> _num) << 0x10) |\\n\\t\\t\\t((((_color >> 8) & 0xFF) >> _num) << 8) |\\n\\t\\t\\t((_color & 0xFF) >> _num);\\n\\t}\\n\\n\\t/// @notice Brightens 24-bit colors.\\n\\t/// @param _color A 24-bit color.\\n\\t/// @param _num The number of tints to brighten by.\\n\\t/// @return `_color` brightened `_num` times.\\n\\tfunction brightenColor(\\n\\t\\tuint256 _color,\\n\\t\\tuint256 _num\\n\\t) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\treturn\\n\\t\\t\\t\\t((0xFF - ((0xFF - (_color >> 0x10)) >> _num)) << 0x10) |\\n\\t\\t\\t\\t((0xFF - ((0xFF - ((_color >> 8) & 0xFF)) >> _num)) << 8) |\\n\\t\\t\\t\\t(0xFF - ((0xFF - (_color & 0xFF)) >> _num));\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Returns the color hex string of a 24-bit color.\\n\\t/// @param _integer A 24-bit color.\\n\\t/// @return The color hex string of `_integer`.\\n\\tfunction toColorHexString(\\n\\t\\tuint256 _integer\\n\\t) internal pure returns (string memory) {\\n\\t\\treturn\\n\\t\\t\\tstring(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"#\\\",\\n\\t\\t\\t\\t\\tHEXADECIMAL_DIGITS[(_integer >> 0x14) & 0xF],\\n\\t\\t\\t\\t\\tHEXADECIMAL_DIGITS[(_integer >> 0x10) & 0xF],\\n\\t\\t\\t\\t\\tHEXADECIMAL_DIGITS[(_integer >> 0xC) & 0xF],\\n\\t\\t\\t\\t\\tHEXADECIMAL_DIGITS[(_integer >> 8) & 0xF],\\n\\t\\t\\t\\t\\tHEXADECIMAL_DIGITS[(_integer >> 4) & 0xF],\\n\\t\\t\\t\\t\\tHEXADECIMAL_DIGITS[_integer & 0xF]\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @notice Draws out a move being played out on a board position as a string with unicode\\n\\t/// characters to represent pieces. Files and rows are labeled with standard algebraic\\n\\t/// notation. For example:\\n\\t/// ```\\n\\t/// 6 \\u265c \\u265d \\u265b \\u265a \\u265d \\u265c\\n\\t/// 5 \\u265f \\u265f \\u265f \\u265f \\u265f \\u265f\\n\\t/// 4 \\u00b7 \\u00b7 \\u00b7 \\u00b7 \\u00b7 \\u00b7\\n\\t/// 3 \\u00b7 \\u00b7 \\u2659 \\u00b7 \\u00b7 \\u00b7\\n\\t/// 2 \\u2659 \\u2659 * \\u2659 \\u2659 \\u2659\\n\\t/// 1 \\u2656 \\u2658 \\u2655 \\u2654 \\u2658 \\u2656\\n\\t///  a b c d e f\\n\\t/// ```\\n\\t/// * indicates the square the piece moved from.\\n\\t/// @param _board The board the move is played on.\\n\\t/// @return The string showing the move played out on the board.\\n\\tfunction drawMove(uint256 _board) internal pure returns (string memory) {\\n\\t\\tstring memory boardString = \\\"```\\\\\\\\n\\\";\\n\\n\\t\\tfor (uint256 index = 63; index != 0; index--) {\\n\\t\\t\\tuint256 indexToDraw = index;\\n\\t\\t\\tboardString = string(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tboardString,\\n\\t\\t\\t\\t\\tindexToDraw & 7 == 7\\n\\t\\t\\t\\t\\t\\t? string(\\n\\t\\t\\t\\t\\t\\t\\tabi.encodePacked(Strings.toString((indexToDraw >> 3) + 1), \\\" \\\")\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t: \\\"\\\",\\n\\t\\t\\t\\t\\tgetPieceChar((_board >> (indexToDraw << 2)) & 0xF),\\n\\t\\t\\t\\t\\tindexToDraw & 7 == 0 && indexToDraw != 0 ? \\\"\\\\\\\\n\\\" : indexToDraw != 0\\n\\t\\t\\t\\t\\t\\t? \\\" \\\"\\n\\t\\t\\t\\t\\t\\t: \\\"\\\"\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tboardString = string(\\n\\t\\t\\tabi.encodePacked(boardString, \\\"\\\\\\\\n  a b c d e f g h\\\\\\\\n```\\\")\\n\\t\\t);\\n\\n\\t\\treturn boardString;\\n\\t}\\n\\n\\t/// @notice Maps pieces to its corresponding unicode character.\\n\\t/// @param _piece A piece.\\n\\t/// @return The unicode character corresponding to `_piece`. It returns ``.'' otherwise.\\n\\tfunction getPieceChar(uint256 _piece) internal pure returns (string memory) {\\n\\t\\tif (_piece == 1) return unicode\\\"\\u265f\\\";\\n\\t\\tif (_piece == 2) return unicode\\\"\\u265d\\\";\\n\\t\\tif (_piece == 3) return unicode\\\"\\u265c\\\";\\n\\t\\tif (_piece == 4) return unicode\\\"\\u265e\\\";\\n\\t\\tif (_piece == 5) return unicode\\\"\\u265b\\\";\\n\\t\\tif (_piece == 6) return unicode\\\"\\u265a\\\";\\n\\t\\tif (_piece == 9) return unicode\\\"\\u2659\\\";\\n\\t\\tif (_piece == 0xA) return unicode\\\"\\u2657\\\";\\n\\t\\tif (_piece == 0xB) return unicode\\\"\\u2656\\\";\\n\\t\\tif (_piece == 0xC) return unicode\\\"\\u2658\\\";\\n\\t\\tif (_piece == 0xD) return unicode\\\"\\u2655\\\";\\n\\t\\tif (_piece == 0xE) return unicode\\\"\\u2654\\\";\\n\\t\\treturn unicode\\\"\\u00b7\\\";\\n\\t}\\n}\\n\",\"keccak256\":\"0x97e243e5f48e709acd3eca5b34c1c49fe2b94a6143519cd957aed472257d826d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004cc938038062004cc9833981016040819052620000349162000111565b60408051602081019091526000815281906200005081620000ad565b506001600160a01b0381166200008057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200008b81620000bf565b505066071afd498d0000600555603260065560286007556000600855620002b4565b6002620000bb8282620001e8565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200012457600080fd5b81516001600160a01b03811681146200013c57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200016e57607f821691505b6020821081036200018f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001e357600081815260208120601f850160051c81016020861015620001be5750805b601f850160051c820191505b81811015620001df57828155600101620001ca565b5050505b505050565b81516001600160401b0381111562000204576200020462000143565b6200021c8162000215845462000159565b8462000195565b602080601f8311600181146200025457600084156200023b5750858301515b600019600386901b1c1916600185901b178555620001df565b600085815260208120601f198616915b82811015620002855788860151825594840194600190910190840162000264565b5085821015620002a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b614a0580620002c46000396000f3fe6080604052600436106101c15760003560e01c806363a86201116100f7578063a22cb46511610095578063e985e9c511610064578063e985e9c514610521578063f242432a14610541578063f2fde38b14610561578063f844bb2a1461058157600080fd5b8063a22cb465146104a1578063a2dfe7b5146104c1578063c1fa6478146104e1578063e84dee6b1461050157600080fd5b80638a062ab7116100d15780638a062ab7146104195780638da5cb5b14610439578063900f58fc14610461578063a0712d681461048e57600080fd5b806363a862011461039a578063715018a6146103e45780637cb64759146103f957600080fd5b80632eb4a7ab116101645780633ccfd60b1161013e5780633ccfd60b1461032257806349aeaf16146103375780634e1273f41461034d5780635a23dd991461037a57600080fd5b80632eb4a7ab146102e0578063342e4cbf146102f65780633924727d1461030c57600080fd5b80630e89341c116101a05780630e89341c1461025b57806312e8e2c31461028857806326232a2e146102aa5780632eb2c2d6146102c057600080fd5b8062fdd58e146101c657806301ffc9a7146101f9578063031fc54014610229575b600080fd5b3480156101d257600080fd5b506101e66101e136600461305a565b6105cb565b6040519081526020015b60405180910390f35b34801561020557600080fd5b5061021961021436600461309a565b6105f3565b60405190151581526020016101f0565b34801561023557600080fd5b506102496102443660046130b7565b610643565b6040516101f096959493929190613120565b34801561026757600080fd5b5061027b6102763660046130b7565b610795565b6040516101f09190613176565b34801561029457600080fd5b506102a86102a33660046130b7565b6107b5565b005b3480156102b657600080fd5b506101e660075481565b3480156102cc57600080fd5b506102a86102db3660046132cc565b6107c2565b3480156102ec57600080fd5b506101e660085481565b34801561030257600080fd5b506101e660065481565b34801561031857600080fd5b506101e660045481565b34801561032e57600080fd5b506102a861082e565b34801561034357600080fd5b506101e660055481565b34801561035957600080fd5b5061036d610368366004613375565b6108ac565b6040516101f0919061346f565b34801561038657600080fd5b506102196103953660046134cd565b610980565b3480156103a657600080fd5b506102196103b536600461351f565b60008281526009602090815260408083206001600160a01b038516845260020190915290205460ff1692915050565b3480156103f057600080fd5b506102a8610a04565b34801561040557600080fd5b506102a86104143660046130b7565b610a18565b34801561042557600080fd5b506102a86104343660046130b7565b610a25565b34801561044557600080fd5b506003546040516001600160a01b0390911681526020016101f0565b34801561046d57600080fd5b506101e661047c36600461354b565b600a6020526000908152604090205481565b6102a861049c3660046130b7565b610a32565b3480156104ad57600080fd5b506102a86104bc366004613566565b610b60565b3480156104cd57600080fd5b506102a86104dc3660046130b7565b610b6f565b3480156104ed57600080fd5b506102a86104fc3660046135e3565b610b7c565b34801561050d57600080fd5b5061021961051c36600461368f565b610cbb565b34801561052d57600080fd5b5061021961053c3660046136cb565b610e0f565b34801561054d57600080fd5b506102a861055c3660046136f5565b610e3d565b34801561056d57600080fd5b506102a861057c36600461354b565b610e9c565b34801561058d57600080fd5b5061021961059c36600461351f565b60008281526009602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061062457506001600160e01b031982166303a24d0760e21b145b806105ed57506301ffc9a760e01b6001600160e01b03198316146105ed565b60096020526000908152604090208054819061065e90613759565b80601f016020809104026020016040519081016040528092919081815260200182805461068a90613759565b80156106d75780601f106106ac576101008083540402835291602001916106d7565b820191906000526020600020905b8154815290600101906020018083116106ba57829003601f168201915b5050506001840154600485015460058601546006870154600788018054979894979396509194506001600160a01b0316929161071290613759565b80601f016020809104026020016040519081016040528092919081815260200182805461073e90613759565b801561078b5780601f106107605761010080835404028352916020019161078b565b820191906000526020600020905b81548152906001019060200180831161076e57829003601f168201915b5050505050905086565b6000818152600960205260409020600501546060906105ed908390610eda565b6107bd610fd4565b600755565b336001600160a01b03861681148015906107e357506107e18682610e0f565b155b156108195760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044015b60405180910390fd5b6108268686868686611001565b505050505050565b610836610fd4565b6040514790339082156108fc029083906000818181858888f19350505050158015610865573d6000803e3d6000fd5b507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436433604080516001600160a01b039092168252602082018490520160405180910390a150565b606081518351146108dd5781518351604051635b05999160e01b815260048101929092526024820152604401610810565b600083516001600160401b038111156108f8576108f8613189565b604051908082528060200260200182016040528015610921578160200160208202803683370190505b50905060005b84518110156109785760208082028601015161094b906020808402870101516105cb565b82828151811061095d5761095d613793565b6020908102919091010152610971816137bf565b9050610927565b509392505050565b6008546040516bffffffffffffffffffffffff19606086901b1660208201526000916109fc91603401604051602081830303815290604052805190602001208585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509294939250506110689050565b949350505050565b610a0c610fd4565b610a16600061107e565b565b610a20610fd4565b600855565b610a2d610fd4565b600655565b600554341015610a625760055460405163f9309a0960e01b81523460048201526024810191909152604401610810565b6000818152600960209081526040808320338452600281019092529091205460ff16610aa45760405163f88c066b60e01b815260048101839052602401610810565b610ac033836001604051806020016040528060008152506110d0565b6040805183815233602082015281517f3a5398bda6f1f57d6c96834fa9bf02b5517bdc847d14312015a917ba421c31c9929181900390910190a160068101546007546001600160a01b03909116906108fc90606490610b1f90826137d8565b610b2990346137eb565b610b339190613818565b6040518115909202916000818181858888f19350505050158015610b5b573d6000803e3d6000fd5b505050565b610b6b33838361112d565b5050565b610b77610fd4565b600555565b610b87338383610980565b610ba6576040516310f8e8d760e31b8152336004820152602401610810565b6000879003610bcc5787876040516368cd81e760e01b8152600401610810929190613863565b84600003610bf85760048054604051636316501d60e11b81529182015260248101869052604401610810565b610c0460045486610eda565b50600454600081815260096020526040902080610c228a8c836138bd565b50600181018890556006810180546001600160a01b031916331790556103e8600482015560078101610c558688836138bd565b5060058101879055600454610c6b90600161397c565b6004557fa6e71fb039b9c89d5faacf005220199fe3fe392f87cadf25b757f7e7a0817bf6828b8b8b8b33604051610ca79695949392919061398f565b60405180910390a150505050505050505050565b60006004548310610ce1576040516255ac0b60e31b815260048101849052602401610810565b6000838152600960209081526040808320338452600381019092529091205460ff1615610d2457604051636ab2c49160e01b815260048101859052602401610810565b33600081815260038301602052604090819020805460ff19166001179055517f712c1b1ad89e8e16ccdc5cec4c1b22713e1d68a25e895b87e30db54bf197f7ce91610d739187919087906139d0565b60405180910390a182516020840120600182015403610dfa573360009081526002820160205260409020805460ff19166001908117909155610db69085906111c3565b6040805185815233602082015281517ff7c67880b72ec988961e570ae4e849eb4fd9d5ba0ab550624ac429ef6d41880c929181900390910190a160019150506105ed565b610e058460006111c3565b60009150506105ed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b0386168114801590610e5e5750610e5c8682610e0f565b155b15610e8f5760405163711bec9160e11b81526001600160a01b03808316600483015287166024820152604401610810565b610826868686868661134f565b610ea4610fd4565b6001600160a01b038116610ece57604051631e4fbdf760e01b815260006004820152602401610810565b610ed78161107e565b50565b606080606080600060089050600087604051602001610efb91815260200190565b6040516020818303038152906040528051906020012060001c9050610f218783836113dd565b9094509250610f339150869050611f4e565b604051602001610f439190613a1f565b6040516020818303038152906040529250610faa610f64608088901c6120a9565b610f7f886fffffffffffffffffffffffffffffffff166120a9565b858585604051602001610f96959493929190613a4e565b60405160208183030381529060405261213b565b604051602001610fba9190613b6b565b604051602081830303815290604052935050505092915050565b6003546001600160a01b03163314610a165760405163118cdaa760e01b8152336004820152602401610810565b6001600160a01b03841661102b57604051632bfa23e760e11b815260006004820152602401610810565b6001600160a01b03851661105457604051626a0d4560e21b815260006004820152602401610810565b611061858585858561229a565b5050505050565b60008261107585846122ed565b14949350505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166110fa57604051632bfa23e760e11b815260006004820152602401610810565b6040805160018082526020820186905281830190815260608201859052608082019092529061082660008784848761229a565b6001600160a01b0382166111565760405162ced3e160e81b815260006004820152602401610810565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008281526009602090815260408083206004810154338552600a9093529083205490928190036112065750336000908152600a602052604090206103e8908190555b60008061122883858861121a57600061121d565b60645b60ff16600654612332565b9092509050611238606483613818565b9150801561128557336000908152600a60205260408120805484929061125f9084906137d8565b925050819055508185600401600082825461127a919061397c565b909155506112c59050565b336000908152600a6020526040812080548492906112a490849061397c565b92505081905550818560040160008282546112bf91906137d8565b90915550505b60408051888152602081018690527fedf7d7629bae89d536e79c07544cf71dc20f2e5a6c44820bc95943ae5d392e8f910160405180910390a1336000818152600a6020908152604091829020548251938452908301527f7c9d26a9c3f761e124a1b3f4aaf8fe9deeffa947fbdabd8b085dab884a2a04be910160405180910390a150505050505050565b6001600160a01b03841661137957604051632bfa23e760e11b815260006004820152602401610810565b6001600160a01b0385166113a257604051626a0d4560e21b815260006004820152602401610810565b604080516001808252602082018690528183019081526060820185905260808201909252906113d4878784848761229a565b50505050505050565b60608060006113eb856120a9565b6113f4866120a9565b604051602001611405929190613bb0565b60405160208183030381529060405290506000611421866120a9565b6040516020016114319190613c33565b60408051601f198184030181528282019091526001808352600360fc1b602084015290925060609190881461159a57600487600f1610156114a757505060408051808201825260048152634e6f6e6560e01b602080830191909152825180840190935260018352600360fc1b9083015290611575565b600d87600f1610156114f057505060408051808201825260068152654e6172726f7760d01b602080830191909152825180840190935260018352601960f91b9083015290611575565b600f87600f16101561153857505060408051808201825260048152635769646560e01b60208083019190915282518084019093526002835261189960f11b9083015290611575565b50506040805180820182526009815268556c7472617769646560b81b602080830191909152825180840190935260028352610c8d60f21b90830152905b8382604051602001611588929190613c87565b60405160208183030381529060405293505b82816040516020016115ad929190613cee565b60405160208183030381529060405292505050600485901c9450606080600187603f1610156116125750506040805180820182526005815264506c616e6560d81b602080830191909152825180840190935260018352600760fb1b9083015290611728565b600b87603f16101561165957505060408051808201825260038152620c4bcd60ea1b60208083019190915282518084019093526002835261072760f31b9083015290611728565b601587603f1610156116a157505060408051808201825260038082526218979960e91b60208084019190915283518085019094529083526231393760e81b9083015290611728565b603387603f1610156116ea57505060408051808201825260048152634375626560e01b602080830191909152825180840190935260038352620cce4d60ea1b9083015290611728565b50506040805180820182526008815267496e66696e69746560c01b602080830191909152825180840190935260048352630313030360e41b90830152905b838260405160200161173b929190613d2f565b6040516020818303038152906040529350828160405160200161175f929190613da1565b60405160208183030381529060405292505050600685901c945060606000601987601f161015611a22575062ffffff600587901c168361179e826120a9565b6040516020016117af929190613dde565b6040516020818303038152906040529350600787601f1610156118195760405180604001604052806007815260200166556e69666f726d60c81b81525091506117fa8162ffffff0390565b601882901b603083901b604884901b606085901b171717179050611c64565b600e87601f1610156118c9576040518060400160405280600681526020016553686164657360d01b81525091506118528162ffffff0390565b601882901b603062010000600160fe1b03600285901c908116613f00821617603f90911617901b604862010000600160ff1b03600186901c908116617f00821617607f90911617901b606062010000600160fd1b03600387901c908116611f00821617601f909116175b901b171717179050611c64565b601587601f16101561197e576040518060400160405280600581526020016454696e747360d81b81525091506119018162ffffff0390565b601882901b601083811c60ff908103600281811c8303841b600888811c8516850380841c8603821b92909217858a1686039384901c86031760301b95600185811c8703821b84821c8803841b179085901c87031760481b95606095600390811c820390921b93821c810390921b929092179290911c9003176118bc565b601887601f1610156119d9576040518060400160405280600781526020016645636c6970736560c81b81525091506119b88162ffffff0390565b601882901b606083901b6bffffff0000000000000000001717179050611c64565b60405180604001604052806004815260200163159bda5960e21b8152509150611a048162ffffff0390565b601882901b6060611a178462ffffff0390565b901b17179050611c64565b60408051808201825260078082526610dd5c985d195960ca1b6020808401919091528351610140810185526004610100820181815263139bdc9960e21b610120840152825285518087018752600380825262422f5760e81b828601528385019190915286518088018852600981526821b0b7323cb1b7b93760b91b818601528388015286518088018852908152622923a160e91b818501526060830152855180870187526006808252655653436f646560d01b82860152608084019190915286518088018852828152632732b7b760e11b8186015260a084015286518088018852908152654a756e676c6560d01b8185015260c0830152855180870190965285526321b7b93760e11b9185019190915260e081019390935260059990991c98909350859190891660088110611b5957611b59613793565b6020020151604051602001611b6f929190613e52565b60408051601f198184030181526080830182527d8fbcbbebcb8bd087705e81acb48ead000000ffffffffffffffffff00000083527d0d3b66f4d35eee964bfaf0caf95738ffff0000ff000000ffff0000ffff0060208401527d1e1e1e569cd6d2d1a2ba7fb54dc4ac00ffffffff000000ff00ff00ff00ff918301919091527dbe3400015045020d22eabaacbe3400f9c233705860211a28346830f9c233606083015294506003600189901c1660048110611c2b57611c2b613793565b60200201516001600160f01b031690506001871615611c5b57806effffffffffffffffffffffffffffff16611c61565b607881901c5b90505b8382604051602001611c77929190613ec9565b604051602081830303815290604052935082611c96606083901c612478565b611ca8604884901c62ffffff16612478565b611cba603085901c62ffffff16612478565b611ccc601886901c62ffffff16612478565b611cda8662ffffff16612478565b604051602001611cef96959493929190613f45565b60408051601f198184030181526103e083019091526103c0808352909450606093508492506146106020830139611d2f611d2a8a6010613818565b6120a9565b611d3d611d2a8b6010613818565b604051602001611d50949392919061401a565b604051602081830303815290604052915086601014611dae576040518060400160405280600581526020016446616c736560d81b81525090508281604051602001611d9c9291906140e6565b60405160208183030381529060405292505b5060005b601f811015611e6d5781611dc5826120a9565b611dce836120a9565b611dd7846120a9565b600f8510611dfe57604051806040016040528060018152602001602b60f81b815250611e19565b604051806040016040528060018152602001602d60f81b8152505b600f8610611e3257611e2d600f87036120a9565b611e3e565b611e3e86600f036120a9565b604051602001611e539695949392919061415c565b60408051601f198184030181529190529150600101611db2565b50606060005b60018089901b03811015611f2957600060018903821115611ea05781600260018b901b0303600f03611ea5565b81600f035b9050805b60018a03831115611ec957600183600260018d901b0303901b8201611ed1565b600183901b82015b8111611f1f5783611ef48c8c601081611eec57611eec613802565b0486856125f5565b604051602001611f05929190614284565b60408051601f198184030181529190529350600201611ea9565b5050600101611e73565b50611f408282604051602001610f969291906142b3565b989297509195505050505050565b6040805180820190915260058152643030302e3760d91b6020820152606090603f5b8015612080578082600780831614611f975760405180602001604052806000815250611fc9565b611fa9611d2a600384901c600161397c565b604051602001611fb99190614316565b6040516020818303038152906040525b611fdc600284901b88901c600f166127a5565b60078416158015611fec57508315155b61202c578360000361200d5760405180602001604052806000815250612048565b604051806040016040528060018152602001600160fd1b815250612048565b604051806040016040528060028152602001612e3760f11b8152505b60405160200161205b949392919061433b565b604051602081830303815290604052925050808061207890614392565b915050611f70565b508060405160200161209291906143a9565b60408051601f198184030181529190529392505050565b606060006120b683612999565b60010190506000816001600160401b038111156120d5576120d5613189565b6040519080825280601f01601f1916602001820160405280156120ff576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461210957509392505050565b6060815160000361215a57505060408051602081019091526000815290565b60006040518060600160405280604081526020016145d06040913990506000600260038551600261218b919061397c565b6121959190613818565b901b905060006121a682602061397c565b6001600160401b038111156121bd576121bd613189565b6040519080825280601f01601f1916602001820160405280156121e7576020820181803683370190505b509050818152600183018586518101602084015b818310156122555760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016121fb565b60038951066001811461226f57600281146122805761228c565b613d3d60f01b60011983015261228c565b603d60f81b6000198301525b509398975050505050505050565b6122a685858585612a71565b6001600160a01b0384161561106157825133906001036122df57602084810151908401516122d8838989858589612c8e565b5050610826565b610826818787878787612db2565b600081815b84518110156109785761231e8286838151811061231157612311613793565b6020026020010151612e9b565b91508061232a816137bf565b9150506122f2565b6000806127108302868610828161234b5788880361234f565b8789035b905061046681106123a25760405162461bcd60e51b815260206004820152601b60248201527f526174696e6720646966666572656e636520746f6f206c6172676500000000006044820152606401610810565b81156123f95761032081106123f95760405162461bcd60e51b815260206004820152601b60248201527f526174696e6720646966666572656e636520746f6f206c6172676500000000006044820152606401610810565b600080600080600086612410578561032001612416565b85610320035b9450612428600a601987046001612ecd565b935061243384612f8a565b925082606401888161244757612447613802565b0491508b8b02905081811098508861246157818103612465565b8082035b9950505050505050505094509492505050565b60606f181899199a1a9b1b9c1ca0a121a222a360811b601483901c600f16602081106124a6576124a6613793565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b601084901c600f16602081106124d6576124d6613793565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b600c85901c600f166020811061250657612506613793565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b600886901c600f166020811061253657612536613793565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b600487901c600f166020811061256657612566613793565b1a60f81b6f181899199a1a9b1b9c1ca0a121a222a360811b87600f166020811061259257612592613793565b604051602360f81b60208201526001600160f81b0319978816602182015295871660228701529386166023860152918516602485015284166025840152901a60f81b90911660268201526027016040516020818303038152906040529050919050565b60606000612602846120a9565b61260b846120a9565b60405160200161261c9291906143ea565b60408051601f19818403018152919052905060008080808789026000198a0160011b015b60018a038a8a0201811061277557600091506000600f89111561266d5783600f8a038c02600f0101612679565b8389600f038c02600f03015b9050805b8b8260010103811061275557600184840382600f0103901c600f03965060018484830103901c601603955087600187600116901b600289600116901b60d8901c901c600316600260018a901c60018a901c60080201901b8f901c901c60011660001461270257604051806040016040528060018152602001606960f81b81525061271d565b604051806040016040528060018152602001600d60fb1b8152505b60405160200161272e92919061446d565b60408051601f1981840301815291905297506001909301928015612755576000190161267d565b50600190930192600082900361276b5750612775565b5060001901612640565b508460405160200161278791906144c6565b60405160208183030381529060405295505050505050949350505050565b6060816001036127ce575050604080518082019091526003815262e2999f60e81b602082015290565b816002036127f5575050604080518082019091526003815262e2999d60e81b602082015290565b8160030361281c57505060408051808201909152600381526238a66760ea1b602082015290565b81600403612843575050604080518082019091526003815262714ccf60e91b602082015290565b8160050361286a575050604080518082019091526003815262e2999b60e81b602082015290565b81600603612891575050604080518082019091526003815262714ccd60e91b602082015290565b816009036128b8575050604080518082019091526003815262e2999960e81b602082015290565b81600a036128df575050604080518082019091526003815262e2999760e81b602082015290565b81600b03612906575050604080518082019091526003815262714ccb60e91b602082015290565b81600c0361292d5750506040805180820190915260038152621c533360eb1b602082015290565b81600d03612954575050604080518082019091526003815262e2999560e81b602082015290565b81600e0361297b57505060408051808201909152600381526238a66560ea1b602082015290565b5050604080518082019091526002815261c2b760f01b602082015290565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106129d85772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612a04576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612a2257662386f26fc10000830492506010015b6305f5e1008310612a3a576305f5e100830492506008015b6127108310612a4e57612710830492506004015b60648310612a60576064830492506002015b600a83106105ed5760010192915050565b8051825114612aa05781518151604051635b05999160e01b815260048101929092526024820152604401610810565b3360005b8351811015612baf576020818102858101820151908501909101516001600160a01b03881615612b57576000828152602081815260408083206001600160a01b038c16845290915290205481811015612b30576040516303dee4c560e01b81526001600160a01b038a166004820152602481018290526044810183905260648101849052608401610810565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615612b9c576000828152602081815260408083206001600160a01b038b16845290915281208054839290612b9690849061397c565b90915550505b505080612ba8906137bf565b9050612aa4565b508251600103612c305760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612c21929190918252602082015260400190565b60405180910390a45050611061565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612c7f9291906144f6565b60405180910390a45050505050565b6001600160a01b0384163b156108265760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612cd2908990899088908890889060040161451b565b6020604051808303816000875af1925050508015612d0d575060408051601f3d908101601f19168201909252612d0a91810190614560565b60015b612d76573d808015612d3b576040519150601f19603f3d011682016040523d82523d6000602084013e612d40565b606091505b508051600003612d6e57604051632bfa23e760e11b81526001600160a01b0386166004820152602401610810565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b146113d457604051632bfa23e760e11b81526001600160a01b0386166004820152602401610810565b6001600160a01b0384163b156108265760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612df6908990899088908890889060040161457d565b6020604051808303816000875af1925050508015612e31575060408051601f3d908101601f19168201909252612e2e91810190614560565b60015b612e5f573d808015612d3b576040519150601f19603f3d011682016040523d82523d6000602084013e612d40565b6001600160e01b0319811663bc197c8160e01b146113d457604051632bfa23e760e11b81526001600160a01b0386166004820152602401610810565b6000818310612eb7576000828152602084905260409020612ec6565b60008381526020839052604090205b9392505050565b6000838015612f6d57600184168015612ee857859250612eec565b8392505b508260011c8460011c94505b8415612f67578560801c15612f0c57600080fd5b85860281810181811015612f1f57600080fd5b8590049650506001851615612f5c578583028387820414612f45578615612f4557600080fd5b81810181811015612f5557600080fd5b8590049350505b8460011c9450612ef8565b50610978565b838015612f7d5760009250612f81565b8392505b50509392505050565b60006105ed612f9a612f9a612f9a855b60b581600160881b8110612fb35760409190911b9060801c5b69010000000000000000008110612fcf5760209190911b9060401c5b650100000000008110612fe75760109190911b9060201c5b63010000008110612ffd5760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b80356001600160a01b038116811461305557600080fd5b919050565b6000806040838503121561306d57600080fd5b6130768361303e565b946020939093013593505050565b6001600160e01b031981168114610ed757600080fd5b6000602082840312156130ac57600080fd5b8135612ec681613084565b6000602082840312156130c957600080fd5b5035919050565b60005b838110156130eb5781810151838201526020016130d3565b50506000910152565b6000815180845261310c8160208601602086016130d0565b601f01601f19169290920160200192915050565b60c08152600061313360c08301896130f4565b6020830188905260408301879052606083018690526001600160a01b038516608084015282810360a084015261316981856130f4565b9998505050505050505050565b602081526000612ec660208301846130f4565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156131c7576131c7613189565b604052919050565b60006001600160401b038211156131e8576131e8613189565b5060051b60200190565b600082601f83011261320357600080fd5b81356020613218613213836131cf565b61319f565b82815260059290921b8401810191818101908684111561323757600080fd5b8286015b84811015613252578035835291830191830161323b565b509695505050505050565b600082601f83011261326e57600080fd5b81356001600160401b0381111561328757613287613189565b61329a601f8201601f191660200161319f565b8181528460208386010111156132af57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156132e457600080fd5b6132ed8661303e565b94506132fb6020870161303e565b935060408601356001600160401b038082111561331757600080fd5b61332389838a016131f2565b9450606088013591508082111561333957600080fd5b61334589838a016131f2565b9350608088013591508082111561335b57600080fd5b506133688882890161325d565b9150509295509295909350565b6000806040838503121561338857600080fd5b82356001600160401b038082111561339f57600080fd5b818501915085601f8301126133b357600080fd5b813560206133c3613213836131cf565b82815260059290921b840181019181810190898411156133e257600080fd5b948201945b83861015613407576133f88661303e565b825294820194908201906133e7565b9650508601359250508082111561341d57600080fd5b5061342a858286016131f2565b9150509250929050565b600081518084526020808501945080840160005b8381101561346457815187529582019590820190600101613448565b509495945050505050565b602081526000612ec66020830184613434565b60008083601f84011261349457600080fd5b5081356001600160401b038111156134ab57600080fd5b6020830191508360208260051b85010111156134c657600080fd5b9250929050565b6000806000604084860312156134e257600080fd5b6134eb8461303e565b925060208401356001600160401b0381111561350657600080fd5b61351286828701613482565b9497909650939450505050565b6000806040838503121561353257600080fd5b823591506135426020840161303e565b90509250929050565b60006020828403121561355d57600080fd5b612ec68261303e565b6000806040838503121561357957600080fd5b6135828361303e565b91506020830135801515811461359757600080fd5b809150509250929050565b60008083601f8401126135b457600080fd5b5081356001600160401b038111156135cb57600080fd5b6020830191508360208285010111156134c657600080fd5b60008060008060008060008060a0898b0312156135ff57600080fd5b88356001600160401b038082111561361657600080fd5b6136228c838d016135a2565b909a50985060208b0135975060408b0135965060608b013591508082111561364957600080fd5b6136558c838d016135a2565b909650945060808b013591508082111561366e57600080fd5b5061367b8b828c01613482565b999c989b5096995094979396929594505050565b600080604083850312156136a257600080fd5b8235915060208301356001600160401b038111156136bf57600080fd5b61342a8582860161325d565b600080604083850312156136de57600080fd5b6136e78361303e565b91506135426020840161303e565b600080600080600060a0868803121561370d57600080fd5b6137168661303e565b94506137246020870161303e565b9350604086013592506060860135915060808601356001600160401b0381111561374d57600080fd5b6133688882890161325d565b600181811c9082168061376d57607f821691505b60208210810361378d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016137d1576137d16137a9565b5060010190565b818103818111156105ed576105ed6137a9565b80820281158282048414176105ed576105ed6137a9565b634e487b7160e01b600052601260045260246000fd5b60008261383557634e487b7160e01b600052601260045260246000fd5b500490565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006109fc60208301848661383a565b601f821115610b5b57600081815260208120601f850160051c8101602086101561389e5750805b601f850160051c820191505b81811015610826578281556001016138aa565b6001600160401b038311156138d4576138d4613189565b6138e8836138e28354613759565b83613877565b6000601f84116001811461391c57600085156139045750838201355b600019600387901b1c1916600186901b178355611061565b600083815260209020601f19861690835b8281101561394d578685013582556020948501946001909201910161392d565b508682101561396a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b808201808211156105ed576105ed6137a9565b86815260a0602082015260006139a960a08301878961383a565b60408301959095525060608101929092526001600160a01b03166080909101529392505050565b8381526001600160a01b03831660208201526060604082018190526000906139fa908301846130f4565b95945050505050565b60008151613a158185602086016130d0565b9290920192915050565b66169696ae372e3760c91b815260008251613a418160078501602087016130d0565b9190910160070192915050565b6e7b226e616d65223a2247616d65202360881b81528551600090613a7981600f850160208b016130d0565b672c204d6f7665202360c01b600f918401918201528651613aa1816017840160208b016130d0565b701116113232b9b1b934b83a34b7b7111d1160791b601792909101918201528551613ad3816028840160208a016130d0565b7f222c22616e696d6174696f6e5f75726c223a22646174613a746578742f68746d60289290910191820152681b0ed8985cd94d8d0b60ba1b60488201528451613b238160518401602089016130d0565b6f222c2261747472696275746573223a5b60801b60519290910191820152613b5f613b516061830186613a03565b615d7d60f01b815260020190565b98975050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251613ba381601d8501602087016130d0565b91909101601d0192915050565b7f7b2274726169745f74797065223a2244696d656e73696f6e222c2276616c7565815262111d1160e91b602082015260008351613bf48160238501602088016130d0565b6301061cb960e51b6023918401918201528351613c188160278401602088016130d0565b61227d60f01b60279290910191820152602901949350505050565b7f3c7374796c653e3a726f6f747b2d2d613a3130303070783b2d2d623a00000000815260008251613c6b81601c8501602087016130d0565b641d9696b19d60d91b601c939091019283015250602101919050565b60008351613c998184602088016130d0565b7f2c7b2274726169745f74797065223a22476170222c2276616c7565223a2200009083019081528351613cd381601e8401602088016130d0565b61227d60f01b601e9290910191820152602001949350505050565b60008351613d008184602088016130d0565b835190830190613d148183602088016130d0565b66383c1d9696b21d60c91b9101908152600701949350505050565b60008351613d418184602088016130d0565b80830190507f2c7b2274726169745f74797065223a22486569676874222c2276616c7565223a8152601160f91b60208201528351613d868160218401602088016130d0565b61227d60f01b60219290910191820152602301949350505050565b60008351613db38184602088016130d0565b835190830190613dc78183602088016130d0565b6270783b60e81b9101908152600301949350505050565b60008351613df08184602088016130d0565b80830190507f2c7b2274726169745f74797065223a224261736520436f6c6f72222c2276616c8152633ab2911d60e11b60208201528351613e388160248401602088016130d0565b607d60f81b60249290910191820152602501949350505050565b60008351613e648184602088016130d0565b80830190507f2c7b2274726169745f74797065223a22436f6c6f72205468656d65222c227661815265363ab2911d1160d11b60208201528351613eae8160268401602088016130d0565b61227d60f01b60269290910191820152602801949350505050565b60008351613edb8184602088016130d0565b80830190507f2c7b2274726169745f74797065223a22436f6c6f722047656e65726174696f6e81526a1116113b30b63ab2911d1160a91b60208201528351613f2a81602b8401602088016130d0565b61227d60f01b602b9290910191820152602d01949350505050565b60008751613f57818460208c016130d0565b631696b29d60e11b9083019081528751613f78816004840160208c016130d0565b641d9696b31d60d91b600492909101918201528651613f9e816009840160208b016130d0565b641d9696b39d60d91b600992909101918201528551613fc481600e840160208a016130d0565b641d9696b41d60d91b600e92909101918201528451613fea8160138401602089016130d0565b641d9696b49d60d91b6013929091019182015261316961400d6018830186613a03565b603b60f81b815260010190565b60008551602061402d8285838b016130d0565b8651918401916140408184848b016130d0565b86519201916140528184848a016130d0565b7f2c316672293b677269642d74656d706c6174652d726f77733a7265706561742892019182528451614089818385018489016130d0565b7f2c316672293b7472616e73666f726d3a726f746174652832313064656729736b9201908101919091527f6577282d3330646567297363616c655928302e383634297d000000000000000060408201526058019695505050505050565b600083516140f88184602088016130d0565b80830190507f2c7b2274726169745f74797065223a2242697420426f72646572222c2276616c8152643ab2911d1160d91b602082015283516141418160258401602088016130d0565b61227d60f01b60259290910191820152602701949350505050565b6000875161416e818460208c016130d0565b61173960f11b908301908152875161418d816002840160208c016130d0565b7403dba37b81d31b0b631943b30b9141696b79490159605d1b6002929091019182015286516141c3816017840160208b016130d0565b7f2a28766172282d2d6e292f32202b20766172282d2d632929297d2e6300000000601792909101918201528551614201816033840160208a016130d0565b7303db632b33a1d31b0b631943b30b9141696b814960651b6033929091019182015284516142368160478401602089016130d0565b661018171c1b1b1560c91b6047929091019182015261316961425b604e830186613a03565b7f2a28766172282d2d6e29202b20766172282d2d632929297d0000000000000000815260180190565b600083516142968184602088016130d0565b8351908301906142aa8183602088016130d0565b01949350505050565b600083516142c58184602088016130d0565b701e17b9ba3cb6329f1e39b2b1ba34b7b71f60791b90830190815283516142f38160118401602088016130d0565b691e17b9b2b1ba34b7b71f60b11b60119290910191820152601b01949350505050565b600082516143288184602087016130d0565b600160fd1b920191825250600101919050565b6000855161434d818460208a016130d0565b855190830190614361818360208a016130d0565b85519101906143748183602089016130d0565b84519101906143878183602088016130d0565b019695505050505050565b6000816143a1576143a16137a9565b506000190190565b600082516143bb8184602087016130d0565b7f5c6e20206120622063206420652066206720685c6e6060600000000000000000920191825250601801919050565b6e1e3234bb1031b630b9b99e9131903960891b8152825160009061441581600f8501602088016130d0565b61206360f01b600f9184019182015283516144378160118401602088016130d0565b7f223e3c6469763e3c2f6469763e3c6469763e3c2f6469763e3c6469763e00000060119290910191820152602e01949350505050565b6000835161447f8184602088016130d0565b681e3234bb1034b21e9160b91b90830190815283516144a58160098401602088016130d0565b67111f1e17b234bb1f60c11b60099290910191820152601101949350505050565b600082516144d88184602087016130d0565b6b1e17b234bb1f1e17b234bb1f60a11b920191825250600c01919050565b6040815260006145096040830185613434565b82810360208401526139fa8185613434565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090614555908301846130f4565b979650505050505050565b60006020828403121561457257600080fd5b8151612ec681613084565b6001600160a01b0386811682528516602082015260a0604082018190526000906145a990830186613434565b82810360608401526145bb8186613434565b90508281036080840152613b5f81856130f456fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f2d2d6e3a63616c6328283339347078202d2028766172282d2d6229202d2031292a766172282d2d6329292f766172282d2d6229293b2d2d6f3a63616c63283130367078202b20766172282d2d6e29293b2d2d703a63616c6328766172282d2d61292f32297d73656374696f6e7b6865696768743a766172282d2d61293b77696474683a766172282d2d61293b6261636b67726f756e643a766172282d2d65293b706f736974696f6e3a6162736f6c7574653b6c6566743a303b746f703a303b72696768743a303b626f74746f6d3a303b6f766572666c6f773a68696464656e7d2e637b6865696768743a303b77696474683a303b706f736974696f6e3a6162736f6c7574653b7472616e736974696f6e3a302e3235737d2e633a686f7665727b7472616e73666f726d3a7472616e736c617465283070782c2d36347078293b7472616e736974696f6e3a302e3235737d2e633e2a7b6865696768743a766172282d2d6e293b77696474683a766172282d2d6e293b626f726465722d626f74746f6d3a34707820736f6c696420626c61636b3b626f726465722d72696768743a34707820736f6c696420626c61636b3b626f726465722d6c6566743a31707820736f6c696420626c61636b3b626f726465722d746f703a31707820736f6c696420626c61636b3b7472616e73666f726d2d6f726967696e3a3020303b706f736974696f6e3a72656c61746976653b626f782d73697a696e673a626f726465722d626f787d2e633e2a3a6e74682d6368696c642831297b77696474683a766172282d2d64293b6261636b67726f756e642d636f6c6f723a766172282d2d66293b7472616e73666f726d3a726f7461746528393064656729736b657758282d3330646567297363616c655928302e383634297d2e633e2a3a6e74682d6368696c642832297b6865696768743a766172282d2d64293b626f74746f6d3a766172282d2d6e293b6261636b67726f756e642d636f6c6f723a766172282d2d67293b7472616e73666f726d3a726f74617465282d333064656729736b657758282d3330646567297363616c655928302e383634297d23687b6261636b67726f756e642d636f6c6f723a766172282d2d68297d23697b6261636b67726f756e642d636f6c6f723a766172282d2d69297d2e633e2a3a6e74682d6368696c642833297b626f74746f6d3a63616c6328766172282d2d6429202b20766172282d2d6e29293b6261636b67726f756e642d636f6c6f723a766172282d2d68293b646973706c61793a677269643b677269642d74656d706c6174652d636f6c756d6e733a72657065617428a2646970667358221220f3caff0113c4ed1bb73b81fd12a7a44dbf7d5257994fcfa83136002ed498135664736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC1155InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC1155InvalidArrayLength(uint256,uint256)": [
        {
          "details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
          "params": {
            "idsLength": "Length of the array of token identifiers",
            "valuesLength": "Length of the array of token amounts"
          }
        }
      ],
      "ERC1155InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC1155InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC1155InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC1155MissingApprovalForAll(address,address)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 326,
        "contract": "contracts/DChess.sol:DChess",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 332,
        "contract": "contracts/DChess.sol:DChess",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 334,
        "contract": "contracts/DChess.sol:DChess",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 8,
        "contract": "contracts/DChess.sol:DChess",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5028,
        "contract": "contracts/DChess.sol:DChess",
        "label": "internalTokenCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5030,
        "contract": "contracts/DChess.sol:DChess",
        "label": "tokenMintPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5032,
        "contract": "contracts/DChess.sol:DChess",
        "label": "kFactor",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5034,
        "contract": "contracts/DChess.sol:DChess",
        "label": "platformFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5036,
        "contract": "contracts/DChess.sol:DChess",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 5062,
        "contract": "contracts/DChess.sol:DChess",
        "label": "puzzlesById",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Puzzle)5057_storage)"
      },
      {
        "astId": 5066,
        "contract": "contracts/DChess.sol:DChess",
        "label": "userRatings",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Puzzle)5057_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DChess.Puzzle)",
        "numberOfBytes": "32",
        "value": "t_struct(Puzzle)5057_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Puzzle)5057_storage": {
        "encoding": "inplace",
        "label": "struct DChess.Puzzle",
        "members": [
          {
            "astId": 5038,
            "contract": "contracts/DChess.sol:DChess",
            "label": "fen",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5040,
            "contract": "contracts/DChess.sol:DChess",
            "label": "solution",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5044,
            "contract": "contracts/DChess.sol:DChess",
            "label": "userHasSolved",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5048,
            "contract": "contracts/DChess.sol:DChess",
            "label": "userHasAttempted",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 5050,
            "contract": "contracts/DChess.sol:DChess",
            "label": "rating",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5052,
            "contract": "contracts/DChess.sol:DChess",
            "label": "metadata",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5054,
            "contract": "contracts/DChess.sol:DChess",
            "label": "creator",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5056,
            "contract": "contracts/DChess.sol:DChess",
            "label": "description",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}