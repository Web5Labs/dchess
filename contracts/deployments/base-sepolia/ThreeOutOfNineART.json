{
  "address": "0xF88d1A613f5608020AE28f85c9E21bb6bcf58E7C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_internalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_board",
          "type": "uint256"
        }
      ],
      "name": "getMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "image",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        }
      ],
      "name": "setImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8b7c483e925877c6c3130b70ec72374c10ff6ed186a1572e5ea03932e24db25",
  "receipt": {
    "to": null,
    "from": "0x4489C7836eBE6aBf8a95Ad87877E8123e5F20A25",
    "contractAddress": "0xF88d1A613f5608020AE28f85c9E21bb6bcf58E7C",
    "transactionIndex": 1,
    "gasUsed": "2492653",
    "logsBloom": "0x
    "blockHash": "0x4d9876844ce2e90ac862e1959cac89f4cf3bd695fe55e0947afa3392ee8adf4c",
    "transactionHash": "0xa8b7c483e925877c6c3130b70ec72374c10ff6ed186a1572e5ea03932e24db25",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5909132,
        "transactionHash": "0xa8b7c483e925877c6c3130b70ec72374c10ff6ed186a1572e5ea03932e24db25",
        "address": "0xF88d1A613f5608020AE28f85c9E21bb6bcf58E7C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004489c7836ebe6abf8a95ad87877e8123e5f20a25"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4d9876844ce2e90ac862e1959cac89f4cf3bd695fe55e0947afa3392ee8adf4c"
      }
    ],
    "blockNumber": 5909132,
    "cumulativeGasUsed": "2556654",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4489C7836eBE6aBf8a95Ad87877E8123e5F20A25"
  ],
  "numDeployments": 1,
  "solcInputHash": "469717d1252555ed291e6e2ba7dfd062",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_internalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_board\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"image\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"name\":\"setImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"getMetadata(uint256,uint256)\":{\"details\":\"The output is base 64-encoded.\",\"params\":{\"_board\":\"Information about the board.\",\"_internalId\":\"A bitpacked uint256 where the first 128 bits are the game ID, and the last 128 bits are the move ID within the game.\"},\"returns\":{\"_0\":\"Base 64-encoded JSON of metadata generated from `_internalId` and `_move`.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getMetadata(uint256,uint256)\":{\"notice\":\"Takes in data for a given fiveoutofnine NFT and outputs its metadata in JSON form. Refer to {fiveoutofnineART} for details.\"}},\"notice\":\" The top/bottom rows and left/right columns are treated as sentinel rows/columns for efficient boundary validation (see {Chess-generateMoves} and {Chess-isValid}). i.e., (63, ..., 56), (07, ..., 00), (63, ..., 07), and (56, ..., 00) never contain pieces. Every bit in those rows and columns should be ignored, except for the last bit. The last bit denotes whose turn it is to play (0 means black's turn; 1 means white's turn). e.g. a potential starting position:                                Black                       00 00 00 00 00 00 00 00                    Black                       00 03 02 05 06 02 03 00                 \\u265c \\u265d \\u265b \\u265a \\u265d \\u265c                       00 01 01 01 01 01 01 00                 \\u265f \\u265f \\u265f \\u265f \\u265f \\u265f                       00 00 00 00 00 00 00 00     denotes                       00 00 00 00 00 00 00 00    the board                       00 09 09 09 09 09 09 00                 \\u2659 \\u2659 \\u2659 \\u2659 \\u2659 \\u2659                       00 11 12 13 14 12 11 00                 \\u2656 \\u2658 \\u2655 \\u2654 \\u2658 \\u2656                       00 00 00 00 00 00 00 01                    White                                White All numbers in the example above are in decimal representation. ======================================Move Representation======================================= Each move is allocated 12 bits. The first 6 bits are the index the piece is moving from, and the last 6 bits are the index the piece is moving to. Since the index representing a square is at most 54, 6 bits sufficiently represents any index (0b111111 = 63 > 54). e.g. 1243 denotes a move from index 19 to 27 (1243 = (19 << 6) | 27). Since the board is represented by a uint256, consider including ``using Chess for uint256''.Below details how the metadata and art are generated: ==========================================Description=========================================== Token descriptions describe white's move in algebraic notation and black's move in algebraic notation. If white's move results in checkmating black or a stalemate, the description will say black resigned (for simplicity, stalemates are treated as checkmates). Since the engine always plays black, and the player always plays white, white is indicated as ``Player'', and black is indicated as ``fiveoutofnine''. Additionally, for every non game-ending turn, a string graphic is generated after the moves' descriptions. An example:                             Player plays e4 rook captures e5 queen.                             6 \\u00b7 \\u00b7 \\u265c \\u00b7 \\u265a \\u265c                             5 \\u00b7 \\u265f \\u00b7 \\u00b7 \\u2656 \\u265f                             4 \\u265f \\u2659 \\u265f \\u2659 * \\u2659                             3 \\u2659 \\u00b7 \\u2659 \\u00b7 \\u00b7 \\u00b7                             2 \\u00b7 \\u00b7 \\u00b7 \\u00b7 \\u2656 \\u00b7                             1 \\u00b7 \\u2658 \\u00b7 \\u2654 \\u00b7 \\u00b7                               a b c d e f                             fiveoutofnine resigns. * indicates the square the piece moved from. ==============================================Art=============================================== The art is generated as HTML code with in-line CSS (0 JS) according to the following table:  | Property       | Name      | Value/Description                       | Determination       |  | ============== | ========= | ======================================= | =================== |  | Dimension      | 1 \\u00d7 1     | 1 \\u00d7 1 pillars                           | Player moved king   |  | (6 traits)     | 2 \\u00d7 2     | 2 \\u00d7 2 pillars                           | Player moved rook   |  |                | 3 \\u00d7 3     | 3 \\u00d7 3 pillars                           | Engine moved bishop |  |                | 4 \\u00d7 4     | 4 \\u00d7 4 pillars                           | Player moved knight |  |                | 6 \\u00d7 6     | 6 \\u00d7 6 pillars                           | Player moved pawn   |  |                | 12 \\u00d7 12   | 12 \\u00d7 12 pillars                         | Player moved queen  |  | -------------- | --------- | --------------------------------------- | ------------------- |  | Height         | Plane     | 8px pillar height                       | 1 / 64 chance[^0]   |  | (5 traits)     | 1/4       | 98px pillar height                      | 10 / 64 chance[^0]  |  |                | 1/2       | 197px pillar height                     | 10 / 64 chance[^0]  |  |                | Cube      | 394px pillar height                     | 40 / 64 chance[^0]  |  |                | Infinite  | 1000px pillar height                    | 3 / 64 chance[^0]   |  | -------------- | --------- | --------------------------------------- | ------------------- |  | Gap[^1]        | None      | 0px gap between the pillars             | 4 / 16 chance[^0]   |  | (4 traits)     | Narrow    | 2px gap between the pillars             | 9 / 16 chance[^0]   |  |                | Wide      | 12px gap between the pillars            | 2 / 16 chance[^0]   |  |                | Ultrawide | 24px gap between the pillars            | 1 / 16 chance[^0]   |  | -------------- | --------- | --------------------------------------- | ------------------- |  | Color          | Uniform   | All faces are the same color            | 7 / 32 chance[^0]   |  | Generation[^2] | Shades    | Faces get darker anticlockwise          | 7 / 32 chance[^0]   |  | (6 traits)     | Tints     | Faces get lighter anticlockwise         | 7 / 32 chance[^0]   |  |                | Eclipse   | Left face is white; black face is black | 3 / 32 chance[^0]   |  |                | Void      | Left and right face are black           | 1 / 32 chance[^0]   |  |                | Curated   | One of 8 color themes (see below)       | 7 / 32 chance[^0]   |  | -------------- | --------- | --------------------------------------- | ------------------- |  | Color          | Nord      | 0x8FBCBBEBCB8BD087705E81ACB48EAD        | 1 / 8 chance[^0]    |  | Theme[^3]      | B/W       | 0x000000FFFFFFFFFFFFFFFFFF000000        | 1 / 8 chance[^0]    |  | (8 traits)     | Candycorn | 0x0D3B66F4D35EEE964BFAF0CAF95738        | 1 / 8 chance[^0]    |  |                | RGB       | 0xFFFF0000FF000000FFFF0000FFFF00        | 1 / 8 chance[^0]    |  |                | VSCode    | 0x1E1E1E569CD6D2D1A2BA7FB54DC4AC        | 1 / 8 chance[^0]    |  |                | Neon      | 0x00FFFFFFFF000000FF00FF00FF00FF        | 1 / 8 chance[^0]    |  |                | Jungle    | 0xBE3400015045020D22EABAACBE3400        | 1 / 8 chance[^0]    |  |                | Corn      | 0xF9C233705860211A28346830F9C233        | 1 / 8 chance[^0]    |  | -------------- | --------- | --------------------------------------- | ------------------- |  | Bit Border[^4] | True      | The bits have a 1px solid black border  | Any pieces captured |  | (2 traits)     | False     | The bits don't have any border          | No pieces captuered |  | ============== | ========= | ======================================= | =================== |  | [^0]: Determined from `_seed`.                                                             |  | [^1]: Gap is omitted when dimension is 1 x 1.                                              |  | [^2]: The first 5 color generation traits are algorithms. A base color is generated from   |  | `seed`, and the remaining colors are generated according to the selected algorithm. The    |  | color of the bits is always the complement of the randomly generated base color, and the   |  | background color depends on the algorithm:                                                 |  |     * Uniform: same as the base color;                                                     |  |     * Shades: darkest shade of the base color;                                             |  |     * Tints: lightest shade of the base color;                                             |  |     * Eclipse: same as the base color;                                                     |  |     * Void: complement of the base color.                                                  |  | If the selected color generation trait is \\\"Curated,\\\" 1 of 8 pre-curated themes is randomly |  | selected.                                                                                  |  | [^3]: The entries in the 3rd column are bitpacked integers where                           |  |     * the first 24 bits represent the background color,                                    |  |     * the second 24 bits represent the left face's color,                                  |  |     * the third 24 bits represent the right face's color,                                  |  |     * the fourth 24 bits represent the top face's color,                                   |  |     * and the last 24 bits represent the bits' color.                                      |  | [^4]: Bit border is omitted when dimension is 12 x 12.                                     |\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ThreeOutOfNineART.sol\":\"ThreeOutOfNineART\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/ThreeOutOfNineART.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IThreeOutOfNineART} from \\\"./interfaces/IThreeOutOfNineART.sol\\\";\\n\\nimport {Base64} from \\\"./lib/Base64.sol\\\";\\n\\n/// @title A library that generates HTML art based on a modified version of fiveoutofnine\\n/// @author RnkSngh / 0xasdf / fiveoutofnine\\n/// @dev Understand the representations of the chess pieces, board, and moves very carefully before\\n/// using this library:\\n/// ======================================Piece Representation======================================\\n/// Each chess piece is defined with 4 bits as follows:\\n///     * The first bit denotes the color (0 means black; 1 means white).\\n///     * The last 3 bits denote the type:\\n///         | Bits | # | Type   |\\n///         | ---- | - | ------ |\\n///         | 000  | 0 | Empty  |\\n///         | 001  | 1 | Pawn   |\\n///         | 010  | 2 | Bishop |\\n///         | 011  | 3 | Rook   |\\n///         | 100  | 4 | Knight |\\n///         | 101  | 5 | Queen  |\\n///         | 110  | 6 | King   |\\n/// ======================================Board Representation======================================\\n/// The board is an 8x8 representation of a 6x6 chess board. For efficiency, all information is\\n/// bitpacked into a single uint256. Thus, unlike typical implementations, board positions are\\n/// accessed via bit shifts and bit masks, as opposed to array accesses. Since each piece is 4 bits,\\n/// there are 64 ``indices'' to access: # 256bit interger, 4 bits per piece each 4bits represents a slot on the board\\n///                                     63 62 61 60 59 58 57 56\\n///                                     55 54 53 52 51 50 49 48\\n///                                     47 46 45 44 43 42 41 40\\n///                                     39 38 37 36 35 34 33 32\\n///                                     31 30 29 28 27 26 25 24\\n///                                     23 22 21 20 19 18 17 16\\n///                                     15 14 13 12 11 10 09 08\\n///                                     07 06 05 04 03 02 01 00\\n/// All numbers in the figure above are in decimal representation.\\n/// For example, the piece at index 27 is accessed with ``(board >> (27 << 2)) & 0xF''.\\n\\n/// 00... 0110 # Board with black king at index 00\\n/// 00... 0110 >> 0 << 2 & 1111\\n///  00... 0110 >> 0  =  00...0110\\n//// 00... 0110 << 2  -> 00 ... 01100\\n//// 00 ... 0000 1100 & (1111) -> 0000 1100\\n///\\n/// The top/bottom rows and left/right columns are treated as sentinel rows/columns for efficient\\n/// boundary validation (see {Chess-generateMoves} and {Chess-isValid}). i.e., (63, ..., 56),\\n/// (07, ..., 00), (63, ..., 07), and (56, ..., 00) never contain pieces. Every bit in those rows\\n/// and columns should be ignored, except for the last bit. The last bit denotes whose turn it is to\\n/// play (0 means black's turn; 1 means white's turn). e.g. a potential starting position:\\n///                                Black\\n///                       00 00 00 00 00 00 00 00                    Black\\n///                       00 03 02 05 06 02 03 00                 \\u265c \\u265d \\u265b \\u265a \\u265d \\u265c\\n///                       00 01 01 01 01 01 01 00                 \\u265f \\u265f \\u265f \\u265f \\u265f \\u265f\\n///                       00 00 00 00 00 00 00 00     denotes\\n///                       00 00 00 00 00 00 00 00    the board\\n///                       00 09 09 09 09 09 09 00                 \\u2659 \\u2659 \\u2659 \\u2659 \\u2659 \\u2659\\n///                       00 11 12 13 14 12 11 00                 \\u2656 \\u2658 \\u2655 \\u2654 \\u2658 \\u2656\\n///                       00 00 00 00 00 00 00 01                    White\\n///                                White\\n/// All numbers in the example above are in decimal representation.\\n/// ======================================Move Representation=======================================\\n/// Each move is allocated 12 bits. The first 6 bits are the index the piece is moving from, and the\\n/// last 6 bits are the index the piece is moving to. Since the index representing a square is at\\n/// most 54, 6 bits sufficiently represents any index (0b111111 = 63 > 54). e.g. 1243 denotes a move\\n/// from index 19 to 27 (1243 = (19 << 6) | 27).\\n///\\n/// Since the board is represented by a uint256, consider including ``using Chess for uint256''.\\n///\\n/// @notice Below details how the metadata and art are generated:\\n/// ==========================================Description===========================================\\n/// Token descriptions describe white's move in algebraic notation and black's move in algebraic\\n/// notation. If white's move results in checkmating black or a stalemate, the description will say\\n/// black resigned (for simplicity, stalemates are treated as checkmates). Since the engine always\\n/// plays black, and the player always plays white, white is indicated as ``Player'', and black is\\n/// indicated as ``fiveoutofnine''. Additionally, for every non game-ending turn, a string graphic\\n/// is generated after the moves' descriptions. An example:\\n///                             Player plays e4 rook captures e5 queen.\\n///                             6 \\u00b7 \\u00b7 \\u265c \\u00b7 \\u265a \\u265c\\n///                             5 \\u00b7 \\u265f \\u00b7 \\u00b7 \\u2656 \\u265f\\n///                             4 \\u265f \\u2659 \\u265f \\u2659 * \\u2659\\n///                             3 \\u2659 \\u00b7 \\u2659 \\u00b7 \\u00b7 \\u00b7\\n///                             2 \\u00b7 \\u00b7 \\u00b7 \\u00b7 \\u2656 \\u00b7\\n///                             1 \\u00b7 \\u2658 \\u00b7 \\u2654 \\u00b7 \\u00b7\\n///                               a b c d e f\\n///\\n///                             fiveoutofnine resigns.\\n/// * indicates the square the piece moved from.\\n/// ==============================================Art===============================================\\n/// The art is generated as HTML code with in-line CSS (0 JS) according to the following table:\\n///  | Property       | Name      | Value/Description                       | Determination       |\\n///  | ============== | ========= | ======================================= | =================== |\\n///  | Dimension      | 1 \\u00d7 1     | 1 \\u00d7 1 pillars                           | Player moved king   |\\n///  | (6 traits)     | 2 \\u00d7 2     | 2 \\u00d7 2 pillars                           | Player moved rook   |\\n///  |                | 3 \\u00d7 3     | 3 \\u00d7 3 pillars                           | Engine moved bishop |\\n///  |                | 4 \\u00d7 4     | 4 \\u00d7 4 pillars                           | Player moved knight |\\n///  |                | 6 \\u00d7 6     | 6 \\u00d7 6 pillars                           | Player moved pawn   |\\n///  |                | 12 \\u00d7 12   | 12 \\u00d7 12 pillars                         | Player moved queen  |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Height         | Plane     | 8px pillar height                       | 1 / 64 chance[^0]   |\\n///  | (5 traits)     | 1/4       | 98px pillar height                      | 10 / 64 chance[^0]  |\\n///  |                | 1/2       | 197px pillar height                     | 10 / 64 chance[^0]  |\\n///  |                | Cube      | 394px pillar height                     | 40 / 64 chance[^0]  |\\n///  |                | Infinite  | 1000px pillar height                    | 3 / 64 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Gap[^1]        | None      | 0px gap between the pillars             | 4 / 16 chance[^0]   |\\n///  | (4 traits)     | Narrow    | 2px gap between the pillars             | 9 / 16 chance[^0]   |\\n///  |                | Wide      | 12px gap between the pillars            | 2 / 16 chance[^0]   |\\n///  |                | Ultrawide | 24px gap between the pillars            | 1 / 16 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Color          | Uniform   | All faces are the same color            | 7 / 32 chance[^0]   |\\n///  | Generation[^2] | Shades    | Faces get darker anticlockwise          | 7 / 32 chance[^0]   |\\n///  | (6 traits)     | Tints     | Faces get lighter anticlockwise         | 7 / 32 chance[^0]   |\\n///  |                | Eclipse   | Left face is white; black face is black | 3 / 32 chance[^0]   |\\n///  |                | Void      | Left and right face are black           | 1 / 32 chance[^0]   |\\n///  |                | Curated   | One of 8 color themes (see below)       | 7 / 32 chance[^0]   |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Color          | Nord      | 0x8FBCBBEBCB8BD087705E81ACB48EAD        | 1 / 8 chance[^0]    |\\n///  | Theme[^3]      | B/W       | 0x000000FFFFFFFFFFFFFFFFFF000000        | 1 / 8 chance[^0]    |\\n///  | (8 traits)     | Candycorn | 0x0D3B66F4D35EEE964BFAF0CAF95738        | 1 / 8 chance[^0]    |\\n///  |                | RGB       | 0xFFFF0000FF000000FFFF0000FFFF00        | 1 / 8 chance[^0]    |\\n///  |                | VSCode    | 0x1E1E1E569CD6D2D1A2BA7FB54DC4AC        | 1 / 8 chance[^0]    |\\n///  |                | Neon      | 0x00FFFFFFFF000000FF00FF00FF00FF        | 1 / 8 chance[^0]    |\\n///  |                | Jungle    | 0xBE3400015045020D22EABAACBE3400        | 1 / 8 chance[^0]    |\\n///  |                | Corn      | 0xF9C233705860211A28346830F9C233        | 1 / 8 chance[^0]    |\\n///  | -------------- | --------- | --------------------------------------- | ------------------- |\\n///  | Bit Border[^4] | True      | The bits have a 1px solid black border  | Any pieces captured |\\n///  | (2 traits)     | False     | The bits don't have any border          | No pieces captuered |\\n///  | ============== | ========= | ======================================= | =================== |\\n///  | [^0]: Determined from `_seed`.                                                             |\\n///  | [^1]: Gap is omitted when dimension is 1 x 1.                                              |\\n///  | [^2]: The first 5 color generation traits are algorithms. A base color is generated from   |\\n///  | `seed`, and the remaining colors are generated according to the selected algorithm. The    |\\n///  | color of the bits is always the complement of the randomly generated base color, and the   |\\n///  | background color depends on the algorithm:                                                 |\\n///  |     * Uniform: same as the base color;                                                     |\\n///  |     * Shades: darkest shade of the base color;                                             |\\n///  |     * Tints: lightest shade of the base color;                                             |\\n///  |     * Eclipse: same as the base color;                                                     |\\n///  |     * Void: complement of the base color.                                                  |\\n///  | If the selected color generation trait is \\\"Curated,\\\" 1 of 8 pre-curated themes is randomly |\\n///  | selected.                                                                                  |\\n///  | [^3]: The entries in the 3rd column are bitpacked integers where                           |\\n///  |     * the first 24 bits represent the background color,                                    |\\n///  |     * the second 24 bits represent the left face's color,                                  |\\n///  |     * the third 24 bits represent the right face's color,                                  |\\n///  |     * the fourth 24 bits represent the top face's color,                                   |\\n///  |     * and the last 24 bits represent the bits' color.                                      |\\n///  | [^4]: Bit border is omitted when dimension is 12 x 12.                                     |\\ncontract ThreeOutOfNineART is IThreeOutOfNineART, Ownable {\\n    using Strings for uint256;\\n\\n    string internal constant SVG_STYLES =\\n        \\\"--n:calc((394px - (var(--b) - 1)*var(--c))/var(--b));--o\\\"\\n        \\\":calc(106px + var(--n));--p:calc(var(--a)/2)}section{height:var(--a);width:var(--a);backgr\\\"\\n        \\\"ound:var(--e);position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden}.c{height:0;\\\"\\n        \\\"width:0;position:absolute;transition:0.25s}.c:hover{transform:translate(0px,-64px);transit\\\"\\n        \\\"ion:0.25s}.c>*{height:var(--n);width:var(--n);border-bottom:4px solid black;border-right:4\\\"\\n        \\\"px solid black;border-left:1px solid black;border-top:1px solid black;transform-origin:0 0\\\"\\n        \\\";position:relative;box-sizing:border-box}.c>*:nth-child(1){width:var(--d);background-color\\\"\\n        \\\":var(--f);transform:rotate(90deg)skewX(-30deg)scaleY(0.864)}.c>*:nth-child(2){height:var(-\\\"\\n        \\\"-d);bottom:var(--n);background-color:var(--g);transform:rotate(-30deg)skewX(-30deg)scaleY(\\\"\\n        \\\"0.864)}#h{background-color:var(--h)}#i{background-color:var(--i)}.c>*:nth-child(3){bottom:\\\"\\n        \\\"calc(var(--d) + var(--n));background-color:var(--h);display:grid;grid-template-columns:rep\\\"\\n        \\\"eat(\\\";\\n    bytes32 internal constant HEXADECIMAL_DIGITS = \\\"0123456789ABCDEF\\\";\\n    bytes32 internal constant FILE_NAMES = \\\"abcdef\\\";\\n\\n    string public image;\\n\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    function setImage(string memory _image) public onlyOwner {\\n        image = _image;\\n    }\\n\\n    /// @notice Takes in data for a given fiveoutofnine NFT and outputs its metadata in JSON form.\\n    /// Refer to {fiveoutofnineART} for details.\\n    /// @dev The output is base 64-encoded.\\n    /// @param _internalId A bitpacked uint256 where the first 128 bits are the game ID, and the\\n    /// last 128 bits are the move ID within the game.\\n    /// @param _board Information about the board.\\n    /// @return Base 64-encoded JSON of metadata generated from `_internalId` and `_move`.\\n    function getMetadata(\\n        uint256 _internalId,\\n        uint256 _board\\n    ) external view returns (string memory) {\\n        string memory description;\\n        string memory animation;\\n        string memory attributes;\\n\\n        {\\n            uint256 numSquares = 8;\\n\\n            uint256 seed = uint256(keccak256(abi.encodePacked(_internalId)));\\n\\n            (animation, attributes) = getAnimation(_board, numSquares, seed);\\n        }\\n\\n        description = string(abi.encodePacked(\\\"---\\\\\\\\n\\\\\\\\n\\\", drawMove(_board)));\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"Puzzle #',\\n                            Strings.toString(uint128(_internalId)),\\n                            '\\\",'\\n                            '\\\"description\\\":\\\"',\\n                            description,\\n                            '\\\",\\\"animation_url\\\":\\\"data:text/html;base64,',\\n                            animation,\\n                            '\\\",\\\"image\\\":\\\"',\\n                            abi.encodePacked(\\n                                \\\"data:image/svg+xml;base64,\\\",\\n                                Base64.encode(abi.encodePacked(image))\\n                            ),\\n                            '\\\",\\\"attributes\\\":[',\\n                            attributes,\\n                            \\\"]}\\\"\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @notice Generates the HTML image and its attributes for a given board/seed according to the\\n    /// table described in {fiveoutofnineART}.\\n    /// @dev The output of the image is base 64-encoded.\\n    /// @param _board The board after the player's and engine's move are played.\\n    /// @param _numSquares The dimension of the board.\\n    /// @param _seed A hash of the game ID.\\n    /// @return Base 64-encoded image (in HTML) and its attributes.\\n    function getAnimation(\\n        uint256 _board,\\n        uint256 _numSquares,\\n        uint256 _seed\\n    ) internal pure returns (string memory, string memory) {\\n        string memory attributes = string(\\n            abi.encodePacked(\\n                '{\\\"trait_type\\\":\\\"Dimension\\\",\\\"value\\\":\\\"',\\n                _numSquares.toString(),\\n                unicode\\\" \\u00d7 \\\",\\n                _numSquares.toString(),\\n                '\\\"}'\\n            )\\n        );\\n        string memory styles = string(\\n            abi.encodePacked(\\n                \\\"<style>:root{--a:1000px;--b:\\\",\\n                _numSquares.toString(),\\n                \\\";--c:\\\"\\n            )\\n        );\\n\\n        {\\n            string memory gapAttribute;\\n            string memory gapValue = \\\"0\\\";\\n            if (_numSquares != 1) {\\n                if (_seed & 0xF < 4) (gapAttribute, gapValue) = (\\\"None\\\", \\\"0\\\");\\n                else if (_seed & 0xF < 13)\\n                    (gapAttribute, gapValue) = (\\\"Narrow\\\", \\\"2\\\");\\n                else if (_seed & 0xF < 15)\\n                    (gapAttribute, gapValue) = (\\\"Wide\\\", \\\"12\\\");\\n                else (gapAttribute, gapValue) = (\\\"Ultrawide\\\", \\\"24\\\");\\n\\n                attributes = string(\\n                    abi.encodePacked(\\n                        attributes,\\n                        ',{\\\"trait_type\\\":\\\"Gap\\\",\\\"value\\\":\\\"',\\n                        gapAttribute,\\n                        '\\\"}'\\n                    )\\n                );\\n            }\\n            styles = string(abi.encodePacked(styles, gapValue, \\\"px;--d:\\\"));\\n        }\\n        _seed >>= 4;\\n\\n        {\\n            string memory heightAttribute;\\n            string memory heightValue;\\n            if (_seed & 0x3F < 1)\\n                (heightAttribute, heightValue) = (\\\"Plane\\\", \\\"8\\\");\\n            else if (_seed & 0x3F < 11)\\n                (heightAttribute, heightValue) = (\\\"1/4\\\", \\\"98\\\");\\n            else if (_seed & 0x3F < 21)\\n                (heightAttribute, heightValue) = (\\\"1/2\\\", \\\"197\\\");\\n            else if (_seed & 0x3F < 51)\\n                (heightAttribute, heightValue) = (\\\"Cube\\\", \\\"394\\\");\\n            else (heightAttribute, heightValue) = (\\\"Infinite\\\", \\\"1000\\\");\\n\\n            attributes = string(\\n                abi.encodePacked(\\n                    attributes,\\n                    ',{\\\"trait_type\\\":\\\"Height\\\",\\\"value\\\":\\\"',\\n                    heightAttribute,\\n                    '\\\"}'\\n                )\\n            );\\n            styles = string(abi.encodePacked(styles, heightValue, \\\"px;\\\"));\\n        }\\n        _seed >>= 6;\\n\\n        {\\n            string memory tempAttribute;\\n            uint256 colorTheme;\\n            if (_seed & 0x1F < 25) {\\n                colorTheme = (_seed >> 5) & 0xFFFFFF;\\n                attributes = string(\\n                    abi.encodePacked(\\n                        attributes,\\n                        ',{\\\"trait_type\\\":\\\"Base Color\\\",\\\"value\\\":',\\n                        colorTheme.toString(),\\n                        \\\"}\\\"\\n                    )\\n                );\\n                if (_seed & 0x1F < 7) {\\n                    tempAttribute = \\\"Uniform\\\";\\n                    colorTheme =\\n                        (colorTheme << 0x60) |\\n                        (colorTheme << 0x48) |\\n                        (colorTheme << 0x30) |\\n                        (colorTheme << 0x18) |\\n                        complementColor(colorTheme);\\n                } else if (_seed & 0x1F < 14) {\\n                    tempAttribute = \\\"Shades\\\";\\n                    colorTheme =\\n                        (darkenColor(colorTheme, 3) << 0x60) |\\n                        (darkenColor(colorTheme, 1) << 0x48) |\\n                        (darkenColor(colorTheme, 2) << 0x30) |\\n                        (colorTheme << 0x18) |\\n                        complementColor(colorTheme);\\n                } else if (_seed & 0x1F < 21) {\\n                    tempAttribute = \\\"Tints\\\";\\n                    colorTheme =\\n                        (brightenColor(colorTheme, 3) << 0x60) |\\n                        (brightenColor(colorTheme, 1) << 0x48) |\\n                        (brightenColor(colorTheme, 2) << 0x30) |\\n                        (colorTheme << 0x18) |\\n                        complementColor(colorTheme);\\n                } else if (_seed & 0x1F < 24) {\\n                    tempAttribute = \\\"Eclipse\\\";\\n                    colorTheme =\\n                        (colorTheme << 0x60) |\\n                        (0xFFFFFF << 0x48) |\\n                        (colorTheme << 0x18) |\\n                        complementColor(colorTheme);\\n                } else {\\n                    tempAttribute = \\\"Void\\\";\\n                    colorTheme =\\n                        (complementColor(colorTheme) << 0x60) |\\n                        (colorTheme << 0x18) |\\n                        complementColor(colorTheme);\\n                }\\n            } else {\\n                tempAttribute = \\\"Curated\\\";\\n                _seed >>= 5;\\n\\n                attributes = string(\\n                    abi.encodePacked(\\n                        attributes,\\n                        ',{\\\"trait_type\\\":\\\"Color Theme\\\",\\\"value\\\":\\\"',\\n                        [\\n                            \\\"Nord\\\",\\n                            \\\"B/W\\\",\\n                            \\\"Candycorn\\\",\\n                            \\\"RGB\\\",\\n                            \\\"VSCode\\\",\\n                            \\\"Neon\\\",\\n                            \\\"Jungle\\\",\\n                            \\\"Corn\\\"\\n                        ][_seed & 7],\\n                        '\\\"}'\\n                    )\\n                );\\n\\n                colorTheme = [\\n                    0x8FBCBBEBCB8BD087705E81ACB48EAD000000FFFFFFFFFFFFFFFFFF000000,\\n                    0x0D3B66F4D35EEE964BFAF0CAF95738FFFF0000FF000000FFFF0000FFFF00,\\n                    0x1E1E1E569CD6D2D1A2BA7FB54DC4AC00FFFFFFFF000000FF00FF00FF00FF,\\n                    0xBE3400015045020D22EABAACBE3400F9C233705860211A28346830F9C233\\n                ][(_seed & 7) >> 1];\\n                colorTheme = _seed & 1 == 0\\n                    ? colorTheme >> 0x78\\n                    : colorTheme & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            }\\n            attributes = string(\\n                abi.encodePacked(\\n                    attributes,\\n                    ',{\\\"trait_type\\\":\\\"Color Generation\\\",\\\"value\\\":\\\"',\\n                    tempAttribute,\\n                    '\\\"}'\\n                )\\n            );\\n            styles = string(\\n                abi.encodePacked(\\n                    styles,\\n                    \\\"--e:\\\",\\n                    toColorHexString(colorTheme >> 0x60),\\n                    \\\";--f:\\\",\\n                    toColorHexString((colorTheme >> 0x48) & 0xFFFFFF),\\n                    \\\";--g:\\\",\\n                    toColorHexString((colorTheme >> 0x30) & 0xFFFFFF),\\n                    \\\";--h:\\\",\\n                    toColorHexString((colorTheme >> 0x18) & 0xFFFFFF),\\n                    \\\";--i:\\\",\\n                    toColorHexString(colorTheme & 0xFFFFFF),\\n                    \\\";\\\"\\n                )\\n            );\\n        }\\n\\n        {\\n            string memory tempAttribute;\\n            styles = string(\\n                abi.encodePacked(\\n                    styles,\\n                    SVG_STYLES,\\n                    Strings.toString(16 / _numSquares),\\n                    \\\",1fr);grid-template-rows:repeat(\\\",\\n                    Strings.toString(16 / _numSquares),\\n                    \\\",1fr);transform:rotate(210deg)skew(-30deg)scaleY(0.864)}\\\"\\n                )\\n            );\\n            if (_numSquares != 16) {\\n                tempAttribute = \\\"False\\\";\\n                attributes = string(\\n                    abi.encodePacked(\\n                        attributes,\\n                        ',{\\\"trait_type\\\":\\\"Bit Border\\\",\\\"value\\\":\\\"',\\n                        tempAttribute,\\n                        '\\\"}'\\n                    )\\n                );\\n            }\\n        }\\n\\n        unchecked {\\n            for (uint256 i; i < 31; ++i) {\\n                styles = string(\\n                    abi.encodePacked(\\n                        styles,\\n                        \\\".r\\\",\\n                        i.toString(),\\n                        \\\"{top:calc(var(--o) + \\\",\\n                        i.toString(),\\n                        \\\"*(var(--n)/2 + var(--c)))}\\\"\\n                        \\\".c\\\",\\n                        i.toString(),\\n                        \\\"{left:calc(var(--p) \\\",\\n                        i < 15 ? \\\"-\\\" : \\\"+\\\",\\n                        \\\" 0.866*\\\",\\n                        i < 15 ? (15 - i).toString() : (i - 15).toString(),\\n                        \\\"*(var(--n) + var(--c)))}\\\"\\n                    )\\n                );\\n            }\\n\\n            // iterates diagonally starting from the back\\n            string memory animation;\\n            for (uint256 row; row < (_numSquares << 1) - 1; ++row) {\\n                uint256 tempCol = row <= _numSquares - 1\\n                    ? 15 - row\\n                    : 15 - ((_numSquares << 1) - 2 - row);\\n                for (\\n                    uint256 col = tempCol;\\n                    col <=\\n                    (\\n                        row <= _numSquares - 1\\n                            ? tempCol + (row << 1)\\n                            : tempCol + (((_numSquares << 1) - 2 - row) << 1)\\n                    );\\n                    col = col + 2\\n                ) {\\n                    animation = string(\\n                        abi.encodePacked(\\n                            animation,\\n                            getPillarHtml(_board, 16 / _numSquares, row, col)\\n                        )\\n                    );\\n                }\\n            }\\n\\n            string memory script;\\n            script = string(\\n                abi.encodePacked(\\n                    '<script type=\\\"text/javascript\\\">',\\n                    \\\"w=window;w.addEventListener('DOMContentLoaded',()=>{n=document.querySelector('section').style;\\\",\\n                    \\\"n.transformOrigin='top left';a=()=>n.transform='scale('+w.innerWidth/1000+')';a();w.onresize=a});\\\",\\n                    \\\"</script>\\\"\\n                )\\n            );\\n\\n            return (\\n                Base64.encode(\\n                    abi.encodePacked(\\n                        script,\\n                        styles,\\n                        \\\"</style><section>\\\",\\n                        animation,\\n                        \\\"</section>\\\"\\n                    )\\n                ),\\n                attributes\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the HTML for a particular pillar within the image.\\n    /// @param _board The board after the player's and engine's move are played.\\n    /// @param _dim The dimension of the bits within a pillar.\\n    /// @param _row The row index of the pillar.\\n    /// @param _col The column index of the pillar.\\n    /// @return The HTML for the pillar described by the parameters.\\n    function getPillarHtml(\\n        uint256 _board,\\n        uint256 _dim,\\n        uint256 _row,\\n        uint256 _col\\n    ) internal pure returns (string memory) {\\n        string memory pillar = string(\\n            abi.encodePacked(\\n                '<div class=\\\"c r',\\n                _row.toString(),\\n                \\\" c\\\",\\n                _col.toString(),\\n                '\\\"><div></div><div></div><div>'\\n            )\\n        );\\n\\n        uint256 x;\\n        uint256 y;\\n        uint256 colOffset;\\n        uint256 rowOffset;\\n        unchecked {\\n            for (\\n                uint256 subRow = _row * _dim + ((_dim - 1) << 1);\\n                subRow >= _row * _dim + (_dim - 1);\\n                --subRow\\n            ) {\\n                rowOffset = 0;\\n                uint256 tempSubCol = _col <= 15\\n                    ? 15 - _dim * (15 - _col) + colOffset\\n                    : 15 + _dim * (_col - 15) + colOffset;\\n                for (\\n                    uint256 subCol = tempSubCol;\\n                    subCol >= tempSubCol + 1 - _dim;\\n                    --subCol\\n                ) {\\n                    x = 15 - ((15 + subCol - (subRow - rowOffset)) >> 1);\\n                    y = 22 - ((subCol + subRow - rowOffset) >> 1);\\n\\n                    // (board >> (transformedPosition * 4)) >> [1,3,0,2]\\n                    pillar = string(\\n                        abi.encodePacked(\\n                            pillar,\\n                            '<div id=\\\"',\\n                            ((_board >> ((8 * (y >> 1) + (x >> 1)) << 2)) >>\\n                                (((0xD8 >> ((x & 1) << 2)) >> ((y & 1) << 1)) &\\n                                    3)) &\\n                                1 ==\\n                                0\\n                                ? \\\"h\\\"\\n                                : \\\"i\\\",\\n                            '\\\"></div>'\\n                        )\\n                    );\\n                    rowOffset++;\\n                    if (subCol == 0) break;\\n                }\\n                colOffset++;\\n                if (subRow == 0) break;\\n            }\\n        }\\n\\n        return string(abi.encodePacked(pillar, \\\"</div></div>\\\"));\\n    }\\n\\n    /// @notice Computes the complement of 24-bit colors.\\n    /// @param _color A 24-bit color.\\n    /// @return The complement of `_color`.\\n    function complementColor(uint256 _color) internal pure returns (uint256) {\\n        unchecked {\\n            return 0xFFFFFF - _color;\\n        }\\n    }\\n\\n    /// @notice Darkens 24-bit colors.\\n    /// @param _color A 24-bit color.\\n    /// @param _num The number of shades to darken by.\\n    /// @return `_color` darkened `_num` times.\\n    function darkenColor(\\n        uint256 _color,\\n        uint256 _num\\n    ) internal pure returns (uint256) {\\n        return\\n            (((_color >> 0x10) >> _num) << 0x10) |\\n            ((((_color >> 8) & 0xFF) >> _num) << 8) |\\n            ((_color & 0xFF) >> _num);\\n    }\\n\\n    /// @notice Brightens 24-bit colors.\\n    /// @param _color A 24-bit color.\\n    /// @param _num The number of tints to brighten by.\\n    /// @return `_color` brightened `_num` times.\\n    function brightenColor(\\n        uint256 _color,\\n        uint256 _num\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            return\\n                ((0xFF - ((0xFF - (_color >> 0x10)) >> _num)) << 0x10) |\\n                ((0xFF - ((0xFF - ((_color >> 8) & 0xFF)) >> _num)) << 8) |\\n                (0xFF - ((0xFF - (_color & 0xFF)) >> _num));\\n        }\\n    }\\n\\n    /// @notice Returns the color hex string of a 24-bit color.\\n    /// @param _integer A 24-bit color.\\n    /// @return The color hex string of `_integer`.\\n    function toColorHexString(\\n        uint256 _integer\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"#\\\",\\n                    HEXADECIMAL_DIGITS[(_integer >> 0x14) & 0xF],\\n                    HEXADECIMAL_DIGITS[(_integer >> 0x10) & 0xF],\\n                    HEXADECIMAL_DIGITS[(_integer >> 0xC) & 0xF],\\n                    HEXADECIMAL_DIGITS[(_integer >> 8) & 0xF],\\n                    HEXADECIMAL_DIGITS[(_integer >> 4) & 0xF],\\n                    HEXADECIMAL_DIGITS[_integer & 0xF]\\n                )\\n            );\\n    }\\n\\n    /// @notice Draws out a move being played out on a board position as a string with unicode\\n    /// characters to represent pieces. Files and rows are labeled with standard algebraic\\n    /// notation. For example:\\n    /// ```\\n    /// 6 \\u265c \\u265d \\u265b \\u265a \\u265d \\u265c\\n    /// 5 \\u265f \\u265f \\u265f \\u265f \\u265f \\u265f\\n    /// 4 \\u00b7 \\u00b7 \\u00b7 \\u00b7 \\u00b7 \\u00b7\\n    /// 3 \\u00b7 \\u00b7 \\u2659 \\u00b7 \\u00b7 \\u00b7\\n    /// 2 \\u2659 \\u2659 * \\u2659 \\u2659 \\u2659\\n    /// 1 \\u2656 \\u2658 \\u2655 \\u2654 \\u2658 \\u2656\\n    ///  a b c d e f\\n    /// ```\\n    /// * indicates the square the piece moved from.\\n    /// @param _board The board the move is played on.\\n    /// @return The string showing the move played out on the board.\\n    function drawMove(uint256 _board) internal pure returns (string memory) {\\n        string memory boardString = \\\"```\\\\\\\\n\\\";\\n\\n        for (uint256 index = 63; index != 0; index--) {\\n            uint256 indexToDraw = index;\\n            boardString = string(\\n                abi.encodePacked(\\n                    boardString,\\n                    indexToDraw & 7 == 7\\n                        ? string(\\n                            abi.encodePacked(\\n                                Strings.toString((indexToDraw >> 3) + 1),\\n                                \\\" \\\"\\n                            )\\n                        )\\n                        : \\\"\\\",\\n                    getPieceChar((_board >> (indexToDraw << 2)) & 0xF),\\n                    indexToDraw & 7 == 0 && indexToDraw != 0\\n                        ? \\\"\\\\\\\\n\\\"\\n                        : indexToDraw != 0\\n                        ? \\\" \\\"\\n                        : \\\"\\\"\\n                )\\n            );\\n        }\\n\\n        boardString = string(\\n            abi.encodePacked(\\n                boardString,\\n                getPieceChar(_board & 0xF),\\n                \\\"\\\\\\\\n  a b c d e f g h\\\\\\\\n```\\\"\\n            )\\n        );\\n\\n        return boardString;\\n    }\\n\\n    /// @notice Maps pieces to its corresponding unicode character.\\n    /// @param _piece A piece.\\n    /// @return The unicode character corresponding to `_piece`. It returns ``.'' otherwise.\\n    function getPieceChar(\\n        uint256 _piece\\n    ) internal pure returns (string memory) {\\n        if (_piece == 1) return unicode\\\"\\u265f\\\";\\n        if (_piece == 2) return unicode\\\"\\u265d\\\";\\n        if (_piece == 3) return unicode\\\"\\u265c\\\";\\n        if (_piece == 4) return unicode\\\"\\u265e\\\";\\n        if (_piece == 5) return unicode\\\"\\u265b\\\";\\n        if (_piece == 6) return unicode\\\"\\u265a\\\";\\n        if (_piece == 9) return unicode\\\"\\u2659\\\";\\n        if (_piece == 0xA) return unicode\\\"\\u2657\\\";\\n        if (_piece == 0xB) return unicode\\\"\\u2656\\\";\\n        if (_piece == 0xC) return unicode\\\"\\u2658\\\";\\n        if (_piece == 0xD) return unicode\\\"\\u2655\\\";\\n        if (_piece == 0xE) return unicode\\\"\\u2654\\\";\\n        return unicode\\\"\\u00b7\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x4b57d6de08f62a3df917c84c78da16b8ccaffd0300e1d84cff6b39a863735f17\",\"license\":\"MIT\"},\"contracts/interfaces/IThreeOutOfNineART.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IThreeOutOfNineART {\\n    function getMetadata(\\n        uint256 _internalId,\\n        uint256 _board\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x63652ec093a0652273f9ae5cc20bb657cf3b8e6835715e452f60b6013c37979f\",\"license\":\"UNLICENSED\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz012345678\\\" \\\"9+/\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n        string memory table = TABLE;\\n        uint256 encodedLength = ((data.length + 2) / 3) << 2;\\n        string memory result = new string(encodedLength + 0x20);\\n\\n        assembly {\\n            mstore(result, encodedLength)\\n            let tablePtr := add(table, 1)\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            let resultPtr := add(result, 0x20)\\n            for {} lt(dataPtr, endPtr) {} {\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(0x12, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(0xC, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore(resultPtr, shl(0xF8, mload(add(tablePtr, and(input, 0x3F)))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(0xF0, 0x3D3D)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(0xF8, 0x3D)) }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x25c0847af52f3c5a19de7e092d52a59d129ddcf3e987854e2c1bbe439d55f9d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620000c257601f62002c7c38819003918201601f19168301916001600160401b03831184841017620000c757808492602094604052833981010312620000c257516001600160a01b039081811690819003620000c2578015620000a957600080546001600160a01b03198116831782556040519316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3612b9e9081620000de8239f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c908163715018a61461007a5750806371adb5e6146100755780637477efa4146100705780638da5cb5b1461006b578063f2fde38b146100665763f3ccaac01461006157600080fd5b6105da565b610515565b6104ec565b610272565b6101a9565b346100d357806003193601126100d3576100926106a4565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761010857604052565b6100d6565b6103e0810190811067ffffffffffffffff82111761010857604052565b90601f8019910116810190811067ffffffffffffffff82111761010857604052565b60405190610100820182811067ffffffffffffffff82111761010857604052565b604051906080820182811067ffffffffffffffff82111761010857604052565b67ffffffffffffffff811161010857601f01601f191660200190565b3461021e57602036600319011261021e5760043567ffffffffffffffff811161021e573660238201121561021e5780600401356101e58161018d565b906101f3604051928361012a565b808252366024828501011161021e57602081600092602461021c960183860137830101526106d0565b005b600080fd5b60005b8381106102365750506000910152565b8181015183820152602001610226565b604091602082526102668151809281602086015260208686019101610223565b601f01601f1916010190565b3461021e5760408060031936011261021e576004359060243591815190602093848301836102a4848360209181520190565b0393601f199485810182526102b9908261012a565b5190206102c6908261144e565b90916102d190612632565b92855180948882016102f19060079066169696ae372e3760c91b81520190565b6102fa91610810565b03858101855261030a908561012a565b6fffffffffffffffffffffffffffffffff16610325906109b4565b9185518088810161033590610827565b038681018252610345908261012a565b61034e90612a54565b908651809289820161038490601a907f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081520190565b61038d91610810565b03868101835261039d908361012a565b8651707b226e616d65223a2250757a7a6c65202360781b8982019081529095869590916011016103cc91610810565b701116113232b9b1b934b83a34b7b7111d1160791b81526011016103ef91610810565b7f222c22616e696d6174696f6e5f75726c223a22646174613a746578742f68746d8152681b0ed8985cd94d8d0b60ba1b602082015260290161043091610810565b6a11161134b6b0b3b2911d1160a91b8152600b0161044d91610810565b6f222c2261747472696275746573223a5b60801b815260100161046f91610810565b615d7d60f01b815260020103828101825261048a908261012a565b61049390612a54565b82517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000094810194855293849190601d016104cc91610810565b0390810183526104dc908361012a565b516104e8819282610246565b0390f35b3461021e57600036600319011261021e576000546040516001600160a01b039091168152602090f35b3461021e57602036600319011261021e576001600160a01b036004358181169081900361021e576105446106a4565b801561058757600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260006004820152602490fd5b90600182811c921680156105d0575b60208310146105ba57565b634e487b7160e01b600052602260045260246000fd5b91607f16916105af565b3461021e576000806003193601126100d357604051908060018054916105ff836105a0565b8086529282811690811561067a5750600114610632575b6104e8856106268187038261012a565b60405191829182610246565b9250808352600080516020612b498339815191525b828410610662575050508101602001610626826104e8610616565b80546020858701810191909152909301928101610647565b8695506104e89693506020925061062694915060ff191682840152151560051b8201019293610616565b6000546001600160a01b031633036106b857565b60405163118cdaa760e01b8152336004820152602490fd5b906106d96106a4565b815167ffffffffffffffff811161010857600190610700816106fb84546105a0565b6107ae565b602080601f831160011461073b575081929394600092610730575b5050600019600383901b1c191690821b179055565b01519050388061071b565b90601f1983169561075c6001600052600080516020612b4983398151915290565b926000905b888210610797575050838596971061077e575b505050811b019055565b015160001960f88460031b161c19169055388080610774565b808785968294968601518155019501930190610761565b90601f82116107bb575050565b600191600090838252600080516020612b49833981519152906020601f850160051c83019410610806575b601f0160051c01915b8281106107fc5750505050565b81815583016107ef565b90925082906107e6565b9061082360209282815194859201610223565b0190565b9060009160019081549161083a836105a0565b92818116908115610890575060011461085257505050565b809192939450600052600080516020612b49833981519152906000915b84831061087d575050500190565b818160209254858701520192019161086f565b60ff191683525050811515909102019150565b604051906020820182811067ffffffffffffffff8211176101085760405260008252565b604051906108d4826100ec565b6001825260203681840137565b906108eb8261018d565b6108f8604051918261012a565b8281528092610909601f199161018d565b0190602036910137565b6040516008610921826100ec565b6001908183526020368185013760218301825b61093f575b50505090565b6000190190600a906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561097157919082610934565b610939565b60026109806108c7565b90602182015b6000190190600a906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304908161098657505090565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015610ae9575b506d04ee2d6d415b85acef810000000080831015610ada575b50662386f26fc1000080831015610acb575b506305f5e10080831015610abc575b5061271080831015610aad575b506064821015610a9d575b600a80921015610a93575b600190816021610a4b8287016108e1565b95860101905b610a5d575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215610a8e57919082610a51565b610a56565b9160010191610a3a565b9190606460029104910191610a2f565b60049193920491019138610a24565b60089193920491019138610a17565b60109193920491019138610a08565b602091939204910191386109f6565b6040935081049150386109dd565b60405190610b04826100ec565b60018252600360fc1b6020830152565b60405190610b21826100ec565b60028252610c8d60f21b6020830152565b60405190610b3f826100ec565b6009825268556c7472617769646560b81b6020830152565b60405190610b64826100ec565b6002825261189960f11b6020830152565b60405190610b82826100ec565b60048252635769646560e01b6020830152565b60405190610ba2826100ec565b60018252601960f91b6020830152565b60405190610bbf826100ec565b60068252654e6172726f7760d01b6020830152565b60405190610be1826100ec565b60048252634e6f6e6560e01b6020830152565b60405190610c01826100ec565b60048252630313030360e41b6020830152565b60405190610c21826100ec565b6008825267496e66696e69746560c01b6020830152565b60405190610c45826100ec565b60038252620cce4d60ea1b6020830152565b60405190610c64826100ec565b60048252634375626560e01b6020830152565b60405190610c84826100ec565b600382526231393760e81b6020830152565b60405190610ca3826100ec565b600382526218979960e91b6020830152565b60405190610cc2826100ec565b6002825261072760f31b6020830152565b60405190610ce0826100ec565b60038252620c4bcd60ea1b6020830152565b60405190610cff826100ec565b60018252600760fb1b6020830152565b60405190610d1c826100ec565b6005825264506c616e6560d81b6020830152565b60405190610d3d826100ec565b600782526610dd5c985d195960ca1b6020830152565b60405190610d60826100ec565b6004825263139bdc9960e21b6020830152565b60405190610d80826100ec565b6003825262422f5760e81b6020830152565b60405190610d9f826100ec565b600982526821b0b7323cb1b7b93760b91b6020830152565b60405190610dc4826100ec565b60038252622923a160e91b6020830152565b60405190610de3826100ec565b60068252655653436f646560d01b6020830152565b60405190610e05826100ec565b60048252632732b7b760e11b6020830152565b60405190610e25826100ec565b60068252654a756e676c6560d01b6020830152565b60405190610e47826100ec565b600482526321b7b93760e11b6020830152565b634e487b7160e01b600052603260045260246000fd5b906008811015610e815760051b0190565b610e5a565b906004811015610e815760051b0190565b60405190610ea4826100ec565b6004825263159bda5960e21b6020830152565b60405190610ec4826100ec565b600782526645636c6970736560c81b6020830152565b60405190610ee7826100ec565b600582526454696e747360d81b6020830152565b60405190610f08826100ec565b600682526553686164657360d01b6020830152565b60405190610f2a826100ec565b6007825266556e69666f726d60c81b6020830152565b60405190610f4d8261010d565b7f69643b677269642d74656d706c6174652d636f6c756d6e733a726570656174286103c0808452837f2d2d6e3a63616c6328283339347078202d2028766172282d2d6229202d20312960208201527f2a766172282d2d6329292f766172282d2d6229293b2d2d6f3a63616c6328313060408201527f367078202b20766172282d2d6e29293b2d2d703a63616c6328766172282d2d6160608201527f292f32297d73656374696f6e7b6865696768743a766172282d2d61293b77696460808201527f74683a766172282d2d61293b6261636b67726f756e643a766172282d2d65293b60a08201527f706f736974696f6e3a6162736f6c7574653b6c6566743a303b746f703a303b7260c08201527f696768743a303b626f74746f6d3a303b6f766572666c6f773a68696464656e7d60e08201527f2e637b6865696768743a303b77696474683a303b706f736974696f6e3a6162736101008201527f6f6c7574653b7472616e736974696f6e3a302e3235737d2e633a686f7665727b6101208201527f7472616e73666f726d3a7472616e736c617465283070782c2d36347078293b746101408201527f72616e736974696f6e3a302e3235737d2e633e2a7b6865696768743a766172286101608201527f2d2d6e293b77696474683a766172282d2d6e293b626f726465722d626f74746f6101808201527f6d3a34707820736f6c696420626c61636b3b626f726465722d72696768743a346101a08201527f707820736f6c696420626c61636b3b626f726465722d6c6566743a31707820736101c08201527f6f6c696420626c61636b3b626f726465722d746f703a31707820736f6c6964206101e08201527f626c61636b3b7472616e73666f726d2d6f726967696e3a3020303b706f7369746102008201527f696f6e3a72656c61746976653b626f782d73697a696e673a626f726465722d626102208201527f6f787d2e633e2a3a6e74682d6368696c642831297b77696474683a766172282d6102408201527f2d64293b6261636b67726f756e642d636f6c6f723a766172282d2d66293b74726102608201527f616e73666f726d3a726f7461746528393064656729736b657758282d333064656102808201527f67297363616c655928302e383634297d2e633e2a3a6e74682d6368696c6428326102a08201527f297b6865696768743a766172282d2d64293b626f74746f6d3a766172282d2d6e6102c08201527f293b6261636b67726f756e642d636f6c6f723a766172282d2d67293b7472616e6102e08201527f73666f726d3a726f74617465282d333064656729736b657758282d33306465676103008201527f297363616c655928302e383634297d23687b6261636b67726f756e642d636f6c6103208201527f6f723a766172282d2d68297d23697b6261636b67726f756e642d636f6c6f723a6103408201527f766172282d2d69297d2e633e2a3a6e74682d6368696c642833297b626f74746f6103608201527f6d3a63616c6328766172282d2d6429202b20766172282d2d6e29293b6261636b6103808201527f67726f756e642d636f6c6f723a766172282d2d68293b646973706c61793a67726103a08201520152565b634e487b7160e01b600052601160045260246000fd5b60405190611400826100ec565b600582526446616c736560d81b6020830152565b60405190611421826100ec565b60018252602b60f81b6020830152565b6040519061143e826100ec565b60018252602d60f81b6020830152565b6114b7929161145b610913565b611463610913565b926114cd6040946114db86519283926114b76114bd6020986114b78a88016023907f7b2274726169745f74797065223a2244696d656e73696f6e222c2276616c7565815262111d1160e91b60208201520190565b90610810565b6301061cb960e51b815260040190565b61227d60f01b815260020190565b03936114ef601f199586810184528361012a565b6115356115526114fd610913565b61154689519384926114b78a8501601c907f3c7374796c653e3a726f6f747b2d2d613a3130303070783b2d2d623a0000000081520190565b641d9696b19d60d91b815260050190565b0387810183528261012a565b61155a610af7565b5061160a600f9182808516600481106000146121c85750506115fe6115eb8a6115dd8a6115d16114cd61158b610af7565b946114b76115a861159a610bd4565b925b519e8f96870190610810565b7f2c7b2274726169745f74797065223a22476170222c2276616c7565223a2200008152601e0190565b038c81018a528961012a565b8b519d8e948b860190610810565b66383c1d9696b21d60c91b815260070190565b038781018b528a61012a565b600191600481901c603f168381101561214357508588611628610cf2565b9b611631610d0f565b6114b7936116896114cd611695936114b76116566116c6985b519d8e96870190610810565b7f2c7b2274726169745f74797065223a22486569676874222c2276616c7565223a8152601160f91b602082015260210190565b038b810189528861012a565b6116ba6116ab889e8d519586948d860190610810565b6270783b60e81b815260030190565b0389810183528261012a565b600091601f958682600a1c169360198510600014611f7657505062ffffff9b8c82861c16906116f4826109b4565b908c519182918c830161170691610810565b7f2c7b2274726169745f74797065223a224261736520436f6c6f72222c2276616c8152633ab2911d60e11b602082015260240161174291610810565b607d60f81b8152600101038b8101825261175c908261012a565b936007811015611df35750809150611772610f1d565b9c03908060181b908060301b908060481b9060601b17171717915b89519b8c9189830161179e91610810565b7f2c7b2274726169745f74797065223a22436f6c6f722047656e65726174696f6e81526a1116113b30b63ab2911d1160a91b6020820152602b016117e191610810565b61227d60f01b8152600201038881018c526117fc908c61012a565b8160601c611809906124ab565b9162ffffff90818160481c1661181e906124ab565b91808260301c1661182e906124ab565b90808360181c1661183e906124ab565b9216611849906124ab565b928c519586958c870161185b91610810565b631696b29d60e11b815260040161187191610810565b641d9696b31d60d91b815260050161188891610810565b641d9696b39d60d91b815260050161189f91610810565b641d9696b41d60d91b81526005016118b691610810565b641d9696b49d60d91b81526005016118cd91610810565b603b60f81b81526001010387810182526118e7908261012a565b6118ef610f40565b906118f8610976565b611900610976565b908a519384938a850161191291610810565b61191b91610810565b61192491610810565b7f2c316672293b677269642d74656d706c6174652d726f77733a72657065617428815260200161195391610810565b7f2c316672293b7472616e73666f726d3a726f746174652832313064656729736b81527f6577282d3330646567297363616c655928302e383634297d000000000000000060208201526038010387810182526119af908261012a565b926119b86113f3565b9988519a8b918883016119ca91610810565b7f2c7b2274726169745f74797065223a2242697420426f72646572222c2276616c8152643ab2911d1160d91b6020820152602501611a0791610810565b61227d60f01b8152600201038781018b52611a22908b61012a565b6000905b808210611c9257505060609360005b828110611bf0575050505084519485848101611a7590601f907f3c73637269707420747970653d22746578742f6a617661736372697074223e0081520190565b7f773d77696e646f773b772e6164644576656e744c697374656e65722827444f4d81527f436f6e74656e744c6f61646564272c28293d3e7b6e3d646f63756d656e742e7160208201527f7565727953656c6563746f72282773656374696f6e27292e7374796c653b00006040820152605e017f6e2e7472616e73666f726d4f726967696e3d27746f70206c656674273b613d2881527f293d3e6e2e7472616e73666f726d3d277363616c6528272b772e696e6e65725760208201527f696474682f313030302b2729273b6128293b772e6f6e726573697a653d617d296040820152603b60f81b6060820152606101681e17b9b1b934b83a1f60b91b8152600901038581018752611b85908761012a565b519485938401611b9491610810565b611b9d91610810565b701e17b9ba3cb6329f1e39b2b1ba34b7b71f60791b8152601101611bc091610810565b691e17b9b2b1ba34b7b71f60b11b8152600a01039081018252611be3908261012a565b611bec90612a54565b9190565b8360078211801590611c8957828503905b81925b611c13575b5050508301611a35565b90919781600014611c75578a8a8d868a1b86015b8c11611c6c576002928a96959492611c58611c64938f611c4b6114b7918d8f612291565b9151968794850190610810565b0390810183528261012a565b990192611c04565b50505097611c09565b8a8a8d60011987601003018a1b8601611c27565b81830190611c01565b90938390878a611ca1886109b4565b611caa896109b4565b611cb38a6109b4565b90888b109283600014611de557611cc8611431565b935b15611dd257611cda8c8b036109b4565b945b519687968701611ceb91610810565b61173960f11b8152600201611cff91610810565b7403dba37b81d31b0b631943b30b9141696b79490159605d1b8152601501611d2691610810565b7f2a28766172282d2d6e292f32202b20766172282d2d632929297d2e63000000008152601c01611d5591610810565b7303db632b33a1d31b0b631943b30b9141696b814960651b8152601401611d7b91610810565b661018171c1b1b1560c91b8152600701611d9491610810565b7f2a28766172282d2d6e29202b20766172282d2d632929297d00000000000000008152601801038981018252611dca908261012a565b940190611a26565b611ddf600e198d016109b4565b94611cdc565b611ded611414565b93611cca565b600e811015611e8e57509050611e07610efb565b9b81611e3062010000600160fd1b03600383901c908116611f00821617601f9091161760601b90565b611e5762010000600160ff1b03600184901c908116617f00821617607f9091161760481b90565b17611e7f62010000600160fe1b03600284901c908116613f00821617603f9091161760301b90565b1791039160181b17179161178d565b6015811015611f1f57509050611ea2610eda565b9b60ff8083168103818460081c168203848060101c840394039460181b938260021c84038260021c850360081b8260021c860360101b171760301b93838b1c8103838c1c820360081b838d1c830360101b171760481b9360031c81039260031c810360081b9160031c900360101b171760601b171717179161178d565b60181115611f53576bffffff000000000000000000915080611f3f610eb7565b9d03908060181b9060601b1717179161178d565b65ffffff00000090611f63610e97565b9d039160091b168160601b17179161178d565b9193509b5084611f84610d30565b9c84861c90611f9161014c565b611f99610d53565b8152611fa3610d73565b8c8201528d611fb0610d92565b90820152611fbc610db7565b6060820152611fc9610dd6565b6080820152611fd6610df8565b60a0820152611fe3610e18565b60c0820152611ff0610e3a565b60e08201526007831661200291610e70565b51908d519182918d830161201591610810565b7f2c7b2274726169745f74797065223a22436f6c6f72205468656d65222c227661815265363ab2911d1160d11b602082015260260161205391610810565b61227d60f01b8152600201038c8101825261206e908261012a565b9461207761016d565b7d8fbcbbebcb8bd087705e81acb48ead000000ffffffffffffffffff0000008152907d0d3b66f4d35eee964bfaf0caf95738ffff0000ff000000ffff0000ffff00828d01527d1e1e1e569cd6d2d1a2ba7fb54dc4ac00ffffffff000000ff00ff00ff00ff828f01527dbe3400015045020d22eabaacbe3400f9c233705860211a28346830f9c233606083015260101c60031661211291610e86565b516001600160f01b031692501661212d5760781c5b9161178d565b6effffffffffffffffffffffffffffff16612127565b600b81101561217d57508588612157610cb5565b9b612160610cd3565b6114b7936116896114cd611695936114b76116566116c69861164a565b601581101561219a57508588612191610c77565b9b612160610c96565b603311156121b55785886121ac610c38565b9b612160610c57565b85886121bf610bf4565b9b612160610c14565b600d8110156122015750506115fe6115eb8a6115dd8a6115d16114cd6121ec610b95565b946114b76115a86121fb610bb2565b9261159c565b101561222f576115fe6115eb8a6115dd8a6115d16114cd612220610b57565b946114b76115a86121fb610b75565b6115fe6115eb8a6115dd8a6115d16114cd612248610b14565b946114b76115a86121fb610b32565b60405190612264826100ec565b60018252606960f81b6020830152565b60405190612281826100ec565b60018252600d60fb1b6020830152565b916122ef91926122a0846109b4565b916122aa816109b4565b9160409261231884519687926114b76122e16020996114b78b8801600f906e1e3234bb1031b630b9b99e9131903960891b81520190565b61206360f01b815260020190565b7f223e3c6469763e3c2f6469763e3c6469763e3c2f6469763e3c6469763e0000008152601d0190565b039461232c601f199687810183528261012a565b95600190811b808201926002918201919060005b85841015612383575b5050505050505090611c58612368612380949351958693840190610810565b6b1e17b234bb1f1e17b234bb1f60a11b8152600c0190565b90565b600f60008189116124995782898303881b83030190915b81905b60001983018210156123c6575b5050505084019280156123c1576000190192612340565b612349565b9091929d88908f8f8f8f612453611c5891878f8f8f60039160d88f948f9c818e6124679f83600495038a03018a1c9003970103871c6016039386881c60071986861b1601841b1c95831b161c91851b161c161c1615600014612485576114b761243e612430612274565b925b51988996870190610810565b681e3234bb1034b21e9160b91b815260090190565b67111f1e17b234bb1f60c11b815260080190565b9e019188811561247f5750919291600019019061239d565b506123aa565b6114b761243e612493612257565b92612432565b90600e198901871b830181019061239a565b602090600f601482901c811683811015610e8157818360101c169284841015610e81578281600c1c169285841015610e8157808260081c169086821015610e8157808360041c169287841015610e8157169386851015610e8157604051602360f81b9781019788526001600160f81b03196f181899199a1a9b1b9c1ca0a121a222a360811b9586901a60f890811b821660018b01529786901a881b811660028a01529185901a871b821660038901529184901a861b811660048801529183901a851b821660058701529190921a90921b166006830152906123809082906007015b03601f19810183528261012a565b604051906125a7826100ec565b60058252643030302e3760d91b6020830152565b80156125c8576000190190565b6113dd565b90600182018092116125c857565b90600282018092116125c857565b90602082018092116125c857565b60405190612604826100ec565b60018252600160fd1b6020830152565b60405190612621826100ec565b60028252612e3760f11b6020830152565b61263a61259a565b90603f915b821580159061272c576126e46126ea9261258c6114b7936114b76007808a1690811460001461271e576126956126a261268261267d8d60031c6125cd565b6109b4565b61258c6040519384926020840190610810565b600160fd1b815260010190565b925b6126b5600f8b8d60021b1c16612912565b911580612717575b600090156126f05750506114b76126d2612614565b935b6040519889976020890190610810565b926125bb565b9161263f565b5015612707576114b76127016125f7565b936126d4565b6114b76127126108a3565b612701565b50806126bd565b6127266108a3565b926126a4565b506114b7925061258c612757612747600f6123809516612912565b6040519586946020860190610810565b7f5c6e20206120622063206420652066206720685c6e6060600000000000000000815260180190565b6040519061278d826100ec565b6003825262e2999f60e81b6020830152565b604051906127ac826100ec565b6003825262e2999d60e81b6020830152565b604051906127cb826100ec565b600382526238a66760ea1b6020830152565b604051906127ea826100ec565b6003825262714ccf60e91b6020830152565b60405190612809826100ec565b6003825262e2999b60e81b6020830152565b60405190612828826100ec565b6003825262714ccd60e91b6020830152565b60405190612847826100ec565b6003825262e2999960e81b6020830152565b60405190612866826100ec565b6003825262e2999760e81b6020830152565b60405190612885826100ec565b6003825262714ccb60e91b6020830152565b604051906128a4826100ec565b60038252621c533360eb1b6020830152565b604051906128c3826100ec565b6003825262e2999560e81b6020830152565b604051906128e2826100ec565b600382526238a66560ea1b6020830152565b60405190612901826100ec565b6002825261c2b760f01b6020830152565b600181146129db57600281146129d257600381146129c957600481146129c057600581146129b757600681146129ae57600981146129a557600a811461299c57600b811461299357600c811461298a57600d811461298157600e14612979576123806128f4565b6123806128d5565b506123806128b6565b50612380612897565b50612380612878565b50612380612859565b5061238061283a565b5061238061281b565b506123806127fc565b506123806127dd565b506123806127be565b5061238061279f565b50612380612780565b604051906060820182811067ffffffffffffffff82111761010857604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b805115612b3f57612a636129e4565b612a80612a7a612a7384516125db565b6003900490565b60021b90565b91612a92612a8d846125e9565b6108e1565b92835280815182019060208501935b828210612ae357505050600390510680600114612ad257600214612ac3575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b90919360049060038094019384516001603f81818460121c16880101519260f893841b8652828282600c1c1689010151841b8387015282828260061c1689010151841b60028701521686010151901b9082015201939190612aa1565b506123806108a356feb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a264697066735822122072fb13723ff99c7f9577d464adf33ef3b40b98740fd0146e4412dad106b0853664736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c908163715018a61461007a5750806371adb5e6146100755780637477efa4146100705780638da5cb5b1461006b578063f2fde38b146100665763f3ccaac01461006157600080fd5b6105da565b610515565b6104ec565b610272565b6101a9565b346100d357806003193601126100d3576100926106a4565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761010857604052565b6100d6565b6103e0810190811067ffffffffffffffff82111761010857604052565b90601f8019910116810190811067ffffffffffffffff82111761010857604052565b60405190610100820182811067ffffffffffffffff82111761010857604052565b604051906080820182811067ffffffffffffffff82111761010857604052565b67ffffffffffffffff811161010857601f01601f191660200190565b3461021e57602036600319011261021e5760043567ffffffffffffffff811161021e573660238201121561021e5780600401356101e58161018d565b906101f3604051928361012a565b808252366024828501011161021e57602081600092602461021c960183860137830101526106d0565b005b600080fd5b60005b8381106102365750506000910152565b8181015183820152602001610226565b604091602082526102668151809281602086015260208686019101610223565b601f01601f1916010190565b3461021e5760408060031936011261021e576004359060243591815190602093848301836102a4848360209181520190565b0393601f199485810182526102b9908261012a565b5190206102c6908261144e565b90916102d190612632565b92855180948882016102f19060079066169696ae372e3760c91b81520190565b6102fa91610810565b03858101855261030a908561012a565b6fffffffffffffffffffffffffffffffff16610325906109b4565b9185518088810161033590610827565b038681018252610345908261012a565b61034e90612a54565b908651809289820161038490601a907f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081520190565b61038d91610810565b03868101835261039d908361012a565b8651707b226e616d65223a2250757a7a6c65202360781b8982019081529095869590916011016103cc91610810565b701116113232b9b1b934b83a34b7b7111d1160791b81526011016103ef91610810565b7f222c22616e696d6174696f6e5f75726c223a22646174613a746578742f68746d8152681b0ed8985cd94d8d0b60ba1b602082015260290161043091610810565b6a11161134b6b0b3b2911d1160a91b8152600b0161044d91610810565b6f222c2261747472696275746573223a5b60801b815260100161046f91610810565b615d7d60f01b815260020103828101825261048a908261012a565b61049390612a54565b82517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000094810194855293849190601d016104cc91610810565b0390810183526104dc908361012a565b516104e8819282610246565b0390f35b3461021e57600036600319011261021e576000546040516001600160a01b039091168152602090f35b3461021e57602036600319011261021e576001600160a01b036004358181169081900361021e576105446106a4565b801561058757600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260006004820152602490fd5b90600182811c921680156105d0575b60208310146105ba57565b634e487b7160e01b600052602260045260246000fd5b91607f16916105af565b3461021e576000806003193601126100d357604051908060018054916105ff836105a0565b8086529282811690811561067a5750600114610632575b6104e8856106268187038261012a565b60405191829182610246565b9250808352600080516020612b498339815191525b828410610662575050508101602001610626826104e8610616565b80546020858701810191909152909301928101610647565b8695506104e89693506020925061062694915060ff191682840152151560051b8201019293610616565b6000546001600160a01b031633036106b857565b60405163118cdaa760e01b8152336004820152602490fd5b906106d96106a4565b815167ffffffffffffffff811161010857600190610700816106fb84546105a0565b6107ae565b602080601f831160011461073b575081929394600092610730575b5050600019600383901b1c191690821b179055565b01519050388061071b565b90601f1983169561075c6001600052600080516020612b4983398151915290565b926000905b888210610797575050838596971061077e575b505050811b019055565b015160001960f88460031b161c19169055388080610774565b808785968294968601518155019501930190610761565b90601f82116107bb575050565b600191600090838252600080516020612b49833981519152906020601f850160051c83019410610806575b601f0160051c01915b8281106107fc5750505050565b81815583016107ef565b90925082906107e6565b9061082360209282815194859201610223565b0190565b9060009160019081549161083a836105a0565b92818116908115610890575060011461085257505050565b809192939450600052600080516020612b49833981519152906000915b84831061087d575050500190565b818160209254858701520192019161086f565b60ff191683525050811515909102019150565b604051906020820182811067ffffffffffffffff8211176101085760405260008252565b604051906108d4826100ec565b6001825260203681840137565b906108eb8261018d565b6108f8604051918261012a565b8281528092610909601f199161018d565b0190602036910137565b6040516008610921826100ec565b6001908183526020368185013760218301825b61093f575b50505090565b6000190190600a906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561097157919082610934565b610939565b60026109806108c7565b90602182015b6000190190600a906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304908161098657505090565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015610ae9575b506d04ee2d6d415b85acef810000000080831015610ada575b50662386f26fc1000080831015610acb575b506305f5e10080831015610abc575b5061271080831015610aad575b506064821015610a9d575b600a80921015610a93575b600190816021610a4b8287016108e1565b95860101905b610a5d575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215610a8e57919082610a51565b610a56565b9160010191610a3a565b9190606460029104910191610a2f565b60049193920491019138610a24565b60089193920491019138610a17565b60109193920491019138610a08565b602091939204910191386109f6565b6040935081049150386109dd565b60405190610b04826100ec565b60018252600360fc1b6020830152565b60405190610b21826100ec565b60028252610c8d60f21b6020830152565b60405190610b3f826100ec565b6009825268556c7472617769646560b81b6020830152565b60405190610b64826100ec565b6002825261189960f11b6020830152565b60405190610b82826100ec565b60048252635769646560e01b6020830152565b60405190610ba2826100ec565b60018252601960f91b6020830152565b60405190610bbf826100ec565b60068252654e6172726f7760d01b6020830152565b60405190610be1826100ec565b60048252634e6f6e6560e01b6020830152565b60405190610c01826100ec565b60048252630313030360e41b6020830152565b60405190610c21826100ec565b6008825267496e66696e69746560c01b6020830152565b60405190610c45826100ec565b60038252620cce4d60ea1b6020830152565b60405190610c64826100ec565b60048252634375626560e01b6020830152565b60405190610c84826100ec565b600382526231393760e81b6020830152565b60405190610ca3826100ec565b600382526218979960e91b6020830152565b60405190610cc2826100ec565b6002825261072760f31b6020830152565b60405190610ce0826100ec565b60038252620c4bcd60ea1b6020830152565b60405190610cff826100ec565b60018252600760fb1b6020830152565b60405190610d1c826100ec565b6005825264506c616e6560d81b6020830152565b60405190610d3d826100ec565b600782526610dd5c985d195960ca1b6020830152565b60405190610d60826100ec565b6004825263139bdc9960e21b6020830152565b60405190610d80826100ec565b6003825262422f5760e81b6020830152565b60405190610d9f826100ec565b600982526821b0b7323cb1b7b93760b91b6020830152565b60405190610dc4826100ec565b60038252622923a160e91b6020830152565b60405190610de3826100ec565b60068252655653436f646560d01b6020830152565b60405190610e05826100ec565b60048252632732b7b760e11b6020830152565b60405190610e25826100ec565b60068252654a756e676c6560d01b6020830152565b60405190610e47826100ec565b600482526321b7b93760e11b6020830152565b634e487b7160e01b600052603260045260246000fd5b906008811015610e815760051b0190565b610e5a565b906004811015610e815760051b0190565b60405190610ea4826100ec565b6004825263159bda5960e21b6020830152565b60405190610ec4826100ec565b600782526645636c6970736560c81b6020830152565b60405190610ee7826100ec565b600582526454696e747360d81b6020830152565b60405190610f08826100ec565b600682526553686164657360d01b6020830152565b60405190610f2a826100ec565b6007825266556e69666f726d60c81b6020830152565b60405190610f4d8261010d565b7f69643b677269642d74656d706c6174652d636f6c756d6e733a726570656174286103c0808452837f2d2d6e3a63616c6328283339347078202d2028766172282d2d6229202d20312960208201527f2a766172282d2d6329292f766172282d2d6229293b2d2d6f3a63616c6328313060408201527f367078202b20766172282d2d6e29293b2d2d703a63616c6328766172282d2d6160608201527f292f32297d73656374696f6e7b6865696768743a766172282d2d61293b77696460808201527f74683a766172282d2d61293b6261636b67726f756e643a766172282d2d65293b60a08201527f706f736974696f6e3a6162736f6c7574653b6c6566743a303b746f703a303b7260c08201527f696768743a303b626f74746f6d3a303b6f766572666c6f773a68696464656e7d60e08201527f2e637b6865696768743a303b77696474683a303b706f736974696f6e3a6162736101008201527f6f6c7574653b7472616e736974696f6e3a302e3235737d2e633a686f7665727b6101208201527f7472616e73666f726d3a7472616e736c617465283070782c2d36347078293b746101408201527f72616e736974696f6e3a302e3235737d2e633e2a7b6865696768743a766172286101608201527f2d2d6e293b77696474683a766172282d2d6e293b626f726465722d626f74746f6101808201527f6d3a34707820736f6c696420626c61636b3b626f726465722d72696768743a346101a08201527f707820736f6c696420626c61636b3b626f726465722d6c6566743a31707820736101c08201527f6f6c696420626c61636b3b626f726465722d746f703a31707820736f6c6964206101e08201527f626c61636b3b7472616e73666f726d2d6f726967696e3a3020303b706f7369746102008201527f696f6e3a72656c61746976653b626f782d73697a696e673a626f726465722d626102208201527f6f787d2e633e2a3a6e74682d6368696c642831297b77696474683a766172282d6102408201527f2d64293b6261636b67726f756e642d636f6c6f723a766172282d2d66293b74726102608201527f616e73666f726d3a726f7461746528393064656729736b657758282d333064656102808201527f67297363616c655928302e383634297d2e633e2a3a6e74682d6368696c6428326102a08201527f297b6865696768743a766172282d2d64293b626f74746f6d3a766172282d2d6e6102c08201527f293b6261636b67726f756e642d636f6c6f723a766172282d2d67293b7472616e6102e08201527f73666f726d3a726f74617465282d333064656729736b657758282d33306465676103008201527f297363616c655928302e383634297d23687b6261636b67726f756e642d636f6c6103208201527f6f723a766172282d2d68297d23697b6261636b67726f756e642d636f6c6f723a6103408201527f766172282d2d69297d2e633e2a3a6e74682d6368696c642833297b626f74746f6103608201527f6d3a63616c6328766172282d2d6429202b20766172282d2d6e29293b6261636b6103808201527f67726f756e642d636f6c6f723a766172282d2d68293b646973706c61793a67726103a08201520152565b634e487b7160e01b600052601160045260246000fd5b60405190611400826100ec565b600582526446616c736560d81b6020830152565b60405190611421826100ec565b60018252602b60f81b6020830152565b6040519061143e826100ec565b60018252602d60f81b6020830152565b6114b7929161145b610913565b611463610913565b926114cd6040946114db86519283926114b76114bd6020986114b78a88016023907f7b2274726169745f74797065223a2244696d656e73696f6e222c2276616c7565815262111d1160e91b60208201520190565b90610810565b6301061cb960e51b815260040190565b61227d60f01b815260020190565b03936114ef601f199586810184528361012a565b6115356115526114fd610913565b61154689519384926114b78a8501601c907f3c7374796c653e3a726f6f747b2d2d613a3130303070783b2d2d623a0000000081520190565b641d9696b19d60d91b815260050190565b0387810183528261012a565b61155a610af7565b5061160a600f9182808516600481106000146121c85750506115fe6115eb8a6115dd8a6115d16114cd61158b610af7565b946114b76115a861159a610bd4565b925b519e8f96870190610810565b7f2c7b2274726169745f74797065223a22476170222c2276616c7565223a2200008152601e0190565b038c81018a528961012a565b8b519d8e948b860190610810565b66383c1d9696b21d60c91b815260070190565b038781018b528a61012a565b600191600481901c603f168381101561214357508588611628610cf2565b9b611631610d0f565b6114b7936116896114cd611695936114b76116566116c6985b519d8e96870190610810565b7f2c7b2274726169745f74797065223a22486569676874222c2276616c7565223a8152601160f91b602082015260210190565b038b810189528861012a565b6116ba6116ab889e8d519586948d860190610810565b6270783b60e81b815260030190565b0389810183528261012a565b600091601f958682600a1c169360198510600014611f7657505062ffffff9b8c82861c16906116f4826109b4565b908c519182918c830161170691610810565b7f2c7b2274726169745f74797065223a224261736520436f6c6f72222c2276616c8152633ab2911d60e11b602082015260240161174291610810565b607d60f81b8152600101038b8101825261175c908261012a565b936007811015611df35750809150611772610f1d565b9c03908060181b908060301b908060481b9060601b17171717915b89519b8c9189830161179e91610810565b7f2c7b2274726169745f74797065223a22436f6c6f722047656e65726174696f6e81526a1116113b30b63ab2911d1160a91b6020820152602b016117e191610810565b61227d60f01b8152600201038881018c526117fc908c61012a565b8160601c611809906124ab565b9162ffffff90818160481c1661181e906124ab565b91808260301c1661182e906124ab565b90808360181c1661183e906124ab565b9216611849906124ab565b928c519586958c870161185b91610810565b631696b29d60e11b815260040161187191610810565b641d9696b31d60d91b815260050161188891610810565b641d9696b39d60d91b815260050161189f91610810565b641d9696b41d60d91b81526005016118b691610810565b641d9696b49d60d91b81526005016118cd91610810565b603b60f81b81526001010387810182526118e7908261012a565b6118ef610f40565b906118f8610976565b611900610976565b908a519384938a850161191291610810565b61191b91610810565b61192491610810565b7f2c316672293b677269642d74656d706c6174652d726f77733a72657065617428815260200161195391610810565b7f2c316672293b7472616e73666f726d3a726f746174652832313064656729736b81527f6577282d3330646567297363616c655928302e383634297d000000000000000060208201526038010387810182526119af908261012a565b926119b86113f3565b9988519a8b918883016119ca91610810565b7f2c7b2274726169745f74797065223a2242697420426f72646572222c2276616c8152643ab2911d1160d91b6020820152602501611a0791610810565b61227d60f01b8152600201038781018b52611a22908b61012a565b6000905b808210611c9257505060609360005b828110611bf0575050505084519485848101611a7590601f907f3c73637269707420747970653d22746578742f6a617661736372697074223e0081520190565b7f773d77696e646f773b772e6164644576656e744c697374656e65722827444f4d81527f436f6e74656e744c6f61646564272c28293d3e7b6e3d646f63756d656e742e7160208201527f7565727953656c6563746f72282773656374696f6e27292e7374796c653b00006040820152605e017f6e2e7472616e73666f726d4f726967696e3d27746f70206c656674273b613d2881527f293d3e6e2e7472616e73666f726d3d277363616c6528272b772e696e6e65725760208201527f696474682f313030302b2729273b6128293b772e6f6e726573697a653d617d296040820152603b60f81b6060820152606101681e17b9b1b934b83a1f60b91b8152600901038581018752611b85908761012a565b519485938401611b9491610810565b611b9d91610810565b701e17b9ba3cb6329f1e39b2b1ba34b7b71f60791b8152601101611bc091610810565b691e17b9b2b1ba34b7b71f60b11b8152600a01039081018252611be3908261012a565b611bec90612a54565b9190565b8360078211801590611c8957828503905b81925b611c13575b5050508301611a35565b90919781600014611c75578a8a8d868a1b86015b8c11611c6c576002928a96959492611c58611c64938f611c4b6114b7918d8f612291565b9151968794850190610810565b0390810183528261012a565b990192611c04565b50505097611c09565b8a8a8d60011987601003018a1b8601611c27565b81830190611c01565b90938390878a611ca1886109b4565b611caa896109b4565b611cb38a6109b4565b90888b109283600014611de557611cc8611431565b935b15611dd257611cda8c8b036109b4565b945b519687968701611ceb91610810565b61173960f11b8152600201611cff91610810565b7403dba37b81d31b0b631943b30b9141696b79490159605d1b8152601501611d2691610810565b7f2a28766172282d2d6e292f32202b20766172282d2d632929297d2e63000000008152601c01611d5591610810565b7303db632b33a1d31b0b631943b30b9141696b814960651b8152601401611d7b91610810565b661018171c1b1b1560c91b8152600701611d9491610810565b7f2a28766172282d2d6e29202b20766172282d2d632929297d00000000000000008152601801038981018252611dca908261012a565b940190611a26565b611ddf600e198d016109b4565b94611cdc565b611ded611414565b93611cca565b600e811015611e8e57509050611e07610efb565b9b81611e3062010000600160fd1b03600383901c908116611f00821617601f9091161760601b90565b611e5762010000600160ff1b03600184901c908116617f00821617607f9091161760481b90565b17611e7f62010000600160fe1b03600284901c908116613f00821617603f9091161760301b90565b1791039160181b17179161178d565b6015811015611f1f57509050611ea2610eda565b9b60ff8083168103818460081c168203848060101c840394039460181b938260021c84038260021c850360081b8260021c860360101b171760301b93838b1c8103838c1c820360081b838d1c830360101b171760481b9360031c81039260031c810360081b9160031c900360101b171760601b171717179161178d565b60181115611f53576bffffff000000000000000000915080611f3f610eb7565b9d03908060181b9060601b1717179161178d565b65ffffff00000090611f63610e97565b9d039160091b168160601b17179161178d565b9193509b5084611f84610d30565b9c84861c90611f9161014c565b611f99610d53565b8152611fa3610d73565b8c8201528d611fb0610d92565b90820152611fbc610db7565b6060820152611fc9610dd6565b6080820152611fd6610df8565b60a0820152611fe3610e18565b60c0820152611ff0610e3a565b60e08201526007831661200291610e70565b51908d519182918d830161201591610810565b7f2c7b2274726169745f74797065223a22436f6c6f72205468656d65222c227661815265363ab2911d1160d11b602082015260260161205391610810565b61227d60f01b8152600201038c8101825261206e908261012a565b9461207761016d565b7d8fbcbbebcb8bd087705e81acb48ead000000ffffffffffffffffff0000008152907d0d3b66f4d35eee964bfaf0caf95738ffff0000ff000000ffff0000ffff00828d01527d1e1e1e569cd6d2d1a2ba7fb54dc4ac00ffffffff000000ff00ff00ff00ff828f01527dbe3400015045020d22eabaacbe3400f9c233705860211a28346830f9c233606083015260101c60031661211291610e86565b516001600160f01b031692501661212d5760781c5b9161178d565b6effffffffffffffffffffffffffffff16612127565b600b81101561217d57508588612157610cb5565b9b612160610cd3565b6114b7936116896114cd611695936114b76116566116c69861164a565b601581101561219a57508588612191610c77565b9b612160610c96565b603311156121b55785886121ac610c38565b9b612160610c57565b85886121bf610bf4565b9b612160610c14565b600d8110156122015750506115fe6115eb8a6115dd8a6115d16114cd6121ec610b95565b946114b76115a86121fb610bb2565b9261159c565b101561222f576115fe6115eb8a6115dd8a6115d16114cd612220610b57565b946114b76115a86121fb610b75565b6115fe6115eb8a6115dd8a6115d16114cd612248610b14565b946114b76115a86121fb610b32565b60405190612264826100ec565b60018252606960f81b6020830152565b60405190612281826100ec565b60018252600d60fb1b6020830152565b916122ef91926122a0846109b4565b916122aa816109b4565b9160409261231884519687926114b76122e16020996114b78b8801600f906e1e3234bb1031b630b9b99e9131903960891b81520190565b61206360f01b815260020190565b7f223e3c6469763e3c2f6469763e3c6469763e3c2f6469763e3c6469763e0000008152601d0190565b039461232c601f199687810183528261012a565b95600190811b808201926002918201919060005b85841015612383575b5050505050505090611c58612368612380949351958693840190610810565b6b1e17b234bb1f1e17b234bb1f60a11b8152600c0190565b90565b600f60008189116124995782898303881b83030190915b81905b60001983018210156123c6575b5050505084019280156123c1576000190192612340565b612349565b9091929d88908f8f8f8f612453611c5891878f8f8f60039160d88f948f9c818e6124679f83600495038a03018a1c9003970103871c6016039386881c60071986861b1601841b1c95831b161c91851b161c161c1615600014612485576114b761243e612430612274565b925b51988996870190610810565b681e3234bb1034b21e9160b91b815260090190565b67111f1e17b234bb1f60c11b815260080190565b9e019188811561247f5750919291600019019061239d565b506123aa565b6114b761243e612493612257565b92612432565b90600e198901871b830181019061239a565b602090600f601482901c811683811015610e8157818360101c169284841015610e81578281600c1c169285841015610e8157808260081c169086821015610e8157808360041c169287841015610e8157169386851015610e8157604051602360f81b9781019788526001600160f81b03196f181899199a1a9b1b9c1ca0a121a222a360811b9586901a60f890811b821660018b01529786901a881b811660028a01529185901a871b821660038901529184901a861b811660048801529183901a851b821660058701529190921a90921b166006830152906123809082906007015b03601f19810183528261012a565b604051906125a7826100ec565b60058252643030302e3760d91b6020830152565b80156125c8576000190190565b6113dd565b90600182018092116125c857565b90600282018092116125c857565b90602082018092116125c857565b60405190612604826100ec565b60018252600160fd1b6020830152565b60405190612621826100ec565b60028252612e3760f11b6020830152565b61263a61259a565b90603f915b821580159061272c576126e46126ea9261258c6114b7936114b76007808a1690811460001461271e576126956126a261268261267d8d60031c6125cd565b6109b4565b61258c6040519384926020840190610810565b600160fd1b815260010190565b925b6126b5600f8b8d60021b1c16612912565b911580612717575b600090156126f05750506114b76126d2612614565b935b6040519889976020890190610810565b926125bb565b9161263f565b5015612707576114b76127016125f7565b936126d4565b6114b76127126108a3565b612701565b50806126bd565b6127266108a3565b926126a4565b506114b7925061258c612757612747600f6123809516612912565b6040519586946020860190610810565b7f5c6e20206120622063206420652066206720685c6e6060600000000000000000815260180190565b6040519061278d826100ec565b6003825262e2999f60e81b6020830152565b604051906127ac826100ec565b6003825262e2999d60e81b6020830152565b604051906127cb826100ec565b600382526238a66760ea1b6020830152565b604051906127ea826100ec565b6003825262714ccf60e91b6020830152565b60405190612809826100ec565b6003825262e2999b60e81b6020830152565b60405190612828826100ec565b6003825262714ccd60e91b6020830152565b60405190612847826100ec565b6003825262e2999960e81b6020830152565b60405190612866826100ec565b6003825262e2999760e81b6020830152565b60405190612885826100ec565b6003825262714ccb60e91b6020830152565b604051906128a4826100ec565b60038252621c533360eb1b6020830152565b604051906128c3826100ec565b6003825262e2999560e81b6020830152565b604051906128e2826100ec565b600382526238a66560ea1b6020830152565b60405190612901826100ec565b6002825261c2b760f01b6020830152565b600181146129db57600281146129d257600381146129c957600481146129c057600581146129b757600681146129ae57600981146129a557600a811461299c57600b811461299357600c811461298a57600d811461298157600e14612979576123806128f4565b6123806128d5565b506123806128b6565b50612380612897565b50612380612878565b50612380612859565b5061238061283a565b5061238061281b565b506123806127fc565b506123806127dd565b506123806127be565b5061238061279f565b50612380612780565b604051906060820182811067ffffffffffffffff82111761010857604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b805115612b3f57612a636129e4565b612a80612a7a612a7384516125db565b6003900490565b60021b90565b91612a92612a8d846125e9565b6108e1565b92835280815182019060208501935b828210612ae357505050600390510680600114612ad257600214612ac3575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b90919360049060038094019384516001603f81818460121c16880101519260f893841b8652828282600c1c1689010151841b8387015282828260061c1689010151841b60028701521686010151901b9082015201939190612aa1565b506123806108a356feb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a264697066735822122072fb13723ff99c7f9577d464adf33ef3b40b98740fd0146e4412dad106b0853664736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getMetadata(uint256,uint256)": {
        "details": "The output is base 64-encoded.",
        "params": {
          "_board": "Information about the board.",
          "_internalId": "A bitpacked uint256 where the first 128 bits are the game ID, and the last 128 bits are the move ID within the game."
        },
        "returns": {
          "_0": "Base 64-encoded JSON of metadata generated from `_internalId` and `_move`."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getMetadata(uint256,uint256)": {
        "notice": "Takes in data for a given fiveoutofnine NFT and outputs its metadata in JSON form. Refer to {fiveoutofnineART} for details."
      }
    },
    "notice": " The top/bottom rows and left/right columns are treated as sentinel rows/columns for efficient boundary validation (see {Chess-generateMoves} and {Chess-isValid}). i.e., (63, ..., 56), (07, ..., 00), (63, ..., 07), and (56, ..., 00) never contain pieces. Every bit in those rows and columns should be ignored, except for the last bit. The last bit denotes whose turn it is to play (0 means black's turn; 1 means white's turn). e.g. a potential starting position:                                Black                       00 00 00 00 00 00 00 00                    Black                       00 03 02 05 06 02 03 00                 ♜ ♝ ♛ ♚ ♝ ♜                       00 01 01 01 01 01 01 00                 ♟ ♟ ♟ ♟ ♟ ♟                       00 00 00 00 00 00 00 00     denotes                       00 00 00 00 00 00 00 00    the board                       00 09 09 09 09 09 09 00                 ♙ ♙ ♙ ♙ ♙ ♙                       00 11 12 13 14 12 11 00                 ♖ ♘ ♕ ♔ ♘ ♖                       00 00 00 00 00 00 00 01                    White                                White All numbers in the example above are in decimal representation. ======================================Move Representation======================================= Each move is allocated 12 bits. The first 6 bits are the index the piece is moving from, and the last 6 bits are the index the piece is moving to. Since the index representing a square is at most 54, 6 bits sufficiently represents any index (0b111111 = 63 > 54). e.g. 1243 denotes a move from index 19 to 27 (1243 = (19 << 6) | 27). Since the board is represented by a uint256, consider including ``using Chess for uint256''.Below details how the metadata and art are generated: ==========================================Description=========================================== Token descriptions describe white's move in algebraic notation and black's move in algebraic notation. If white's move results in checkmating black or a stalemate, the description will say black resigned (for simplicity, stalemates are treated as checkmates). Since the engine always plays black, and the player always plays white, white is indicated as ``Player'', and black is indicated as ``fiveoutofnine''. Additionally, for every non game-ending turn, a string graphic is generated after the moves' descriptions. An example:                             Player plays e4 rook captures e5 queen.                             6 · · ♜ · ♚ ♜                             5 · ♟ · · ♖ ♟                             4 ♟ ♙ ♟ ♙ * ♙                             3 ♙ · ♙ · · ·                             2 · · · · ♖ ·                             1 · ♘ · ♔ · ·                               a b c d e f                             fiveoutofnine resigns. * indicates the square the piece moved from. ==============================================Art=============================================== The art is generated as HTML code with in-line CSS (0 JS) according to the following table:  | Property       | Name      | Value/Description                       | Determination       |  | ============== | ========= | ======================================= | =================== |  | Dimension      | 1 × 1     | 1 × 1 pillars                           | Player moved king   |  | (6 traits)     | 2 × 2     | 2 × 2 pillars                           | Player moved rook   |  |                | 3 × 3     | 3 × 3 pillars                           | Engine moved bishop |  |                | 4 × 4     | 4 × 4 pillars                           | Player moved knight |  |                | 6 × 6     | 6 × 6 pillars                           | Player moved pawn   |  |                | 12 × 12   | 12 × 12 pillars                         | Player moved queen  |  | -------------- | --------- | --------------------------------------- | ------------------- |  | Height         | Plane     | 8px pillar height                       | 1 / 64 chance[^0]   |  | (5 traits)     | 1/4       | 98px pillar height                      | 10 / 64 chance[^0]  |  |                | 1/2       | 197px pillar height                     | 10 / 64 chance[^0]  |  |                | Cube      | 394px pillar height                     | 40 / 64 chance[^0]  |  |                | Infinite  | 1000px pillar height                    | 3 / 64 chance[^0]   |  | -------------- | --------- | --------------------------------------- | ------------------- |  | Gap[^1]        | None      | 0px gap between the pillars             | 4 / 16 chance[^0]   |  | (4 traits)     | Narrow    | 2px gap between the pillars             | 9 / 16 chance[^0]   |  |                | Wide      | 12px gap between the pillars            | 2 / 16 chance[^0]   |  |                | Ultrawide | 24px gap between the pillars            | 1 / 16 chance[^0]   |  | -------------- | --------- | --------------------------------------- | ------------------- |  | Color          | Uniform   | All faces are the same color            | 7 / 32 chance[^0]   |  | Generation[^2] | Shades    | Faces get darker anticlockwise          | 7 / 32 chance[^0]   |  | (6 traits)     | Tints     | Faces get lighter anticlockwise         | 7 / 32 chance[^0]   |  |                | Eclipse   | Left face is white; black face is black | 3 / 32 chance[^0]   |  |                | Void      | Left and right face are black           | 1 / 32 chance[^0]   |  |                | Curated   | One of 8 color themes (see below)       | 7 / 32 chance[^0]   |  | -------------- | --------- | --------------------------------------- | ------------------- |  | Color          | Nord      | 0x8FBCBBEBCB8BD087705E81ACB48EAD        | 1 / 8 chance[^0]    |  | Theme[^3]      | B/W       | 0x000000FFFFFFFFFFFFFFFFFF000000        | 1 / 8 chance[^0]    |  | (8 traits)     | Candycorn | 0x0D3B66F4D35EEE964BFAF0CAF95738        | 1 / 8 chance[^0]    |  |                | RGB       | 0xFFFF0000FF000000FFFF0000FFFF00        | 1 / 8 chance[^0]    |  |                | VSCode    | 0x1E1E1E569CD6D2D1A2BA7FB54DC4AC        | 1 / 8 chance[^0]    |  |                | Neon      | 0x00FFFFFFFF000000FF00FF00FF00FF        | 1 / 8 chance[^0]    |  |                | Jungle    | 0xBE3400015045020D22EABAACBE3400        | 1 / 8 chance[^0]    |  |                | Corn      | 0xF9C233705860211A28346830F9C233        | 1 / 8 chance[^0]    |  | -------------- | --------- | --------------------------------------- | ------------------- |  | Bit Border[^4] | True      | The bits have a 1px solid black border  | Any pieces captured |  | (2 traits)     | False     | The bits don't have any border          | No pieces captuered |  | ============== | ========= | ======================================= | =================== |  | [^0]: Determined from `_seed`.                                                             |  | [^1]: Gap is omitted when dimension is 1 x 1.                                              |  | [^2]: The first 5 color generation traits are algorithms. A base color is generated from   |  | `seed`, and the remaining colors are generated according to the selected algorithm. The    |  | color of the bits is always the complement of the randomly generated base color, and the   |  | background color depends on the algorithm:                                                 |  |     * Uniform: same as the base color;                                                     |  |     * Shades: darkest shade of the base color;                                             |  |     * Tints: lightest shade of the base color;                                             |  |     * Eclipse: same as the base color;                                                     |  |     * Void: complement of the base color.                                                  |  | If the selected color generation trait is \"Curated,\" 1 of 8 pre-curated themes is randomly |  | selected.                                                                                  |  | [^3]: The entries in the 3rd column are bitpacked integers where                           |  |     * the first 24 bits represent the background color,                                    |  |     * the second 24 bits represent the left face's color,                                  |  |     * the third 24 bits represent the right face's color,                                  |  |     * the fourth 24 bits represent the top face's color,                                   |  |     * and the last 24 bits represent the bits' color.                                      |  | [^4]: Bit border is omitted when dimension is 12 x 12.                                     |",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/ThreeOutOfNineART.sol:ThreeOutOfNineART",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6070,
        "contract": "contracts/ThreeOutOfNineART.sol:ThreeOutOfNineART",
        "label": "image",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}