// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PuzzleAdded extends ethereum.Event {
  get params(): PuzzleAdded__Params {
    return new PuzzleAdded__Params(this);
  }
}

export class PuzzleAdded__Params {
  _event: PuzzleAdded;

  constructor(event: PuzzleAdded) {
    this._event = event;
  }

  get internalTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fen(): string {
    return this._event.parameters[1].value.toString();
  }

  get solutionHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get board(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get description(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class PuzzleAttempted extends ethereum.Event {
  get params(): PuzzleAttempted__Params {
    return new PuzzleAttempted__Params(this);
  }
}

export class PuzzleAttempted__Params {
  _event: PuzzleAttempted;

  constructor(event: PuzzleAttempted) {
    this._event = event;
  }

  get internalTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get solutionSubmission(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class PuzzleRatingChanged extends ethereum.Event {
  get params(): PuzzleRatingChanged__Params {
    return new PuzzleRatingChanged__Params(this);
  }
}

export class PuzzleRatingChanged__Params {
  _event: PuzzleRatingChanged;

  constructor(event: PuzzleRatingChanged) {
    this._event = event;
  }

  get internalTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPuzzleRating(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PuzzleSolved extends ethereum.Event {
  get params(): PuzzleSolved__Params {
    return new PuzzleSolved__Params(this);
  }
}

export class PuzzleSolved__Params {
  _event: PuzzleSolved;

  constructor(event: PuzzleSolved) {
    this._event = event;
  }

  get internalTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenMinted extends ethereum.Event {
  get params(): TokenMinted__Params {
    return new TokenMinted__Params(this);
  }
}

export class TokenMinted__Params {
  _event: TokenMinted;

  constructor(event: TokenMinted) {
    this._event = event;
  }

  get internalTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get solver(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UserRatingChanged extends ethereum.Event {
  get params(): UserRatingChanged__Params {
    return new UserRatingChanged__Params(this);
  }
}

export class UserRatingChanged__Params {
  _event: UserRatingChanged;

  constructor(event: UserRatingChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newUserRating(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawAll extends ethereum.Event {
  get params(): WithdrawAll__Params {
    return new WithdrawAll__Params(this);
  }
}

export class WithdrawAll__Params {
  _event: WithdrawAll;

  constructor(event: WithdrawAll) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DChess__puzzlesByIdResult {
  value0: string;
  value1: Bytes;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: string;

  constructor(
    value0: string,
    value1: Bytes,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    return map;
  }

  getFen(): string {
    return this.value0;
  }

  getSolution(): Bytes {
    return this.value1;
  }

  getRating(): BigInt {
    return this.value2;
  }

  getMetadata(): BigInt {
    return this.value3;
  }

  getCreator(): Address {
    return this.value4;
  }

  getDescription(): string {
    return this.value5;
  }
}

export class DChess extends ethereum.SmartContract {
  static bind(address: Address): DChess {
    return new DChess("DChess", address);
  }

  artAddr(): Address {
    let result = super.call("artAddr", "artAddr():(address)", []);

    return result[0].toAddress();
  }

  try_artAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("artAddr", "artAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  internalTokenCounter(): BigInt {
    let result = super.call(
      "internalTokenCounter",
      "internalTokenCounter():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_internalTokenCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "internalTokenCounter",
      "internalTokenCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelisted(user: Address, proof: Array<Bytes>): boolean {
    let result = super.call(
      "isWhitelisted",
      "isWhitelisted(address,bytes32[]):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromFixedBytesArray(proof),
      ],
    );

    return result[0].toBoolean();
  }

  try_isWhitelisted(
    user: Address,
    proof: Array<Bytes>,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address,bytes32[]):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromFixedBytesArray(proof),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kFactor(): BigInt {
    let result = super.call("kFactor", "kFactor():(uint256)", []);

    return result[0].toBigInt();
  }

  try_kFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("kFactor", "kFactor():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  merkleRoot(): Bytes {
    let result = super.call("merkleRoot", "merkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_merkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("merkleRoot", "merkleRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFee(): BigInt {
    let result = super.call("platformFee", "platformFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_platformFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformFee", "platformFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  puzzlesById(param0: BigInt): DChess__puzzlesByIdResult {
    let result = super.call(
      "puzzlesById",
      "puzzlesById(uint256):(string,bytes32,uint256,uint256,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new DChess__puzzlesByIdResult(
      result[0].toString(),
      result[1].toBytes(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toString(),
    );
  }

  try_puzzlesById(
    param0: BigInt,
  ): ethereum.CallResult<DChess__puzzlesByIdResult> {
    let result = super.tryCall(
      "puzzlesById",
      "puzzlesById(uint256):(string,bytes32,uint256,uint256,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DChess__puzzlesByIdResult(
        value[0].toString(),
        value[1].toBytes(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toString(),
      ),
    );
  }

  submitSolution(internalTokenId: BigInt, solution: Bytes): boolean {
    let result = super.call(
      "submitSolution",
      "submitSolution(uint256,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(internalTokenId),
        ethereum.Value.fromBytes(solution),
      ],
    );

    return result[0].toBoolean();
  }

  try_submitSolution(
    internalTokenId: BigInt,
    solution: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "submitSolution",
      "submitSolution(uint256,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(internalTokenId),
        ethereum.Value.fromBytes(solution),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenMintPrice(): BigInt {
    let result = super.call("tokenMintPrice", "tokenMintPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenMintPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenMintPrice",
      "tokenMintPrice():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(internalTokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(internalTokenId),
    ]);

    return result[0].toString();
  }

  try_uri(internalTokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(internalTokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  userHasAttemptedPuzzle(internalTokenId: BigInt, user: Address): boolean {
    let result = super.call(
      "userHasAttemptedPuzzle",
      "userHasAttemptedPuzzle(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(internalTokenId),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBoolean();
  }

  try_userHasAttemptedPuzzle(
    internalTokenId: BigInt,
    user: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "userHasAttemptedPuzzle",
      "userHasAttemptedPuzzle(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(internalTokenId),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userHasSolvedPuzzle(internalTokenId: BigInt, user: Address): boolean {
    let result = super.call(
      "userHasSolvedPuzzle",
      "userHasSolvedPuzzle(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(internalTokenId),
        ethereum.Value.fromAddress(user),
      ],
    );

    return result[0].toBoolean();
  }

  try_userHasSolvedPuzzle(
    internalTokenId: BigInt,
    user: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "userHasSolvedPuzzle",
      "userHasSolvedPuzzle(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(internalTokenId),
        ethereum.Value.fromAddress(user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userRatings(param0: Address): BigInt {
    let result = super.call("userRatings", "userRatings(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_userRatings(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRatings",
      "userRatings(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _artAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPuzzleCall extends ethereum.Call {
  get inputs(): AddPuzzleCall__Inputs {
    return new AddPuzzleCall__Inputs(this);
  }

  get outputs(): AddPuzzleCall__Outputs {
    return new AddPuzzleCall__Outputs(this);
  }
}

export class AddPuzzleCall__Inputs {
  _call: AddPuzzleCall;

  constructor(call: AddPuzzleCall) {
    this._call = call;
  }

  get fen(): string {
    return this._call.inputValues[0].value.toString();
  }

  get solution(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get metadata(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get description(): string {
    return this._call.inputValues[3].value.toString();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class AddPuzzleCall__Outputs {
  _call: AddPuzzleCall;

  constructor(call: AddPuzzleCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get internalTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get count(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetArtCall extends ethereum.Call {
  get inputs(): SetArtCall__Inputs {
    return new SetArtCall__Inputs(this);
  }

  get outputs(): SetArtCall__Outputs {
    return new SetArtCall__Outputs(this);
  }
}

export class SetArtCall__Inputs {
  _call: SetArtCall;

  constructor(call: SetArtCall) {
    this._call = call;
  }

  get _artAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetArtCall__Outputs {
  _call: SetArtCall;

  constructor(call: SetArtCall) {
    this._call = call;
  }
}

export class SetKFactorCall extends ethereum.Call {
  get inputs(): SetKFactorCall__Inputs {
    return new SetKFactorCall__Inputs(this);
  }

  get outputs(): SetKFactorCall__Outputs {
    return new SetKFactorCall__Outputs(this);
  }
}

export class SetKFactorCall__Inputs {
  _call: SetKFactorCall;

  constructor(call: SetKFactorCall) {
    this._call = call;
  }

  get _kFactor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetKFactorCall__Outputs {
  _call: SetKFactorCall;

  constructor(call: SetKFactorCall) {
    this._call = call;
  }
}

export class SetMerkleRootCall extends ethereum.Call {
  get inputs(): SetMerkleRootCall__Inputs {
    return new SetMerkleRootCall__Inputs(this);
  }

  get outputs(): SetMerkleRootCall__Outputs {
    return new SetMerkleRootCall__Outputs(this);
  }
}

export class SetMerkleRootCall__Inputs {
  _call: SetMerkleRootCall;

  constructor(call: SetMerkleRootCall) {
    this._call = call;
  }

  get _merkleRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetMerkleRootCall__Outputs {
  _call: SetMerkleRootCall;

  constructor(call: SetMerkleRootCall) {
    this._call = call;
  }
}

export class SetPlatformFeeCall extends ethereum.Call {
  get inputs(): SetPlatformFeeCall__Inputs {
    return new SetPlatformFeeCall__Inputs(this);
  }

  get outputs(): SetPlatformFeeCall__Outputs {
    return new SetPlatformFeeCall__Outputs(this);
  }
}

export class SetPlatformFeeCall__Inputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPlatformFeeCall__Outputs {
  _call: SetPlatformFeeCall;

  constructor(call: SetPlatformFeeCall) {
    this._call = call;
  }
}

export class SetTokenMintPriceCall extends ethereum.Call {
  get inputs(): SetTokenMintPriceCall__Inputs {
    return new SetTokenMintPriceCall__Inputs(this);
  }

  get outputs(): SetTokenMintPriceCall__Outputs {
    return new SetTokenMintPriceCall__Outputs(this);
  }
}

export class SetTokenMintPriceCall__Inputs {
  _call: SetTokenMintPriceCall;

  constructor(call: SetTokenMintPriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTokenMintPriceCall__Outputs {
  _call: SetTokenMintPriceCall;

  constructor(call: SetTokenMintPriceCall) {
    this._call = call;
  }
}

export class SubmitSolutionCall extends ethereum.Call {
  get inputs(): SubmitSolutionCall__Inputs {
    return new SubmitSolutionCall__Inputs(this);
  }

  get outputs(): SubmitSolutionCall__Outputs {
    return new SubmitSolutionCall__Outputs(this);
  }
}

export class SubmitSolutionCall__Inputs {
  _call: SubmitSolutionCall;

  constructor(call: SubmitSolutionCall) {
    this._call = call;
  }

  get internalTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get solution(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitSolutionCall__Outputs {
  _call: SubmitSolutionCall;

  constructor(call: SubmitSolutionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}
